Templates - Journals, CVs, Presentations, Reports and More - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InTemplatesFilters: All / Templates / Examples / ArticlesStart your projects with quality LaTeX templates for journals, CVs, resumes, papers, presentations, assignments, letters, project reports, and more. Search or browse below.SearchPopular TagsAcademic JournalBibliographyBookCalendarRésumé / CVFormal LetterHomework AssignmentNewsletterPosterPresentationProject / Lab ReportThesisRecentRelatório ESTG P.PORTOTemplate para relatórios de tese ou projeto final.
(versão 2)António PintoNEJLT templatePaper template for the Northern European Journal of Language TechnologyLeon DerczynskiUnipd PresentationUnofficial Beamer theme for presentations for the University of Padua.Mattia TamiazzoAssociation for Computing Machinery (ACM) - Small Standard Format TemplateOfficialThis is a sample file for ACM small trim journals using acmart.cls v2.00 (2023/11/07), as provided by the ACM. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.

This small trim template is used for submissions to the following journals and transactions:


Computers in Entertainment (CIE)
ACM Computing Surveys (CSUR)
Distributed Ledger Technologies: Research and Practice (DLT)
Formal Aspects of Computing (FAC)
ACM Games: Research and Practice (GAMES)
Journal of the ACM (JACM)
Journal of Data and Information Quality (JDIQ)
Journal of Data Science (JDS)
Journal of Experimental Algorithmics (JEA)
ACM Journal on Emerging Technologies in Computing Systems (JETC)
Proceedings of the ACM on Computer Graphics and Interactive Tech-
niques (PACMCGIT)
ACM Transactions on Autonomous and Adaptive Systems (TAAS)
ACM Transactions on Accessible Computing (TACCESS)
ACM Transactions on Architecture and Code Optimization (TACO)
ACM Transactions on Algorithms (TALG)
ACM Transactions on Asian Language and Low-Resource Information Processing (TALLIP)
ACM Transactions on Cyber-Physical Systems (TCPS)
ACM Transactions on Data Science (TDSCI)
ACM Transactions on Economics and Computation (TEAC)
ACM Transactions on Embedded Computing Systems (TECS)
ACM Transactions on Evolutionary Learning (TELO)
ACM Transactions on Human-Robot Interaction (THRI)
ACM Transactions on Interactive Intelligent Systems (TIIS)
ACM Transactions on Internet of Things (TIOT)
ACM Transactions on Intelligent Systems and Technology (TIST)
ACM Transactions on Knowledge Discovery from Data (TKDD)
ACM Transactions on Management Information Systems (TMIS)
ACM Transactions on Computing Education (TOCE)
ACM Transactions on Computer-Human Interaction (TOCHI)
ACM Transactions on Computational Logic (TOCL)
ACM Transactions on Computer Systems (TOCS)
ACM Transactions on Computation Theory (TOCT)
ACM Transactions on Design Automation of Electronic Systems (TODAES)
ACM Transactions on Database Systems (TODS)
ACM Transactions on Information Systems (TOIS)
ACM Transactions on Internet Technology (TOIT)
ACM Transactions on Modeling and Computer Simulation (TOMACS)
ACM Transactions on Multimedia Computing and Communications (TOMM)
ACM Transactions on Modeling and Performance Evaluation of Computing Systems (TOMPECS)
ACM Transactions on Mathematical Software (TOMS)
ACM Transactions on Parallel Computing (TOPC)
ACM Transactions on Programming Languages and Systems (TOPLAS)
ACM Transactions on Privacy and Security (TOPS)
ACM Transactions on Storage (TOS)
ACM Transactions on Software Engineering and Methodology (TOSEM)
ACM Transactions on Sensor Networks (TOSN)
ACM Transactions on Quantum Computing (TQC)
ACM Transactions on Reconfigurable Technology and Systems (TRETS)
ACM Transactions on Spatial Algorithms and Systems (TSAS)
ACM Transactions on Social Computing (TSC)
ACM Transactions on Speech and Language Processing (TSLP)
ACM Transactions on the Web (TWEB)


Once your article is complete, you can use 'Submit to ACM' button at the top of the Overleaf (formerly writeLaTeX) editor bar to quickly download your paper files and go straight to the appropriate ACM submission site.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - Generic Journal Manuscript TemplateOfficialThis is a sample file for ACM generic journal manuscripts, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.

All journals use acmsmall with the following exceptions:


acmlarge - Large single column format, used for IMWUT, JOCCH, PACMPL, POMACS, TAP
acmtog - Large double column format, used for TOG


Note: Most proceedings authors will use the "sigconf" proceedings template. If you are unsure which template variant to use, please request clarification from your event or publication contact.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - SIG Proceedings TemplateOfficialThis is a sample file for ACM SIG conference proceedings (except SIGPLAN), using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Note: Most proceedings authors will use this "sigconf" proceedings template. If you are unsure which template variant to use, please request clarification from your event or publication contact. As of March 2017, this format (sigconf) should also be used for SIGGRAPH conferences; and as of May 2020 this format (sigconf) should also be used for SIGCHI conferences.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - SIG Conference Proceedings with Small Format TemplateOfficialThis is a sample file for ACM SIG conference proceedings with the acmsmall format specifications, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Note: There are only a small group of ACM conferences which permitted to use this template. If you are unsure which template variant to use, please request clarification from your event or publication contact.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - SIGPLAN Proceedings TemplateOfficialThis is a sample file for ACM SIGPLAN conference proceedings, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Note: Most proceedings authors will use the "sigconf" proceedings template. If you are unsure which template variant to use, please request clarification from your event or publication contact.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - Large 2-Column Format TemplateOfficialThis is a sample file for ACM large trim, 2-column journals, specifically showing an example of a paper for ACM Transactions on Graphics, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

This large double column format is used for submissions to ACM Transactions on Graphics (TOG).

Once your article is complete, you can use 'Submit to ACM' button at the top of the Overleaf editor bar to quickly download your paper files and go straight to the appropriate ACM submission site.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)12345…Next ›Last »FeaturedA quick guide to LaTeX
Know the LaTeX command you want to use but can't remember how to write it?


Here we present a great tips sheet produced by Dave Richeson; it's pre-loaded in Overleaf so you can see how the commands work instantly.

Simply click on the button above to open a version in Overleaf for editing (and to quickly copy and paste the commands you need!).


For more comments visit this page on Dave's site, or if you'd like to work through a fuller introduction to LaTeX why not check out our free online course?
Example by Division by ZeroModern Simple CVA modern simple (academic) CV template.

With no colour, but a few different tabulars for visualizing your skills and cv events. 
The template has no colour, but adding logos to your events will still make it relatively colourful (and thus, not strictly classic,  why I called it "modern").
You can play around with different fonts. The places where the changes can be made are indicated by comments.
The fancy font for the name can be taken away, if you don't want it.

The github repo is here: https://github.com/latex-ninja/modern-simple-cvSarah LangExample ProjectAn example LaTeX project for starting off your own articleOverleafMSc or PhD Dissertation Template (Originally for the University of Malta)A modern dissertation (or thesis) LaTeX template.  Originally used during my D.Phil. at the University of Oxford.  Now updated to be used by students at the University of Malta.  Easily customizable, so trivial to change colours and logos for your own institution.

Github repo:
https://github.com/jp-um/university_of_malta_LaTeX_dissertation_template

Get in touch if you find anything untoward or have any questions (or want to buy me beer).Dr Jean-Paul EbejerBasic Academic Journal Article TemplateThis is a basic journal article template which includes metadata fields for multiple authors, affiliations and keywords.

It is also set up to use the lineno package for line numbers; these can be turned on by adding the 'lineno' option to the documentclass command.John HammersleyHenriquesLab bioRxiv templateOfficialThis is a gorgeous template for bioRxiv pre-prints. 

An example manuscript using it can be found here.Ricardo HenriquesAboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Learn LaTeX in 30 minutes - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsLearn LaTeX in 30 minutesThis introductory tutorial does not assume any prior experience of LaTeX but, hopefully, by the time you are finished, you will not only have written your first LaTeX document but also acquired sufficient knowledge and confidence to take the next steps toward LaTeX proficiency.

Contents

1 What is LaTeX?
2 Why learn LaTeX?
3 Writing your first piece of LaTeX
4 The preamble of a document
5 Including title, author and date information
6 Adding comments
7 Bold, italics and underlining
8 Adding images
9 Captions, labels and references
10 Creating lists in LaTeX

10.1 Unordered lists
10.2 Ordered lists


11 Adding math to LaTeX

11.1 Inline math mode
11.2 Display math mode
11.3 More complete examples


12 Basic document structure

12.1 Abstracts
12.2 Paragraphs and new lines
12.3 Chapters and sections


13 Creating tables

13.1 Creating a basic table in LaTeX
13.2 Adding borders
13.3 Captions, labels and references


14 Adding a Table of Contents
15 Downloading your finished document
16 Finding and using LaTeX packages

16.1 Loading packages
16.2 Finding information about packages: CTAN
16.3 Packages available on Overleaf: Introducing TeX Live




What is LaTeX?
LaTeX (pronounced “LAY-tek” or “LAH-tek”) is a tool for typesetting professional-looking documents. However, LaTeX’s mode of operation is quite different to many other document-production applications you may have used, such as Microsoft Word or LibreOffice Writer: those “WYSIWYG” tools provide users with an interactive page into which they type and edit their text and apply various forms of styling. LaTeX works very differently: instead, your document is a plain text file interspersed with LaTeX commands used to express the desired (typeset) results. To produce a visible, typeset document, your LaTeX file is processed by a piece of software called a TeX engine which uses the commands embedded in your text file to guide and control the typesetting process, converting the LaTeX commands and document text into a professionally typeset PDF file. This means you only need to focus on the content of your document and the computer, via LaTeX commands and the TeX engine, will take care of the visual appearance (formatting).

Why learn LaTeX?
Various arguments can be proposed for, or against, learning to use LaTeX instead of other document-authoring applications; but, ultimately, it is a personal choice based on preferences, affinities, and documentation requirements. 
Arguments in favour of LaTeX include:

support for typesetting extremely complex mathematics, tables and technical content for the physical sciences;
facilities for footnotes, cross-referencing and management of bibliographies;
ease of producing complicated, or tedious, document elements such as indexes, glossaries, table of contents, lists of figures;
being highly customizable for bespoke document production due to its intrinsic programmability and extensibility through thousands of free add-on packages.
Overall, LaTeX provides users with a great deal of control over the production of documents which are typeset to extremely high standards. Of course, there are types of documents or publications where LaTeX doesn’t shine, including many “free form” page designs typically found in magazine-type publications.
One important benefit of LaTeX is the separation of document content from document style: once you have written the content of your document, its appearance can be changed with ease. Similarly, you can create a LaTeX file which defines the layout/style of a particular document type and that file can be used as a template to standardise authorship/production of additional documents of that type; for example, this allows scientific publishers to create article templates, in LaTeX, which authors use to write papers for submission to journals. Overleaf has a gallery containing thousands of templates, covering an enormous range of document types—everything from scientific articles, reports and books to CVs and presentations. Because these templates define the layout and style of the document, authors need only to open them in Overleaf—creating a new project—and commence writing to add their content.

Writing your first piece of LaTeX
The first step is to create a new LaTeX project. You can do this on your own computer by creating a new .tex file; alternatively, you can start a new project in Overleaf.
Let’s start with the simplest working example, which can be opened directly in Overleaf:



\documentclass{article}
\begin{document}
First document. This is a simple example, with no 
extra parameters or packages included.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




You can see that LaTeX has automatically indented the first line of the paragraph, taking care of that formatting for you. Let’s have a closer look at what each part of our code does.
The first line of code, \documentclass{article}, declares the document type known as its class, which controls the overall appearance of the document. Different types of documents require different classes; i.e., a CV/resume will require a different class than a scientific paper which might use the standard LaTeX article class. Other types of documents you may be working on may require different classes such as book or report. To get some idea of the many LaTeX class types available,  visit the relevant page on CTAN (Comprehensive TeX Archive Network).
Having set the document class, our content, known as the body of the document, is written between the \begin{document} and \end{document} tags. After opening the example above, you can make changes to the text and, when finished, view the resulting typeset PDF by recompiling the document. To do this in Overleaf, simply hit Recompile, as demonstrated in this brief video clip:





Any Overleaf project can be configured to recompile automatically each time it is edited: click the small arrow next to the Recompile button and set Auto Compile to On, as shown in the following screengrab:

Having seen how to add content to our document, the next step is to give it a title. To do this, we must talk briefly about the preamble.

The preamble of a document
The screengrab above shows Overleaf storing a LaTeX document as a file called main.tex: the .tex file extension is, by convention, used when naming files containing your document’s LaTeX code. 
The previous example showed how document content was entered after the \begin{document} command; however, everything in your .tex file appearing before that point is called the preamble, which acts as the document’s “setup” section. Within the preamble you define the document class (type) together with specifics such as languages to be used when writing the document; loading packages you would like to use (more on this later), and it is where you’d apply other types of configuration. 
A minimal document preamble might look like this:




\documentclass[12pt, letterpaper]{article}
\usepackage{graphicx}




where \documentclass[12pt, letterpaper]{article} defines the overall class (type) of document. Additional parameters, which must be separated by commas, are included in square brackets ([...]) and used to configure this instance of the article class; i.e., settings we wish to use for this particular article-class-based document. 
In this example, the two parameters do the following: 

12pt sets the font size
letterpaper sets the paper size
Of course other font sizes, 9pt, 11pt, 12pt, can be used, but if none is specified, the default size is 10pt. As for the paper size, other possible values are a4paper and legalpaper. For further information see the article about page size and margins.
The preamble line 




\usepackage{graphicx}




is an example of loading an external package (here, graphicx) to extend LaTeX’s capabilities, enabling it to import external graphics files. LaTeX packages are discussed in the section Finding and using LaTeX packages.

Including title, author and date information
Adding a title, author and date to our document requires three more lines in the preamble (not the main body of the document). Those lines are:

\title{My first LaTeX document}: the document title
\author{Hubert Farnsworth}: here you write the name of the author(s) and, optionally, the \thanks command within the curly braces:
\thanks{Funded by the Overleaf team.}: can be added after the name of the author, inside the braces of the author command. It will add a superscript and a footnote with the text inside the braces. Useful if you need to thank an institution in your article.
\date{August 2022}: you can enter the date manually or use the command \today to typeset the current date every time the document is compiled
With these lines added, your preamble should look something like this:




\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}




To typeset the title, author and date use the \maketitle command within the body of the document:




\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}




The preamble and body can now be combined to produce a complete document which can be opened in Overleaf:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Adding comments
LaTeX is a form of “program code”, but one which specializes in document typesetting; consequently, as with code written in any other programming language, it can be very useful to include comments within your document. A LaTeX comment is a section of text that will not be typeset or affect the document in any way—often used to add “to do” notes; include explanatory notes; provide in-line explanations of tricky macros or comment-out lines/sections of LaTeX code when debugging. 
To make a comment in LaTeX, simply write a % symbol at the beginning of the line, as shown in the following code which uses the example above:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!

% This line here is a comment. It will not be typeset in the document.
\end{document}



 Open this example in Overleaf.

This example produces output that is identical to the previous LaTeX code which did not contain the comment.

Bold, italics and underlining
Next, we will now look at some text formatting commands:

Bold: bold text in LaTeX is typeset using the \textbf{...} command.
Italics: italicised text is produced using the \textit{...} command.
Underline: to underline text use the \underline{...} command.
The next example demonstrates these commands:



Some of the \textbf{greatest}
discoveries in \underline{science} 
were made by \textbf{\textit{accident}}.



 Open this example in Overleaf.

This example produces the following output:




Another very useful command is \emph{argument}, whose effect on its argument depends on the context. Inside normal text, the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text—see the next example:



Some of the greatest \emph{discoveries} in science 
were made by accident.

\textit{Some of the greatest \emph{discoveries} 
in science were made by accident.}

\textbf{Some of the greatest \emph{discoveries} 
in science were made by accident.}



 Open this \emph example in Overleaf.

This example produces the following output:





Note: some packages, such as Beamer, change the behaviour of the \emph command.
Adding images
In this section we will now look at how to add images to a LaTeX document—note that you need to upload images to your Overleaf project.
The following example demonstrates how to include a picture:




\documentclass{article}
\usepackage{graphicx} %LaTeX package to import graphics
\graphicspath{{images/}} %configuring the graphicx package
 
\begin{document}
The universe is immense and it seems to be homogeneous, 
on a large scale, everywhere we look.

% The \includegraphcs command is 
% provided (implemented) by the 
% graphicx package
\includegraphics{universe}  
 
There's a picture of a galaxy above.
\end{document}



 Open this image example in Overleaf.
This example produces the following output:




Importing graphics into a LaTeX document needs an add-on package which provides the commands and features required to include external graphics files. The above example loads the  graphicx package which, among many other commands, provides \includegraphics{...} to import graphics and \graphicspath{...} to advise LaTeX where the graphics are located.
To use the graphicx package, include the following line in your Overleaf document preamble:




\usepackage{graphicx}




In our example the command \graphicspath{{images/}} informs LaTeX that images are kept in a folder named images, which is contained in the current directory:

The \includegraphics{universe} command does the actual work of inserting the image in the document. Here, universe is the name of the image file but without its extension. 
Note:

Although the full file name, including its extension, is allowed in the \includegraphics command, it’s considered best practice to omit the file extension because it will prompt LaTeX to search for all the supported formats.
Generally, the graphic’s file name should not contain white spaces or multiple dots; it is also recommended to use lowercase letters for the file extension when uploading image files to Overleaf.
More information on LaTeX packages can be found at the end of this tutorial in the section Finding and using LaTeX packages. 

Captions, labels and references
Images can be captioned, labelled and referenced by means of the figure environment, as shown below:




\documentclass{article}
\usepackage{graphicx}
\graphicspath{{images/}}
 
\begin{document}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.75\textwidth]{mesh}
    \caption{A nice plot.}
    \label{fig:mesh1}
\end{figure}
 
As you can see in figure \ref{fig:mesh1}, the function grows near the origin. This example is on page \pageref{fig:mesh1}.

\end{document}



 Open this image example in Overleaf.
This example produces the following output:




There are several noteworthy commands in the example:

\includegraphics[width=0.75\textwidth]{mesh}: This form of \includegraphics instructs LaTeX to set the figure’s width to 75% of the text width—whose value is stored in the \textwidth command.
\caption{A nice plot.}: As its name suggests, this command sets the figure caption which can be placed above or below the figure. If you create a list of figures this caption will be used in that list.
\label{fig:mesh1}: To reference this image within your document you give it a label using the \label command. The label is used to generate a number for the image and, combined with the next command, will allow you to reference it.
\ref{fig:mesh1}: This code will be substituted by the number corresponding to the referenced figure.
Images incorporated in a LaTeX document should be placed inside a figure environment, or similar, so that LaTeX can automatically position the image at a suitable location in your document.
Further guidance is contained in the following Overleaf help articles:

Positioning of Figures
Inserting Images
Creating lists in LaTeX
You can create different types of list using environments, which are used to encapsulate the LaTeX code required to implement a specific typesetting feature. An environment starts with \begin{environment-name} and ends with \end{environment-name} where environment-name might be figure, tabular or one of the list types: itemize for unordered lists or enumerate for ordered lists.

Unordered lists
Unordered lists are produced by the itemize environment. Each list entry must be preceded by the \item command,  as shown below: 



\documentclass{article}
\begin{document}
\begin{itemize}
  \item The individual entries are indicated with a black dot, a so-called bullet.
  \item The text in the entries may be of any length.
\end{itemize}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





You can also open this  larger Overleaf project
 which demonstrates various types of LaTeX list.
Ordered lists
Ordered lists use the same syntax as unordered lists but are created using the enumerate environment:



\documentclass{article}
\begin{document}
\begin{enumerate}
  \item This is the first entry in our list.
  \item The list numbers increase with each entry we add.
\end{enumerate}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




As with unordered lists, each entry must be preceded by the \item command which, here, automatically generates the numeric ordered-list label value, starting at 1.

For further information you can open this  larger Overleaf project
 which demonstrates various types of LaTeX list or visit our dedicated help article on LaTeX lists, which provides many more examples and shows how to create customized lists.
Adding math to LaTeX
One of the main advantages of LaTeX is the ease with which mathematical expressions can be written. LaTeX provides two writing modes for typesetting mathematics:

inline math mode used for writing formulas that are part of a paragraph
display math mode used to write expressions that are not part of a text or paragraph and are typeset on separate lines
Inline math mode
Let’s see an example of inline math mode:



\documentclass[12pt, letterpaper]{article}
\begin{document}
In physics, the mass-energy equivalence is stated 
by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset inline-mode math you can use one of these delimiter pairs: \( ... \), $ ... $ or \begin{math} ... \end{math}, as demonstrated in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
\begin{math}
E=mc^2
\end{math} is typeset in a paragraph using inline math mode---as is $E=mc^2$, and so too is \(E=mc^2\).
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Display math mode
Equations typeset in display mode can be numbered or unnumbered, as in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
The mass-energy equivalence is described by the famous equation
\[ E=mc^2 \] discovered in 1905 by Albert Einstein. 

In natural units ($c = 1$), the formula expresses the identity
\begin{equation}
E=m
\end{equation}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset display-mode math you can use one of these delimiter pairs: \[ ... \], \begin{displaymath} ... \end{displaymath} or \begin{equation} ... \end{equation}. Historically, typesetting display-mode math required use of $$ characters delimiters, as in $$ ... display math here ...$$, but  this method is no longer recommended: use LaTeX’s delimiters \[ ... \] instead.

More complete examples
The following examples demonstrate a range of mathematical content typeset using LaTeX. 



\documentclass{article}
\begin{document}
Subscripts in math mode are written as $a_b$ and superscripts are written as $a^b$. These can be combined and nested to write expressions such as

\[ T^{i_1 i_2 \dots i_p}_{j_1 j_2 \dots j_q} = T(x^{i_1},\dots,x^{i_p},e_{j_1},\dots,e_{j_q}) \]
 
We write integrals using $\int$ and fractions using $\frac{a}{b}$. Limits are placed on integrals using superscripts and subscripts:

\[ \int_0^1 \frac{dx}{e^x} =  \frac{e-1}{e} \]

Lower case Greek letters are written as $\omega$ $\delta$ etc. while upper case Greek letters are written as $\Omega$ $\Delta$.

Mathematical operators are prefixed with a backslash as $\sin(\beta)$, $\cos(\alpha)$, $\log(x)$ etc.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The next example uses the equation* environment which is provided by the amsmath package, so we need to add the following line to our document preamble:




\usepackage{amsmath}% For the equation* environment




For further information on using amsmath see our help article.



\documentclass{article}
\usepackage{amsmath}% For the equation* environment
\begin{document}
\section{First example}

The well-known Pythagorean theorem \(x^2 + y^2 = z^2\) was proved to be invalid for other exponents, meaning the next equation has no integer solutions for \(n>2\):

\[ x^n + y^n = z^n \]

\section{Second example}

This is a simple math expression \(\sqrt{x^2+1}\) inside text. 
And this is also the same: 
\begin{math}
\sqrt{x^2+1}
\end{math}
but by using another command.

This is a simple math expression without numbering
\[\sqrt{x^2+1}\] 
separated from text.

This is also the same:
\begin{displaymath}
\sqrt{x^2+1}
\end{displaymath}

\ldots and this:
\begin{equation*}
\sqrt{x^2+1}
\end{equation*}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The possibilities with math in LaTeX are endless so be sure to visit our help pages for advice and examples on specific topics:

Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Fractions and Binomials
Aligning Equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Basic document structure
Next, we explore abstracts and how to partition a LaTeX document into different chapters, sections and paragraphs.

Abstracts
Scientific articles usually provide an abstract which is a brief overview/summary of their core topics, or arguments. The next example demonstrates typesetting an abstract using LaTeX’s abstract environment:



\documentclass{article}
\begin{document}
\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Paragraphs and new lines
With the abstract in place, we can begin writing our first paragraph. The next example demonstrates: 

how a new paragraph is created by pressing the "enter" key twice, ending the current line and inserting a subsequent blank line;
how to start a new line without starting a new paragraph by inserting a manual line break using the \\ command, which is a double backslash; alternatively, use the \newline command.
The third paragraph in this example demonstrates use of the commands \\ and \newline:



\documentclass{article}
\begin{document}

\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}

After our abstract we can begin the first paragraph, then press ``enter'' twice to start the second one.

This line will start a second paragraph.

I will start the third paragraph and then add \\ a manual line break which causes this text to start on a new line but remains part of the same paragraph. Alternatively, I can use the \verb|\newline|\newline command to start a new line, which is also part of the same paragraph.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Note how LaTeX automatically indents paragraphs—except immediately after document headings such as section and subsection—as we will see.
New users are advised that multiple \\ or \newlines should not used to “simulate” paragraphs with larger spacing between them because this can interfere with LaTeX’s typesetting algorithms. The recommended method is to continue using blank lines for creating new paragraphs, without any \\, and load the parskip package by adding \usepackage{parskip} to the preamble.
Further information on paragraphs can be found in the following articles:

Paragraphs and new lines
How to change paragraph spacing in LaTeX
LaTeX Error: There's no line here to end provides additional advice and guidance on using \\.
Chapters and sections
Longer documents, irrespective of authoring software, are usually partitioned into parts, chapters, sections, subsections and so forth. LaTeX also provides document-structuring commands but the available commands, and their implementations (what they do), can depend on the document class being used. By way of example, documents created using the book class can be split into parts, chapters, sections, subsections and so forth but the letter class does not provide (support) any commands to do that. 
This next example demonstrates commands used to structure a document based on the book class:



\documentclass{book}
\begin{document}

\chapter{First Chapter}

\section{Introduction}

This is the first section.

Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit. Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...

\section{Second Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\subsection{First Subsection}
Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...

\section*{Unnumbered Section}
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The names of sectioning commands are mostly self-explanatory; for example, \chapter{First Chapter} creates a new chapter titled First Chapter, \section{Introduction} produces a section titled Introduction, and so forth. Sections can be further divided into \subsection{...} and even \subsubsection{...}. The numbering of sections, subsections etc. is automatic but can be disabled by using the so-called starred version of the appropriate command which has an asterisk (*) at the end, such as \section*{...} and \subsection*{...}. 
Collectively, LaTeX document classes provide the following sectioning commands, with specific classes each supporting a relevant subset:

\part{part}
\chapter{chapter}
\section{section}
\subsection{subsection}
\subsubsection{subsubsection}
\paragraph{paragraph}
\subparagraph{subparagraph}
In particular, the \part and \chapter commands are only available in the report and book document classes. 
Visit the Overleaf article article about sections and chapters for further information about document-structure commands.

Creating tables
The following examples show how to create tables in LaTeX, including the addition of lines (rules) and captions. 

Creating a basic table in LaTeX
We start with an example showing how to typeset a basic table:



\begin{center}
\begin{tabular}{c c c}
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\  
 cell7 & cell8 & cell9    
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




The tabular environment is the default LaTeX method to create tables. You must specify a parameter to this environment, in this case {c c c} which advises LaTeX that there will be three columns and the text inside each one must be centred. You can also use r to right-align the text and l to left-align it. The alignment symbol & is used to demarcate individual table cells within a table row. To end a table row use the new line command \\. Our table is contained within a center environment to make it centred within the text width of the page.

Adding borders
The tabular environment supports horizontal and vertical lines (rules) as part of the table:

to add horizontal rules, above and below rows, use the \hline command
to add vertical rules, between columns, use the vertical line parameter |
In this example the argument is {|c|c|c|} which declares three (centred) columns each separated by a vertical line (rule); in addition, we use \hline to place a horizontal rule above the first row and below the final row:



\begin{center}
\begin{tabular}{|c|c|c|} 
 \hline
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\ 
 cell7 & cell8 & cell9 \\ 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Here is a further example:



\begin{center}
 \begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 \hline
 2 & 7 & 78 & 5415 \\
 \hline
 3 & 545 & 778 & 7507 \\
 \hline
 4 & 545 & 18744 & 7560 \\
 \hline
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Tip!

Creating tables in LaTeX can be time-consuming so you may want to use the TablesGenerator.com online tool to export LaTeX code for tabulars.
Captions, labels and references
You can caption and reference tables in much the same way as images. The only difference is that instead of the figure environment, you use the table environment.



Table \ref{table:data} shows how to add a table caption and reference a table.
\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{Table to test captions and labels.}
\label{table:data}
\end{table}



 Open this example in Overleaf.

This example produces the following output:





Adding a Table of Contents
Creating a table of contents is straightforward because the command \tableofcontents does almost all the work for you:



\documentclass{article}
\title{Sections and Chapters}
\author{Gubert Farnsworth}
\date{August 2022}
\begin{document}
  
\maketitle
  
\tableofcontents

\section{Introduction}
   
This is the first section.
      
Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...
       
\section*{Unnumbered Section}
\addcontentsline{toc}{section}{Unnumbered Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\section{Second Section}
       
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Sections, subsections and chapters are automatically included in the table of contents. To manually add entries, such as an unnumbered section, use the command \addcontentsline as shown in the example.

Downloading your finished document
The following brief video clip shows how to download your project’s source code or the typeset PDF file:





More information can be found in the Overleaf help article Exporting your work from Overleaf.

Finding and using LaTeX packages
LaTeX not only delivers significant typesetting capabilities but also provides a framework for extensibility through the use of add-on packages. Rather than attempting to provide commands and features that “try to do everything”, LaTeX is designed to be extensible, allowing users to load external bodies of code (packages) that provide more specialist typesetting capabilities or extend LaTeX’s built-in features—such as typesetting tables. As observed in the section Adding images, the graphicx package extends LaTeX by providing commands to import graphics files and was loaded (in the preamble) by writing




\usepackage{graphicx}




Loading packages
As noted above, packages are loaded in the document preamble via the \usepackage command but because (many) LaTeX packages provide a set of options, which can be used to configure their behaviour, the \usepackage command often looks like this:  




\usepackage[options]{somepackage}




The square brackets “[...]” inform LaTeX which set of options should be applied when it loads somepackage. Within the set of options requested by the user, individual options, or settings, are typically separated by a comma; for example, the geometry package provides many options to configure page layout in LaTeX, so a typical use of geometry  might look like this:




\usepackage[total={6.5in,8.75in},
top=1.2in, left=0.9in, includefoot]{geometry}




The geometry package is one example of a package written and contributed by members of the global LaTeX community and made available, for free, to anyone who wants to use it.
If a LaTeX package does not provide any options, or the user wants to use the default values of a package’s options, it would be loaded like this:




\usepackage{somepackage}




When you write \usepackage[...]{somepackage} LaTeX looks for a corresponding file called somepackage.sty, which it needs to load and process—to make the package commands available and execute any other code provided by that package. If LaTeX cannot find somepackage.sty it will terminate with an error, as demonstrated in the following Overleaf example:



\documentclass[12pt, letterpaper]{article}
\usepackage{somepackage}% a NON-EXISTENT package
\begin{document}
This will fail!
\end{document}



 Open this error-generating example on Overleaf

This example produces the following output:


Finding information about packages: CTAN
Packages are distributed through the Comprehensive TeX Archive Network, usually referred to as CTAN, which, at the time of writing, hosts 6287 packages from 2881 contributors. CTAN describes itself as 


... a set of Internet sites around the world that offer TEX-related material for download.


You can browse CTAN to look for useful packages; for example:

by topic
alphabetically (useful if you know the package name)
You can also use the search facility (at the top of the page).

Packages available on Overleaf: Introducing TeX Live
Once per year a (large) subset of packages hosted on CTAN, plus LaTeX-related fonts and other software, is collated and distributed as a system called TeX Live, which can be used to install your own (local) LaTeX setup. In fact, Overleaf’s servers also use TeX Live and are updated when a new version of TeX Live is released. Overleaf’s TeX Live updates are not immediate but take place a few months post-release, giving us time to perform compatibility tests of the new TeX Live version with the thousands of templates contained in our gallery. For example, here is our TeX Live 2022 upgrade announcement. 
Although TeX Live contains a (large) subset of CTAN packages it is possible to find an interesting package, such as igo for typesetting Go diagrams, which is hosted on CTAN but not included in (distributed by) TeX Live and thus unavailable on Overleaf. Some packages hosted on CTAN are not part of TeX Live due to a variety of reasons: perhaps a package is obsolete, has licensing problems, is extremely new (recently uploaded) or has platform dependencies, such as working on Windows but not Linux. 
New packages, and updates to existing ones, are uploaded to CTAN all year round but updates to TeX Live are distributed annually; consequently, packages contained in the current version of TeX Live will not be as up-to-date as those hosted on CTAN. Because Overleaf’s servers use TeX Live it is possible that packages installed on our servers—i.e., ones available to our users—might not be the very latest versions available on CTAN but, generally, this is unlikely to be problematic.

Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Learn LaTeX in 30 minutes - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsLearn LaTeX in 30 minutesThis introductory tutorial does not assume any prior experience of LaTeX but, hopefully, by the time you are finished, you will not only have written your first LaTeX document but also acquired sufficient knowledge and confidence to take the next steps toward LaTeX proficiency.

Contents

1 What is LaTeX?
2 Why learn LaTeX?
3 Writing your first piece of LaTeX
4 The preamble of a document
5 Including title, author and date information
6 Adding comments
7 Bold, italics and underlining
8 Adding images
9 Captions, labels and references
10 Creating lists in LaTeX

10.1 Unordered lists
10.2 Ordered lists


11 Adding math to LaTeX

11.1 Inline math mode
11.2 Display math mode
11.3 More complete examples


12 Basic document structure

12.1 Abstracts
12.2 Paragraphs and new lines
12.3 Chapters and sections


13 Creating tables

13.1 Creating a basic table in LaTeX
13.2 Adding borders
13.3 Captions, labels and references


14 Adding a Table of Contents
15 Downloading your finished document
16 Finding and using LaTeX packages

16.1 Loading packages
16.2 Finding information about packages: CTAN
16.3 Packages available on Overleaf: Introducing TeX Live




What is LaTeX?
LaTeX (pronounced “LAY-tek” or “LAH-tek”) is a tool for typesetting professional-looking documents. However, LaTeX’s mode of operation is quite different to many other document-production applications you may have used, such as Microsoft Word or LibreOffice Writer: those “WYSIWYG” tools provide users with an interactive page into which they type and edit their text and apply various forms of styling. LaTeX works very differently: instead, your document is a plain text file interspersed with LaTeX commands used to express the desired (typeset) results. To produce a visible, typeset document, your LaTeX file is processed by a piece of software called a TeX engine which uses the commands embedded in your text file to guide and control the typesetting process, converting the LaTeX commands and document text into a professionally typeset PDF file. This means you only need to focus on the content of your document and the computer, via LaTeX commands and the TeX engine, will take care of the visual appearance (formatting).

Why learn LaTeX?
Various arguments can be proposed for, or against, learning to use LaTeX instead of other document-authoring applications; but, ultimately, it is a personal choice based on preferences, affinities, and documentation requirements. 
Arguments in favour of LaTeX include:

support for typesetting extremely complex mathematics, tables and technical content for the physical sciences;
facilities for footnotes, cross-referencing and management of bibliographies;
ease of producing complicated, or tedious, document elements such as indexes, glossaries, table of contents, lists of figures;
being highly customizable for bespoke document production due to its intrinsic programmability and extensibility through thousands of free add-on packages.
Overall, LaTeX provides users with a great deal of control over the production of documents which are typeset to extremely high standards. Of course, there are types of documents or publications where LaTeX doesn’t shine, including many “free form” page designs typically found in magazine-type publications.
One important benefit of LaTeX is the separation of document content from document style: once you have written the content of your document, its appearance can be changed with ease. Similarly, you can create a LaTeX file which defines the layout/style of a particular document type and that file can be used as a template to standardise authorship/production of additional documents of that type; for example, this allows scientific publishers to create article templates, in LaTeX, which authors use to write papers for submission to journals. Overleaf has a gallery containing thousands of templates, covering an enormous range of document types—everything from scientific articles, reports and books to CVs and presentations. Because these templates define the layout and style of the document, authors need only to open them in Overleaf—creating a new project—and commence writing to add their content.

Writing your first piece of LaTeX
The first step is to create a new LaTeX project. You can do this on your own computer by creating a new .tex file; alternatively, you can start a new project in Overleaf.
Let’s start with the simplest working example, which can be opened directly in Overleaf:



\documentclass{article}
\begin{document}
First document. This is a simple example, with no 
extra parameters or packages included.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




You can see that LaTeX has automatically indented the first line of the paragraph, taking care of that formatting for you. Let’s have a closer look at what each part of our code does.
The first line of code, \documentclass{article}, declares the document type known as its class, which controls the overall appearance of the document. Different types of documents require different classes; i.e., a CV/resume will require a different class than a scientific paper which might use the standard LaTeX article class. Other types of documents you may be working on may require different classes such as book or report. To get some idea of the many LaTeX class types available,  visit the relevant page on CTAN (Comprehensive TeX Archive Network).
Having set the document class, our content, known as the body of the document, is written between the \begin{document} and \end{document} tags. After opening the example above, you can make changes to the text and, when finished, view the resulting typeset PDF by recompiling the document. To do this in Overleaf, simply hit Recompile, as demonstrated in this brief video clip:





Any Overleaf project can be configured to recompile automatically each time it is edited: click the small arrow next to the Recompile button and set Auto Compile to On, as shown in the following screengrab:

Having seen how to add content to our document, the next step is to give it a title. To do this, we must talk briefly about the preamble.

The preamble of a document
The screengrab above shows Overleaf storing a LaTeX document as a file called main.tex: the .tex file extension is, by convention, used when naming files containing your document’s LaTeX code. 
The previous example showed how document content was entered after the \begin{document} command; however, everything in your .tex file appearing before that point is called the preamble, which acts as the document’s “setup” section. Within the preamble you define the document class (type) together with specifics such as languages to be used when writing the document; loading packages you would like to use (more on this later), and it is where you’d apply other types of configuration. 
A minimal document preamble might look like this:




\documentclass[12pt, letterpaper]{article}
\usepackage{graphicx}




where \documentclass[12pt, letterpaper]{article} defines the overall class (type) of document. Additional parameters, which must be separated by commas, are included in square brackets ([...]) and used to configure this instance of the article class; i.e., settings we wish to use for this particular article-class-based document. 
In this example, the two parameters do the following: 

12pt sets the font size
letterpaper sets the paper size
Of course other font sizes, 9pt, 11pt, 12pt, can be used, but if none is specified, the default size is 10pt. As for the paper size, other possible values are a4paper and legalpaper. For further information see the article about page size and margins.
The preamble line 




\usepackage{graphicx}




is an example of loading an external package (here, graphicx) to extend LaTeX’s capabilities, enabling it to import external graphics files. LaTeX packages are discussed in the section Finding and using LaTeX packages.

Including title, author and date information
Adding a title, author and date to our document requires three more lines in the preamble (not the main body of the document). Those lines are:

\title{My first LaTeX document}: the document title
\author{Hubert Farnsworth}: here you write the name of the author(s) and, optionally, the \thanks command within the curly braces:
\thanks{Funded by the Overleaf team.}: can be added after the name of the author, inside the braces of the author command. It will add a superscript and a footnote with the text inside the braces. Useful if you need to thank an institution in your article.
\date{August 2022}: you can enter the date manually or use the command \today to typeset the current date every time the document is compiled
With these lines added, your preamble should look something like this:




\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}




To typeset the title, author and date use the \maketitle command within the body of the document:




\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}




The preamble and body can now be combined to produce a complete document which can be opened in Overleaf:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Adding comments
LaTeX is a form of “program code”, but one which specializes in document typesetting; consequently, as with code written in any other programming language, it can be very useful to include comments within your document. A LaTeX comment is a section of text that will not be typeset or affect the document in any way—often used to add “to do” notes; include explanatory notes; provide in-line explanations of tricky macros or comment-out lines/sections of LaTeX code when debugging. 
To make a comment in LaTeX, simply write a % symbol at the beginning of the line, as shown in the following code which uses the example above:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!

% This line here is a comment. It will not be typeset in the document.
\end{document}



 Open this example in Overleaf.

This example produces output that is identical to the previous LaTeX code which did not contain the comment.

Bold, italics and underlining
Next, we will now look at some text formatting commands:

Bold: bold text in LaTeX is typeset using the \textbf{...} command.
Italics: italicised text is produced using the \textit{...} command.
Underline: to underline text use the \underline{...} command.
The next example demonstrates these commands:



Some of the \textbf{greatest}
discoveries in \underline{science} 
were made by \textbf{\textit{accident}}.



 Open this example in Overleaf.

This example produces the following output:




Another very useful command is \emph{argument}, whose effect on its argument depends on the context. Inside normal text, the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text—see the next example:



Some of the greatest \emph{discoveries} in science 
were made by accident.

\textit{Some of the greatest \emph{discoveries} 
in science were made by accident.}

\textbf{Some of the greatest \emph{discoveries} 
in science were made by accident.}



 Open this \emph example in Overleaf.

This example produces the following output:





Note: some packages, such as Beamer, change the behaviour of the \emph command.
Adding images
In this section we will now look at how to add images to a LaTeX document—note that you need to upload images to your Overleaf project.
The following example demonstrates how to include a picture:




\documentclass{article}
\usepackage{graphicx} %LaTeX package to import graphics
\graphicspath{{images/}} %configuring the graphicx package
 
\begin{document}
The universe is immense and it seems to be homogeneous, 
on a large scale, everywhere we look.

% The \includegraphcs command is 
% provided (implemented) by the 
% graphicx package
\includegraphics{universe}  
 
There's a picture of a galaxy above.
\end{document}



 Open this image example in Overleaf.
This example produces the following output:




Importing graphics into a LaTeX document needs an add-on package which provides the commands and features required to include external graphics files. The above example loads the  graphicx package which, among many other commands, provides \includegraphics{...} to import graphics and \graphicspath{...} to advise LaTeX where the graphics are located.
To use the graphicx package, include the following line in your Overleaf document preamble:




\usepackage{graphicx}




In our example the command \graphicspath{{images/}} informs LaTeX that images are kept in a folder named images, which is contained in the current directory:

The \includegraphics{universe} command does the actual work of inserting the image in the document. Here, universe is the name of the image file but without its extension. 
Note:

Although the full file name, including its extension, is allowed in the \includegraphics command, it’s considered best practice to omit the file extension because it will prompt LaTeX to search for all the supported formats.
Generally, the graphic’s file name should not contain white spaces or multiple dots; it is also recommended to use lowercase letters for the file extension when uploading image files to Overleaf.
More information on LaTeX packages can be found at the end of this tutorial in the section Finding and using LaTeX packages. 

Captions, labels and references
Images can be captioned, labelled and referenced by means of the figure environment, as shown below:




\documentclass{article}
\usepackage{graphicx}
\graphicspath{{images/}}
 
\begin{document}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.75\textwidth]{mesh}
    \caption{A nice plot.}
    \label{fig:mesh1}
\end{figure}
 
As you can see in figure \ref{fig:mesh1}, the function grows near the origin. This example is on page \pageref{fig:mesh1}.

\end{document}



 Open this image example in Overleaf.
This example produces the following output:




There are several noteworthy commands in the example:

\includegraphics[width=0.75\textwidth]{mesh}: This form of \includegraphics instructs LaTeX to set the figure’s width to 75% of the text width—whose value is stored in the \textwidth command.
\caption{A nice plot.}: As its name suggests, this command sets the figure caption which can be placed above or below the figure. If you create a list of figures this caption will be used in that list.
\label{fig:mesh1}: To reference this image within your document you give it a label using the \label command. The label is used to generate a number for the image and, combined with the next command, will allow you to reference it.
\ref{fig:mesh1}: This code will be substituted by the number corresponding to the referenced figure.
Images incorporated in a LaTeX document should be placed inside a figure environment, or similar, so that LaTeX can automatically position the image at a suitable location in your document.
Further guidance is contained in the following Overleaf help articles:

Positioning of Figures
Inserting Images
Creating lists in LaTeX
You can create different types of list using environments, which are used to encapsulate the LaTeX code required to implement a specific typesetting feature. An environment starts with \begin{environment-name} and ends with \end{environment-name} where environment-name might be figure, tabular or one of the list types: itemize for unordered lists or enumerate for ordered lists.

Unordered lists
Unordered lists are produced by the itemize environment. Each list entry must be preceded by the \item command,  as shown below: 



\documentclass{article}
\begin{document}
\begin{itemize}
  \item The individual entries are indicated with a black dot, a so-called bullet.
  \item The text in the entries may be of any length.
\end{itemize}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





You can also open this  larger Overleaf project
 which demonstrates various types of LaTeX list.
Ordered lists
Ordered lists use the same syntax as unordered lists but are created using the enumerate environment:



\documentclass{article}
\begin{document}
\begin{enumerate}
  \item This is the first entry in our list.
  \item The list numbers increase with each entry we add.
\end{enumerate}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




As with unordered lists, each entry must be preceded by the \item command which, here, automatically generates the numeric ordered-list label value, starting at 1.

For further information you can open this  larger Overleaf project
 which demonstrates various types of LaTeX list or visit our dedicated help article on LaTeX lists, which provides many more examples and shows how to create customized lists.
Adding math to LaTeX
One of the main advantages of LaTeX is the ease with which mathematical expressions can be written. LaTeX provides two writing modes for typesetting mathematics:

inline math mode used for writing formulas that are part of a paragraph
display math mode used to write expressions that are not part of a text or paragraph and are typeset on separate lines
Inline math mode
Let’s see an example of inline math mode:



\documentclass[12pt, letterpaper]{article}
\begin{document}
In physics, the mass-energy equivalence is stated 
by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset inline-mode math you can use one of these delimiter pairs: \( ... \), $ ... $ or \begin{math} ... \end{math}, as demonstrated in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
\begin{math}
E=mc^2
\end{math} is typeset in a paragraph using inline math mode---as is $E=mc^2$, and so too is \(E=mc^2\).
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Display math mode
Equations typeset in display mode can be numbered or unnumbered, as in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
The mass-energy equivalence is described by the famous equation
\[ E=mc^2 \] discovered in 1905 by Albert Einstein. 

In natural units ($c = 1$), the formula expresses the identity
\begin{equation}
E=m
\end{equation}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset display-mode math you can use one of these delimiter pairs: \[ ... \], \begin{displaymath} ... \end{displaymath} or \begin{equation} ... \end{equation}. Historically, typesetting display-mode math required use of $$ characters delimiters, as in $$ ... display math here ...$$, but  this method is no longer recommended: use LaTeX’s delimiters \[ ... \] instead.

More complete examples
The following examples demonstrate a range of mathematical content typeset using LaTeX. 



\documentclass{article}
\begin{document}
Subscripts in math mode are written as $a_b$ and superscripts are written as $a^b$. These can be combined and nested to write expressions such as

\[ T^{i_1 i_2 \dots i_p}_{j_1 j_2 \dots j_q} = T(x^{i_1},\dots,x^{i_p},e_{j_1},\dots,e_{j_q}) \]
 
We write integrals using $\int$ and fractions using $\frac{a}{b}$. Limits are placed on integrals using superscripts and subscripts:

\[ \int_0^1 \frac{dx}{e^x} =  \frac{e-1}{e} \]

Lower case Greek letters are written as $\omega$ $\delta$ etc. while upper case Greek letters are written as $\Omega$ $\Delta$.

Mathematical operators are prefixed with a backslash as $\sin(\beta)$, $\cos(\alpha)$, $\log(x)$ etc.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The next example uses the equation* environment which is provided by the amsmath package, so we need to add the following line to our document preamble:




\usepackage{amsmath}% For the equation* environment




For further information on using amsmath see our help article.



\documentclass{article}
\usepackage{amsmath}% For the equation* environment
\begin{document}
\section{First example}

The well-known Pythagorean theorem \(x^2 + y^2 = z^2\) was proved to be invalid for other exponents, meaning the next equation has no integer solutions for \(n>2\):

\[ x^n + y^n = z^n \]

\section{Second example}

This is a simple math expression \(\sqrt{x^2+1}\) inside text. 
And this is also the same: 
\begin{math}
\sqrt{x^2+1}
\end{math}
but by using another command.

This is a simple math expression without numbering
\[\sqrt{x^2+1}\] 
separated from text.

This is also the same:
\begin{displaymath}
\sqrt{x^2+1}
\end{displaymath}

\ldots and this:
\begin{equation*}
\sqrt{x^2+1}
\end{equation*}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The possibilities with math in LaTeX are endless so be sure to visit our help pages for advice and examples on specific topics:

Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Fractions and Binomials
Aligning Equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Basic document structure
Next, we explore abstracts and how to partition a LaTeX document into different chapters, sections and paragraphs.

Abstracts
Scientific articles usually provide an abstract which is a brief overview/summary of their core topics, or arguments. The next example demonstrates typesetting an abstract using LaTeX’s abstract environment:



\documentclass{article}
\begin{document}
\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Paragraphs and new lines
With the abstract in place, we can begin writing our first paragraph. The next example demonstrates: 

how a new paragraph is created by pressing the "enter" key twice, ending the current line and inserting a subsequent blank line;
how to start a new line without starting a new paragraph by inserting a manual line break using the \\ command, which is a double backslash; alternatively, use the \newline command.
The third paragraph in this example demonstrates use of the commands \\ and \newline:



\documentclass{article}
\begin{document}

\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}

After our abstract we can begin the first paragraph, then press ``enter'' twice to start the second one.

This line will start a second paragraph.

I will start the third paragraph and then add \\ a manual line break which causes this text to start on a new line but remains part of the same paragraph. Alternatively, I can use the \verb|\newline|\newline command to start a new line, which is also part of the same paragraph.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Note how LaTeX automatically indents paragraphs—except immediately after document headings such as section and subsection—as we will see.
New users are advised that multiple \\ or \newlines should not used to “simulate” paragraphs with larger spacing between them because this can interfere with LaTeX’s typesetting algorithms. The recommended method is to continue using blank lines for creating new paragraphs, without any \\, and load the parskip package by adding \usepackage{parskip} to the preamble.
Further information on paragraphs can be found in the following articles:

Paragraphs and new lines
How to change paragraph spacing in LaTeX
LaTeX Error: There's no line here to end provides additional advice and guidance on using \\.
Chapters and sections
Longer documents, irrespective of authoring software, are usually partitioned into parts, chapters, sections, subsections and so forth. LaTeX also provides document-structuring commands but the available commands, and their implementations (what they do), can depend on the document class being used. By way of example, documents created using the book class can be split into parts, chapters, sections, subsections and so forth but the letter class does not provide (support) any commands to do that. 
This next example demonstrates commands used to structure a document based on the book class:



\documentclass{book}
\begin{document}

\chapter{First Chapter}

\section{Introduction}

This is the first section.

Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit. Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...

\section{Second Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\subsection{First Subsection}
Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...

\section*{Unnumbered Section}
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The names of sectioning commands are mostly self-explanatory; for example, \chapter{First Chapter} creates a new chapter titled First Chapter, \section{Introduction} produces a section titled Introduction, and so forth. Sections can be further divided into \subsection{...} and even \subsubsection{...}. The numbering of sections, subsections etc. is automatic but can be disabled by using the so-called starred version of the appropriate command which has an asterisk (*) at the end, such as \section*{...} and \subsection*{...}. 
Collectively, LaTeX document classes provide the following sectioning commands, with specific classes each supporting a relevant subset:

\part{part}
\chapter{chapter}
\section{section}
\subsection{subsection}
\subsubsection{subsubsection}
\paragraph{paragraph}
\subparagraph{subparagraph}
In particular, the \part and \chapter commands are only available in the report and book document classes. 
Visit the Overleaf article article about sections and chapters for further information about document-structure commands.

Creating tables
The following examples show how to create tables in LaTeX, including the addition of lines (rules) and captions. 

Creating a basic table in LaTeX
We start with an example showing how to typeset a basic table:



\begin{center}
\begin{tabular}{c c c}
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\  
 cell7 & cell8 & cell9    
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




The tabular environment is the default LaTeX method to create tables. You must specify a parameter to this environment, in this case {c c c} which advises LaTeX that there will be three columns and the text inside each one must be centred. You can also use r to right-align the text and l to left-align it. The alignment symbol & is used to demarcate individual table cells within a table row. To end a table row use the new line command \\. Our table is contained within a center environment to make it centred within the text width of the page.

Adding borders
The tabular environment supports horizontal and vertical lines (rules) as part of the table:

to add horizontal rules, above and below rows, use the \hline command
to add vertical rules, between columns, use the vertical line parameter |
In this example the argument is {|c|c|c|} which declares three (centred) columns each separated by a vertical line (rule); in addition, we use \hline to place a horizontal rule above the first row and below the final row:



\begin{center}
\begin{tabular}{|c|c|c|} 
 \hline
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\ 
 cell7 & cell8 & cell9 \\ 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Here is a further example:



\begin{center}
 \begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 \hline
 2 & 7 & 78 & 5415 \\
 \hline
 3 & 545 & 778 & 7507 \\
 \hline
 4 & 545 & 18744 & 7560 \\
 \hline
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Tip!

Creating tables in LaTeX can be time-consuming so you may want to use the TablesGenerator.com online tool to export LaTeX code for tabulars.
Captions, labels and references
You can caption and reference tables in much the same way as images. The only difference is that instead of the figure environment, you use the table environment.



Table \ref{table:data} shows how to add a table caption and reference a table.
\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{Table to test captions and labels.}
\label{table:data}
\end{table}



 Open this example in Overleaf.

This example produces the following output:





Adding a Table of Contents
Creating a table of contents is straightforward because the command \tableofcontents does almost all the work for you:



\documentclass{article}
\title{Sections and Chapters}
\author{Gubert Farnsworth}
\date{August 2022}
\begin{document}
  
\maketitle
  
\tableofcontents

\section{Introduction}
   
This is the first section.
      
Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...
       
\section*{Unnumbered Section}
\addcontentsline{toc}{section}{Unnumbered Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\section{Second Section}
       
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Sections, subsections and chapters are automatically included in the table of contents. To manually add entries, such as an unnumbered section, use the command \addcontentsline as shown in the example.

Downloading your finished document
The following brief video clip shows how to download your project’s source code or the typeset PDF file:





More information can be found in the Overleaf help article Exporting your work from Overleaf.

Finding and using LaTeX packages
LaTeX not only delivers significant typesetting capabilities but also provides a framework for extensibility through the use of add-on packages. Rather than attempting to provide commands and features that “try to do everything”, LaTeX is designed to be extensible, allowing users to load external bodies of code (packages) that provide more specialist typesetting capabilities or extend LaTeX’s built-in features—such as typesetting tables. As observed in the section Adding images, the graphicx package extends LaTeX by providing commands to import graphics files and was loaded (in the preamble) by writing




\usepackage{graphicx}




Loading packages
As noted above, packages are loaded in the document preamble via the \usepackage command but because (many) LaTeX packages provide a set of options, which can be used to configure their behaviour, the \usepackage command often looks like this:  




\usepackage[options]{somepackage}




The square brackets “[...]” inform LaTeX which set of options should be applied when it loads somepackage. Within the set of options requested by the user, individual options, or settings, are typically separated by a comma; for example, the geometry package provides many options to configure page layout in LaTeX, so a typical use of geometry  might look like this:




\usepackage[total={6.5in,8.75in},
top=1.2in, left=0.9in, includefoot]{geometry}




The geometry package is one example of a package written and contributed by members of the global LaTeX community and made available, for free, to anyone who wants to use it.
If a LaTeX package does not provide any options, or the user wants to use the default values of a package’s options, it would be loaded like this:




\usepackage{somepackage}




When you write \usepackage[...]{somepackage} LaTeX looks for a corresponding file called somepackage.sty, which it needs to load and process—to make the package commands available and execute any other code provided by that package. If LaTeX cannot find somepackage.sty it will terminate with an error, as demonstrated in the following Overleaf example:



\documentclass[12pt, letterpaper]{article}
\usepackage{somepackage}% a NON-EXISTENT package
\begin{document}
This will fail!
\end{document}



 Open this error-generating example on Overleaf

This example produces the following output:


Finding information about packages: CTAN
Packages are distributed through the Comprehensive TeX Archive Network, usually referred to as CTAN, which, at the time of writing, hosts 6287 packages from 2881 contributors. CTAN describes itself as 


... a set of Internet sites around the world that offer TEX-related material for download.


You can browse CTAN to look for useful packages; for example:

by topic
alphabetically (useful if you know the package name)
You can also use the search facility (at the top of the page).

Packages available on Overleaf: Introducing TeX Live
Once per year a (large) subset of packages hosted on CTAN, plus LaTeX-related fonts and other software, is collated and distributed as a system called TeX Live, which can be used to install your own (local) LaTeX setup. In fact, Overleaf’s servers also use TeX Live and are updated when a new version of TeX Live is released. Overleaf’s TeX Live updates are not immediate but take place a few months post-release, giving us time to perform compatibility tests of the new TeX Live version with the thousands of templates contained in our gallery. For example, here is our TeX Live 2022 upgrade announcement. 
Although TeX Live contains a (large) subset of CTAN packages it is possible to find an interesting package, such as igo for typesetting Go diagrams, which is hosted on CTAN but not included in (distributed by) TeX Live and thus unavailable on Overleaf. Some packages hosted on CTAN are not part of TeX Live due to a variety of reasons: perhaps a package is obsolete, has licensing problems, is extremely new (recently uploaded) or has platform dependencies, such as working on Windows but not Linux. 
New packages, and updates to existing ones, are uploaded to CTAN all year round but updates to TeX Live are distributed annually; consequently, packages contained in the current version of TeX Live will not be as up-to-date as those hosted on CTAN. Because Overleaf’s servers use TeX Live it is possible that packages installed on our servers—i.e., ones available to our users—might not be the very latest versions available on CTAN but, generally, this is unlikely to be problematic.

Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Paragraphs and new lines - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsParagraphs and new linesContents

1 Introduction
2 A first example
3 Starting a new paragraph
4 Paragraph alignment

4.1 flushleft and flushright environments
4.2 \raggedright and \raggedleft


5 Paragraph indentation

5.1 Notes on indentation-related commands


6 Further Reading


Introduction
This article introduces basic LaTeX paragraph formatting, including how to change text alignment. More detailed information, and further examples, can be found in the articles Text alignment and Paragraph formatting.

A first example
Let's start with an example which typesets two centred paragraphs by writing them inside a center environment. Note how a new paragraph is started by inserting a blank line between them—although that's a commonly-used method, it's not the only way to start a new paragraph.



\begin{center}
Example 1: The following paragraph (given in quotes) is an 
example of centred alignment using the center environment. 

``La\TeX{} is a document preparation system and document markup 
language. \LaTeX{} uses the \TeX{} typesetting program for formatting 
its output, and is itself written in the \TeX{} macro language. 
\LaTeX{} is not the name of a particular (executable) typesetting program, but 
refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents."
\end{center}



 Open this example in Overleaf

This example produces the following output:


Starting a new paragraph
As noted above, one way to start a new paragraph is by inserting a blank line but the following code snippet shows an alternative solution which uses the \par command: 



This is text contained in the first paragraph. 
This is text contained in the first paragraph. 
This is text contained in the first paragraph.\par
This is text contained in the second paragraph. 
This is text contained in the second paragraph.
This is text contained in the second paragraph.



 Open this example in Overleaf

This example produces the following output:


Paragraph alignment
By default paragraphs in LaTeX are fully justified, i.e. flush with both the left and right margins. If you would like to typeset an unjustified paragraph you can use the flushleft or flushright environments.

flushleft and flushright environments
The next example demonstrates typesetting a paragraph within the flushleft and flushright environments—for an example of the center environment see the section A first example.



\section*{A paragraph typeset flush left}

\begin{flushleft}
La\TeX{} is a document preparation system and document markup 
language. \LaTeX{} uses the \TeX{} typesetting program for formatting 
its output, and is itself written in the \TeX{} macro language. 
\LaTeX{} is not the name of a particular (executable) typesetting program, but 
refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.
\end{flushleft}

\section*{A paragraph typeset flush right}

\begin{flushright}
La\TeX{} is a document preparation system and document markup 
language. \LaTeX{} uses the \TeX{} typesetting program for formatting 
its output, and is itself written in the \TeX{} macro language. 
\LaTeX{} is not the name of a particular (executable) typesetting program, but 
refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.
\end{flushright}



 Open this example in Overleaf

This example produces the following output:


\raggedright and \raggedleft
An alternative to using environments such as flushleft, flushright or center are the so-called "switch" commands: 

\raggedright, an alternative to using the flushleft environment
\raggedleft, an alternative to using the flushright environment
\centering, an alternative to using the center environment
These switch commands change text alignment from the point they are inserted down to the end of the document—unless their effect(s) are restricted to a group or changed by another switch command. 
In the following example, the effects of \raggedright, \raggedleft and \centering are localized because they are used within the group created by \begingroup ... \endgroup. In addition, note that in each case the paragraph text is followed by a blank line, before the \endgroup command, which triggers LaTeX to typeset the paragraph whilst the settings applied by \raggedright, \raggedleft and \centering are still active.



\section*{A fully justified  typeset paragraph} 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\section*{A paragraph typeset using \texttt{\string\raggedright}}

\begingroup
\raggedright 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\endgroup

\section*{A paragraph typeset using \texttt{\string\raggedleft}}

\begingroup
\raggedleft 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\endgroup

\section*{A paragraph typeset using \texttt{\string\centering}}

\begingroup
\centering 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\endgroup



 Open this example in Overleaf

This example produces the following output:

For more detailed information and examples of text alignment see the Overleaf article on text alignment  which also discusses using the ragged2e LaTeX package to typeset ragged text and configure hyphenation.

Paragraph indentation
By default new paragraphs are usually indented by an amount controlled by a parameter called \parindent whose value can be set using the command \setlength; for example:



\setlength{\parindent}{20pt}



sets \parindent to 20pt. You can avoid indentation by setting \parindent to 0pt (or 0mm, 0cm etc) or using the command \noindent at the beginning of the paragraph. By default LaTeX does not indent the first paragraph contained in a document section as demonstrated in the following example:



\setlength{\parindent}{20pt}

\section*{This is a section}
\textbf{First paragraph} of a section which, as you can see, is not indented. This is more text in the paragraph. This is more text in the paragraph.

\textbf{Second paragraph}. As you can see it is indented. This is more text in the paragraph. This is more text in the paragraph. 

\noindent\textbf{Third paragraph}. This too is not indented due to use of \texttt{\string\noindent}. This is more text in the paragraph. This is more text in the paragraph.  The current value of \verb|\parindent| is \the\parindent. This is more text in the paragraph.



 Open this example in Overleaf

This example produces the following output:


Notes on indentation-related commands
Paragraph indentation is controlled or influenced by three commands:

\parindent: a parameter which stores the current size of the paragraph indent
\indent: the effect of this command depends where it is used:
in a horizontal mode (inside a paragraph or an \hbox) or math mode it inserts a space (an empty box) of width \parindent
in a vertical mode (between paragraphs or in a \vbox) it triggers the start a new indented paragraph
\noindent: the effect of this command also depends where it is used:
in a vertical mode (between paragraphs or in a \vbox) it also triggers a new non-indented paragraph
in a horizontal mode (inside a paragraph or an \hbox) or math mode it has no effect: it is ignored
The following example demonstrates \indent:



\documentclass{article}
% Using the geometry package with a small
% page size to create the article graphic
\usepackage[paperheight=6in,
   paperwidth=5in,
   top=10mm,
   bottom=20mm,
   left=10mm,
   right=10mm]{geometry}
\begin{document}
\noindent A new paragraph with some text, then an \verb|\indent|\indent command. Next, some inline math which also has an indent $y\indent x$. \verb|\indent| also works when used in an \verb|\hbox| such as \verb|\hbox{A\indent B}| which produces \hbox{A\indent B}.
\end{document}



 Open this example in Overleaf

This example produces the following output:


Further Reading
For more information check 

Paragraph formatting
Text alignment
Lengths in LaTeX
Line breaks and blank spaces
Lists
Bold, italics and underlining
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Bold, italics and underlining - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBold, italics and underliningContents

1 Introduction
2 Italicized text
3 Bold text
4 Underlined text
5 Emphasising text
6 Full set of examples
7 Further reading


Introduction
Simple text formatting helps to highlight important concepts within a document and make it more readable. Using italics, bold or underlined words can change the perception of the reader.
In this article three basic text formatting tools will be explained: italics, bold and underline. Let's begin with an example:



Some of the \textbf{greatest} 
discoveries in \underline{science} 
were made by \textbf{\textit{accident}}.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:

As you can see, there are three basic commands and they can be nested to get combined effects.
Note: The original text-formatting commands from plain TeX, \it (italicize) and \bf (bold face) will still work in a LaTeX document but their use is discouraged and not recommended because they don't preserve previous styles. For example, when using those old commands you can't apply both italics and bold at the same time.

Italicized text
To make a text italic is straightforward, use the \textit (\emph) command:



Some of the greatest 
discoveries in science 
were made by \textit{accident}.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:


Bold text
To make a text bold use \textbf command:



Some of the \textbf{greatest} 
discoveries in science 
were made by accident.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:


Underlined text
To underline text use the \underline command:



Some of the greatest 
discoveries in \underline{science} 
were made by accident.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:


Emphasising text
Text can be emphasized using the \emph command. Sometimes the \emph command behaves just as \textit, but is not exactly the same:



Some of the greatest \emph{discoveries} 
in science 
were made by accident.

\textit{Some of the greatest \emph{discoveries} 
in science 
were made by accident.}

\textbf{Some of the greatest \emph{discoveries} 
in science 
were made by accident.}



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:

What the \emph command actually does with its argument depends on the context—inside normal text the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text—see example above. Moreover, some packages, e.g. Beamer, change the behaviour of the \emph command.

Full set of examples
The following example collects the various code fragments contained in this article so that you can open them all together in Overleaf.



First example, bold, italics and underline:

Some of the \textbf{greatest} discoveries in \underline{science} were made by \textbf{\emph{accident}}.

\vspace{1.5cm}

Example of italicized text: 

Some of the greatest discoveries in science were made by \emph{accident}.

\vspace{1.5cm}

Example of boldface text:

Some of the \textbf{greatest} discoveries in science were made by accident.

\vspace{1.5cm}

Example of underlined text:

Some of the greatest discoveries in \underline{science} were made by accident.

\vspace{1.5cm}

Example of emphasized text in different contexts:

Some of the greatest \emph{discoveries} in science were made by accident.

\textit{Some of the greatest \emph{discoveries} in science were made by accident.}

\textbf{Some of the greatest \emph{discoveries} in science were made by accident.}



 Open this LaTeX code in Overleaf.



Further reading
For more information see

Paragraphs and new lines
Lists
Paragraph formatting
Line breaks and blank spaces
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Lists - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsListsContents

1 Introduction
2 Examples of basic lists

2.1 The itemize environment for bulleted (unordered) lists
2.2 The enumerate environment for numbered (ordered) lists
2.3 The description environment


3 Changing the label of individual entries
4 Nested lists

4.1 Nested lists: label style

4.1.1 Nested enumerate lists: number format
4.1.2 Nested itemize lists: bullet style




5 Customizing lists

5.1 Customizing lists: changing labels

5.1.1 Standard label-generation commands
5.1.2 Counter variables for enumerate
5.1.3 Examples: customizing labels of enumerate lists

5.1.3.1 Practical example
5.1.3.2 Printing counter variables
5.1.3.3 Non-practical (fun) example




5.2 Customizing lists: changing the layout

5.2.1 LaTeX list parameters
5.2.2 Creating a custom list using the list environment


5.3 Using the enumitem package to modify and create lists

5.3.1 enumitem package option shortlabels
5.3.2 Modifying a standard list
5.3.3 Creating a new list with enumitem

5.3.3.1 Using \setlist to configure a custom list created with enumitem


5.3.4 Lists for lawyers: nesting lists to an arbitrary depth
5.3.5 Custom bullets using the enumitem package and MetaPost

5.3.5.1 Example 1: auto-sizing bullet points
5.3.5.2 Example 2: funky custom bullets






6 Other features of the enumitem package


Introduction
This article provides an introduction to typesetting, and customizing, various types of list in LaTeX:

the itemize environment for creating a bulleted (unordered) list
the enumerate environment for creating a numbered (ordered) list
the description environment for creating a list of descriptions
Typesetting lists is a large topic because LaTeX lists are extremely configurable, enabling creation of an enormous variety of list types and structures. We’ll survey and demonstrate some methods you can use to configure and customize your lists.

Examples of basic lists
The itemize environment for bulleted (unordered) lists
Unordered (bulleted) lists are produced by the itemize environment, where each list entry starts by using the \item command, which also generates the bullet symbol. 



Lists are easy to create:
\begin{itemize}
  \item List entries start with the \verb|\item| command.
  \item Individual entries are indicated with a black dot, a so-called bullet.
  \item The text in the entries may be of any length.
\end{itemize}



 Open this example in Overleaf.

This example produces the following output:


The enumerate environment for numbered (ordered) lists
Numbered (ordered) lists have the same syntax but use the enumerate environment: each entry must be preceded by the control sequence \item, which will automatically generate  numbers to label the item. These numbers start at 1 with every use of the enumerate environment—note that this, default, LaTeX numbering behaviour can be changed/controlled via the enumitem package. 



Numbered (ordered) lists are easy to create:
\begin{enumerate}
  \item Items are numbered automatically.
  \item The numbers start at 1 with each use of the \texttt{enumerate} environment.
  \item Another entry in the list
\end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


The description environment
The following example demonstrates the description environment. The (optional) label for each entry is enclosed in square brackets after the \item command:



\item[label text] Text of your description goes here...



We also use the blindtext package to generate some dummy English text in the third entry. To obtain English we need to use the babel package with the language option [english]:



\usepackage[english]{babel}



Here is the example:



\documentclass{article}
\usepackage[english]{babel} % To obtain English text with the blindtext package
\usepackage{blindtext}
\begin{document}

\begin{description}
   \item This is an entry \textit{without} a label.
   \item[Something short] A short one-line description.
   \item[Something long] A much longer description. \blindtext[1]
\end{description}
\end{document}



 Open this example in Overleaf.

This example produces the following output:


Changing the label of individual entries
As shown in the description environment example, the \item command takes an optional parameter, in square brackets. You can use this feature within itemize and enumerate environments to change the default label of individual entries in your list:



\item[label text] Text of your entry goes here...



The label text will be used to produce the label for this entry.



Change the labels using \verb|\item[label text]| in an \texttt{itemize} environment
\begin{itemize}
  \item This is my first point
  \item Another point I want to make 
  \item[!] A point to exclaim something!
  \item[$\blacksquare$] Make the point fair and square.
  \item[NOTE] This entry has no bullet
  \item[] A blank label?
\end{itemize}

\vspace{10pt}

Change the labels using \verb|\item[label text]| in an \texttt{enumerate} environment
\begin{enumerate}
  \item This is my first point
  \item Another point I want to make 
  \item[!] A point to exclaim something!
  \item[$\blacksquare$] Make the point fair and square.
  \item[NOTE] This entry has no bullet
  \item[] A blank label?
\end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


Nested lists
In LaTeX you can insert a list inside another list. The above list types may be included within one another, either mixed or of one type, to a depth of 4 levels.



\begin{enumerate}
   \item The labels consists of sequential numbers
   \begin{itemize}
     \item The individual entries are indicated with a black dot, a so-called bullet
     \item The text in the entries may be of any length
     \begin{description}
     \item[Note:] I would like to describe something here
     \item[Caveat!] And give a warning here
     \end{description}
   \end{itemize}
   \item The numbers starts at 1 with each use of the \texttt{enumerate} environment
\end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


Nested lists: label style
The label style of nested list entries changes according to its depth in the list. For nested itemize lists the bullet type changes; for enumerate lists the number format changes with increasing depth of entry. Both are limited to a depth of 4 levels.

Nested enumerate lists: number format


\begin{enumerate}
   \item First level item
   \item First level item
   \begin{enumerate}
     \item Second level item
     \item Second level item
     \begin{enumerate}
       \item Third level item
       \item Third level item
       \begin{enumerate}
         \item Fourth level item
         \item Fourth level item
       \end{enumerate}
     \end{enumerate}
   \end{enumerate}
 \end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


Nested itemize lists: bullet style
The bullet style changes depending on the depth of the nested lists:



\begin{itemize}
   \item First level item
   \item First level item
   \begin{itemize}
     \item Second level item
     \item Second level item
     \begin{itemize}
       \item Third level item
       \item Third level item
       \begin{itemize}
         \item Fourth level item
         \item Fourth level item
       \end{itemize}
     \end{itemize}
   \end{itemize}
 \end{itemize}



 Open this example in Overleaf.

This example produces the following output:


Customizing lists
LaTeX’s lists are highly configurable, providing plenty of scope for the creation of many different types of customized list. You can either make direct modifications to LaTeX’s standard list types or, preferably, use the highly versatile enumitem package to do it for you. 
CTAN hosts a number of list-related packages which may be worth investigating if you have particular customization requirements. In addition, tex.stackexchange provides a wealth of list-related questions with answers that provide useful insights and great examples!
We’ll start with some examples which modify list labels then move on to customization of list layouts.

Customizing lists: changing labels
Firstly, we show how to change list labelling without using the enumitem package. 

Standard label-generation commands
Custom lists can be produced by using the enumitem package or direct modification of the standard lists. Here, we’ll give a summary of some standard LaTeX commands, counter variables and list parameters that you may need to be aware of.
The following table shows the LaTeX commands used for label-generation at each level of the itemize and enumerate list environments:










Level
enumerate label commands
itemize label commands


Level 1
\labelenumi
\labelitemi


Level 2
\labelenumii
\labelitemii


Level 3
\labelenumiii
\labelitemiii


Level 4
\labelenumiv
\labelitemiv





Counter variables for enumerate
The enumerate list environment also uses four counter variables which keep track of the current label value for each level:





Level
enumerate counter variable


Level 1
enumi


Level 2
enumii


Level 3
enumiii


Level 4
enumiv





Examples: customizing labels of enumerate lists
You can configure LaTeX’s standard labelling by using \renewcommand to redefine the label-generating commands and, for the enumerate environment, you can also use the appropriate counter variable. 
Here are some examples which do this without using the enumitem package.

Practical example


\documentclass{article}
\begin{document}
\renewcommand{\labelenumii}{\arabic{enumi}.\arabic{enumii}}
\renewcommand{\labelenumiii}{\arabic{enumi}.\arabic{enumii}.\arabic{enumiii}}
\renewcommand{\labelenumiv}{\arabic{enumi}.\arabic{enumii}.\arabic{enumiii}.\arabic{enumiv}}

\begin{enumerate}
\item One
\item Two
\item Three
\begin{enumerate}
    \item Three point one
    \begin{enumerate}
    \item Three point one, point one
        \begin{enumerate}
        \item Three point one, point one, point one
        \item Three point one, point one, point two
        \end{enumerate}
    \end{enumerate}
\end{enumerate}
\item Four
\item Five
\end{enumerate}

\end{document}



 Open this example in Overleaf.

This example produces the following output:


Printing counter variables
In the previous example, the command \arabic was used to typeset the current value of various label counter variables. Note that “Arabic numerals”, and use of the command \arabic, refers to the digits 0 to 9: see this Arabic numerals article on Wikipedia for further background.
In general, a counter variable can be printed in various formats by using one of the following 5 commands:

\arabic{counter variable}
\roman{counter variable}
\Roman{counter variable}
\Alph{counter variable}
\alph{counter variable}
For example:



\documentclass{article}
\begin{document}
\begin{verbatim}
\newcounter{foo}
\setcounter{foo}{5}    
\end{verbatim}
\newcounter{foo}
\setcounter{foo}{5} 

\begin{itemize}
\item \verb|\arabic{foo}| produces \arabic{foo}
\item \verb|\roman{foo}| produces \roman{foo} 
\item \verb|\Roman{foo}| produces \Roman{foo}
\item \verb|\Alph{foo}| produces \Alph{foo}
\item \verb|\alph{foo}| produces \alph{foo}
\end{itemize}

\end{document}



 Open this example in Overleaf.

This example produces the following output:


Non-practical (fun) example
This example typesets emoji using an OpenType colour font so it will only work in LuaLaTeX. See the Overleaf article An overview of technologies supporting the use of colour emoji fonts in LaTeX for more information on typesetting emoji.
Although this a just a fun example, using LuaLaTeX, it demonstrates customizing all four label-generation commands, and using the label-counter variables, to create some unusual labelling... Click the “Open in Overleaf” link to see the full code.



\renewcommand{\labelenumi}{\duck{enumi}}
\renewcommand{\labelenumii}{\duck{enumi}.\duckegg{enumii}}
\renewcommand{\labelenumiii}{\duck{enumi}.\duckegg{enumii}.\duckegg{enumiii}}
\renewcommand{\labelenumiv}{\duck{enumi}.\duckegg{enumii}.\duckegg{enumiii}.\duckchick{enumiv}} 

\begin{enumerate}
\item A duck
\item More ducks
\item A flurry of ducks
\begin{enumerate}
    \item Ducks and eggs
    \begin{enumerate}
    \item Do I see... 
    \item Ducks and pre-ducks 
       \begin{enumerate}
       \item Awww...
       \item So cute!
       \end{enumerate}
    \end{enumerate}
\end{enumerate}
\item Back to ducks
\item Again
\end{enumerate}



 To see the full code, open this LuaLaTeX example in Overleaf.

This example produces the following output 


Customizing lists: changing the layout
In addition to customizing labels, it is possible to modify list spacing and layout, but first we need to know the various LaTeX parameters which determine typesetting and layout of lists. 

LaTeX list parameters
You can use the layouts package to generate a diagram which displays the LaTeX list parameters:



\documentclass{article}
\usepackage{layouts}
\begin{document}
\begin{figure}
\listdiagram
\caption{The \LaTeX{} parameters which define typesetting and layout of lists.} 
\end{figure}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The meaning of these parameters is described in the list section of the LaTeX2e unofficial reference manual so we won’t reproduce it here.

Creating a custom list using the list environment
LaTeX provides the generic list environment which provides a framework for creating your own list type(s). Using the information contained in the diagram above, the following example is a slightly modified version of one contained in the  list section of the LaTeX2e unofficial reference manual



\documentclass{article}
\begin{document}
\newcounter{boxlblcounter}  
\newcommand{\makeboxlabel}[1]{\fbox{#1.}\hfill}% \hfill fills the label box
\newenvironment{boxlabel}
  {\begin{list}
    {\arabic{boxlblcounter}}
    {\usecounter{boxlblcounter}
     \setlength{\labelwidth}{3em}
     \setlength{\labelsep}{0em}
     \setlength{\itemsep}{2pt}
     \setlength{\leftmargin}{1.5cm}
     \setlength{\rightmargin}{2cm}
     \setlength{\itemindent}{0em} 
     \let\makelabel=\makeboxlabel
    }
  }
{\end{list}}

\newcommand{\randomtext}{Hello, here is some text without a meaning. Hello, here is some text without a meaning. Hello, here is some text without a meaning.}

\noindent\randomtext

\begin{boxlabel}
\item \randomtext
\item \randomtext
\item \randomtext
\end{boxlabel}
\end{document}



 Open this example in Overleaf.

This example produces the following output:


Using the enumitem package to modify and create lists
The enumitem package is the recommended method for modifying standard LaTeX lists or creating your own custom list formats. enumitem provides a wealth of features so we can’t cover all of them but we can provide a few basic examples to help get you get started. Anyone wishing to explore this versatile package in more depth is strongly encouraged to browse tex.stackexchange for questions, answers (and examples) relating to the enumitem package, and to read the package documentation.

enumitem package option shortlabels
The enumitem provides an optional configuration parameter called shortlabels which you use via



\usepackage[shortlabels]{enumitem}



The shortlabels option mimics the behaviour of the enumerate package, providing a concise method for defining the numbering scheme of enumerate environments. See the enumerate package documentation for further information.

Modifying a standard list
With reference to the LaTeX parameters diagram we can use enumitem to easily customize a standard LaTeX list, such as itemize:



\documentclass{article}
\usepackage{enumitem}

\begin{document}

\newcommand{\randomtext}{Hello, here is some text without a meaning. Hello, here is some text without a meaning.}

\section*{Using LaTeX's default settings for \texttt{itemize}}

\randomtext

\begin{itemize}
\item \randomtext
   \begin{itemize}
      \item \randomtext
        \begin{itemize}
        \item \randomtext
        \end{itemize}
   \item \randomtext
   \end{itemize}
\item \randomtext
\end{itemize}

\section*{Using a custom \texttt{itemize} via \texttt{enumitem}}

\subsection*{Note the effect of left and right margin settings}

\randomtext

\begin{itemize}[leftmargin=30pt, rightmargin=2cm]
\item \randomtext
   \begin{itemize}
      \item \randomtext
        \begin{itemize}
        \item \randomtext
        \end{itemize}
   \item \randomtext
   \end{itemize}
\item \randomtext
\end{itemize}

\end{document}



 Open this enumitem example in Overleaf.

This example produces the following output:


Creating a new list with enumitem
To create a new list type with enumitem you use the \newlist command which requires 3 arguments:



\newlist{name}{list-type}{max-depth}




name: the name of your list, to be used as an environment:
\begin{name}
...
\end{name}


list-type this has to be one of the standard LaTeX list types:

enumerate
itemize
description

max-depth: the maximum depth to which this list will be nested. NOTE for lists which exceed LaTeX’s default nesting limit of 4, you must also issue the command \setlistdepth{integer} where integer is the maximum nesting depth you intend to use. See the Lists for lawyers example for a demonstration of that.

After you have created the new list you can configure it with the \setlist command.

Using \setlist to configure a custom list created with enumitem
In this example we’ll create a new list called myitems which is based on enumerate. We’ll set max-depth to 3: 



\newlist{myitems}{enumerate}{3}



A minimum requirement is using the \setlist command to define labels for this custom list. One way to do that, for enumerate-based lists, is to use the counter variables created by the enumitem package—those counter variables use the name of your list: myitems in our example.
Here is how we use the corresponding counter variables within our label configuration:

myitemsi for the level 1 entries
myitemsii for the level 2 entries
myitemsiii for the level 3 entries
If we had more than 3 levels, the corresponding counter variables would be called myitemsiv (level 4), myitemsv (level 5) and so forth, continuing the use of lower-case Roman numerals.
In addition to the labels, we’ll also set some values for leftmargin and rightmargin (see the LaTeX parameters diagram).



\documentclass{article}
\usepackage{enumitem}
\begin{document}

\newcommand{\randomtext}{Hello, here is some text without a meaning. Hello, here is some text without a meaning.}

\newcommand{\shortrandomtext}{Hello, here is some text.}
% Create a custom list based on enumerate
% It is called "myitems"
% We'll create a list that is 3 levels deep
\newlist{myitems}{enumerate}{3}

% Configure the behaviour of level 1 entries
% NOTE: we use the list counter "myitemsi"
\setlist[myitems, 1]
{label=\arabic{myitemsi}., %1., 2., 3., ...
leftmargin=\parindent,
rightmargin=10pt
}

% Configure the behaviour of level 2 entries
% NOTE: we use the list counter "myitemsii"
\setlist[myitems, 2]
{label=\arabic{myitemsi}.\arabic{myitemsii}, %1.1, 1.2, 1.3...
leftmargin=15pt,
rightmargin=15pt}

% Configure the behaviour of level 3 entries
% NOTE: we use the list counter "myitemsiii"
\setlist[myitems, 3]
% Use a label of 1.1:<kern>(a), 1.1:<kern>(b) etc  
{label=\arabic{myitemsi}.\arabic{myitemsii}:\kern1.5pt(\alph{myitemsiii}),
leftmargin=30pt,
rightmargin=30pt}

\randomtext
\begin{myitems}
\item \randomtext
    \begin{myitems}
    \item \randomtext
        \begin{myitems}
        \item \randomtext
        \item \randomtext
        \end{myitems}
    \item \shortrandomtext
    \item \shortrandomtext
    \end{myitems}
\item \randomtext
\end{myitems}
\end{document}



 Open this enumitem example in Overleaf.

This example produces the following output:


Lists for lawyers: nesting lists to an arbitrary depth
The enumitem package lets you create lists which can be nested to an arbitrary depth, removing LaTeX’s limit of 4. Anyone preparing contracts with complex (deeply nested) clause structures might benefit from this, although the nested code does look a little intimidating...



\documentclass{article}
\usepackage{enumitem}

\begin{document}

\newlist{contract}{enumerate}{10}
\setlist[contract]{label*=\arabic*.}
\setlistdepth{10} 

\section*{Custom list nested to 10 levels deep!}

\begin{contract}
\item Level 1
 \begin{contract}
 \item Level 2
   \begin{contract}
   \item Level 3
     \begin{contract}
     \item Level 4
       \begin{contract}
       \item Level 5
        \begin{contract}
        \item Level 6
         \begin{contract}
         \item Level 7
          \begin{contract}
          \item Level 8
           \begin{contract}
           \item Level 9
            \begin{contract}
            \item Level 10
          \end{contract}
         \end{contract}
        \end{contract}
       \end{contract}
      \end{contract}
     \end{contract}
    \end{contract}
   \end{contract}
  \end{contract}
 \end{contract}
\end{document}



 Open this enumitem example in Overleaf.

This example produces the following output:


Custom bullets using the enumitem package and MetaPost
The following examples only work with LuaLaTeX and are designed to give a suggestion of some possibilities—of course, substitute MetaPost with your preferred drawing application/tool! 
These examples use the luamplib package and also demonstrate expandable commands, such as \the and \directlua,  can be used within the MetaPost code.

Example 1: auto-sizing bullet points
This example produces bullet points that reduce in size as the list depth increases. Click on the “Open in Overleaf” link to run the example and view the full code.



% Declare a new itemize-based list via enumitem
\newlist{myEnumerate}{itemize}{6}

% The nosep option removes all vertical spacing
% the label=\protect\mpbullet causes all bullets to be 
% drawn by a macro that uses MetaPost code. \protect
% is required as noted in the enumitem manual 

\setlist[myEnumerate]{nosep,label=\protect\mpbullet}
\setlistdepth{6}

\begin{myEnumerate}
\item Level 1
  \begin{myEnumerate}
   \item Level 2
    \begin{myEnumerate}
     \item Level 3
      \begin{myEnumerate}
       \item Level 4
        \begin{myEnumerate}
         \item Level 5
          \begin{myEnumerate}
           \item Level 6
           \end{myEnumerate}
        \end{myEnumerate}
       \end{myEnumerate}
    \end{myEnumerate}
   \end{myEnumerate}
\end{myEnumerate}



 To see the full code, open this LuaLaTeX example in Overleaf.

This example produces the following output:


Example 2: funky custom bullets
This example was inspired by an example on tex.stackexchange which Overleaf has modified to create custom bullets using MetaPost code. Click on the “Open in Overleaf” link to run the example and view the full code.



\newlist{todolist}{itemize}{2}

\begin{itemize}
  \item Start thinking about what we hope to achieve
  \begin{todolist}
  \item[\mpdot] Identify objectives
  \item[\mpyingyang] Balance environmental impact 
  \item[\mpsquare{0}{5}{0}] Implement plans
    \begin{todolist}
    \item[\mpsquare{-0.5}{4}{0}] Stage 1 plans
    \item[\mpsquare{-0.5}{4}{-20}] Stage 2 plans
    \item[\mpsquare{-0.5}{4}{-40}] Stage 3 plans
    \item[\mpsquare{-0.5}{4}{-60}] Stage 4 plans
    \end{todolist}
  \end{todolist}
\end{itemize}



 To see the full code, open this LuaLaTeX example in Overleaf.

This example produces the following output:


Other features of the enumitem package
As noted, the enumitem package is extremely versatile and provides numerous features for using and customizing lists. For example, features we have not covered include:

referencing list entries: for example, see this tex.stackexchane question and example
controlling enumerate list numbering:
set the starting number of the first item
continue numbering of different enumerate lists
And many more! Browse tex.stackexchange to find many great examples of what you can do via enumitem—and, of course, read the package documentation.

Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Mathematical expressions - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsMathematical expressionsContents

1 Introduction
2 Mathematical modes

2.1 Inline math mode
2.2 Display math mode


3 Another example
4 Reference guide
5 Further reading


Introduction
LaTeX's features for typesetting mathematics make it a compelling choice for writing technical documents. This article shows the most basic commands needed to get started with writing maths using LaTeX.
Writing basic equations in LaTeX is straightforward, for example:



\documentclass{article}
\begin{document}

The well known Pythagorean theorem \(x^2 + y^2 = z^2\) was 
proved to be invalid for other exponents. 
Meaning the next equation has no integer solutions:

\[ x^n + y^n = z^n \]

\end{document}



 Open this example in Overleaf



As you see, the way the equations are displayed depends on the delimiter, in this case \[...\] and \(...\).

Mathematical modes
LaTeX allows two writing modes for mathematical expressions: the inline math mode and display math mode:

inline math mode is used to write formulas that are part of a paragraph
display math mode is used to write expressions that are not part of a paragraph, and are therefore put on separate lines
Inline math mode
You can use any of these "delimiters" to typeset your math in inline mode:

\(...\)
$...$
\begin{math}...\end{math}
They all work and the choice is a matter of taste, so let's see some examples.



\documentclass{article}
\begin{document}

\noindent Standard \LaTeX{} practice is to write inline math by enclosing it between \verb|\(...\)|:

\begin{quote}
In physics, the mass-energy equivalence is stated 
by the equation \(E=mc^2\), discovered in 1905 by Albert Einstein.
\end{quote}

\noindent Instead if writing (enclosing) inline math between \verb|\(...\)| you can use \texttt{\$...\$} to achieve the same result:

\begin{quote}
In physics, the mass-energy equivalence is stated 
by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.
\end{quote}

\noindent Or, you can use \verb|\begin{math}...\end{math}|:

\begin{quote}
In physics, the mass-energy equivalence is stated 
by the equation \begin{math}E=mc^2\end{math}, discovered in 1905 by Albert Einstein.
\end{quote}
\end{document}



 Open this example in Overleaf




Display math mode
Use one of these constructions to typeset maths in display mode:

\[...\]
\begin{displaymath}...\end{displaymath}
\begin{equation}...\end{equation}
Display math mode has two versions which produce numbered or unnumbered equations. Let's look at a basic example:



\documentclass{article}
\begin{document}
The mass-energy equivalence is described by the famous equation

\[E=mc^2\]

discovered in 1905 by Albert Einstein. 
In natural units ($c$ = 1), the formula expresses the identity

\begin{equation}
E=m
\end{equation}
\end{document}



 Open this example in Overleaf




Another example
The following example uses the equation* environment which is provided by the amsmath package—see the  amsmath article for more information.



\documentclass{article}
\usepackage{amsmath} % for the equation* environment
\begin{document}

This is a simple math expression \(\sqrt{x^2+1}\) inside text. 
And this is also the same: 
\begin{math}
\sqrt{x^2+1}
\end{math}
but by using another command.

This is a simple math expression without numbering
\[\sqrt{x^2+1}\] 
separated from text.

This is also the same:
\begin{displaymath}
\sqrt{x^2+1}
\end{displaymath}

\ldots and this:
\begin{equation*}
\sqrt{x^2+1}
\end{equation*}

\end{document}



 Open this example in Overleaf



Reference guide
Below is a table with some common maths symbols. For a more complete list see the   List of Greek letters and math symbols:



description
code
examples


Greek letters
\alpha \beta \gamma \rho \sigma \delta \epsilon
$$ \alpha \ \beta \ \gamma \ \rho \ \sigma \ \delta \ \epsilon $$


Binary operators
\times \otimes \oplus \cup \cap




×


{\displaystyle \times }

 



⊗


{\displaystyle \otimes }

 



⊕


{\displaystyle \oplus }

 



∪


{\displaystyle \cup }

 



∩


{\displaystyle \cap }




Relation operators
< > \subset \supset \subseteq \supseteq




<
 
>⊂
 
⊃
 
⊆
 
⊇


{\displaystyle <\ >\subset \ \supset \ \subseteq \ \supseteq }




Others
\int \oint \sum \prod




∫
 
∮
 
∑
 
∏


{\displaystyle \int \ \oint \ \sum \ \prod }



Different classes of mathematical symbols are characterized by different formatting (for example, variables are italicized, but operators are not) and different spacing.

Further reading
The mathematics mode in LaTeX is very flexible and powerful, there is much more that can be done with it:

Subscripts and superscripts
Brackets and Parentheses
Fractions and Binomials
Aligning Equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Bibliography management in LaTeX - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBibliography management in LaTeXContents

1 Introduction
2 Basic usage
3 The bibliography file
4 Customizing the bibliography
5 Adding the bibliography in the table of contents
6 Reference guide
7 Further reading


Introduction
When it comes to bibliography-management packages, there are three main options in LaTeX: bibtex, natbib and biblatex. 
This article explains how to use the biblatex package, to manage and format the bibliography in a LaTeX document. biblatex is a modern option for processing bibliography information, provides an easier and more flexible interface and a better language localization than the other two options. 
A minimal working example of the biblatex package is shown below:




\documentclass[letterpaper,10pt]{article}
\usepackage{biblatex} %Imports biblatex package
\addbibresource{sample.bib} %Import the bibliography file

\begin{document}
Let's cite! Einstein's journal paper \cite{einstein} and Dirac's
book \cite{dirac} are physics-related items. 

\printbibliography %Prints bibliography

\end{document}








There are four bibliography-related commands in this example:

\usepackage{biblatex}
Imports the package biblatex.
\addbibresource{sample.bib}
Imports the bibliography data file sample.bib: this file contains information about each referenced book, article, etc. See the bibliography file section for more information.
\cite{einstein}
This command inserts a reference within the document, [1] in this case, that corresponds to an element in the bibliography, einstein is a keyword  corresponding to an entry in sample.bib.
\printbibliography
Prints the list of cited references, the default title is References for the article document class and "Bibliography" for books and reports.
Overleaf provides several templates with pre-defined styles to manage bibliographies. See this link.
 Open an example of the biblatex package in Overleaf


Basic usage
Several parameters can be passed to the package import command, as in the following example:




\documentclass{article}

\usepackage[
backend=biber,
style=alphabetic,
sorting=ynt
]{biblatex}
\addbibresource{sample.bib}

\title{Bibliography management: \texttt{biblatex} package}
\author{Overleaf}
\date{ }

\begin{document}

\maketitle

Using \texttt{biblatex} you can display a bibliography divided 
into sections, depending on citation type. Let's cite! Einstein's 
journal paper \cite{einstein} and Dirac's book \cite{dirac} are 
physics-related items. Next, \textit{The \LaTeX\ Companion} book
 \cite{latexcompanion}, Donald Knuth's website \cite{knuthwebsite},
\textit{The Comprehensive Tex Archive Network} (CTAN) 
\cite{ctan} are \LaTeX-related items; but the others, Donald Knuth's items, 
\cite{knuth-fa,knuth-acp} are dedicated to programming. 

\medskip

\printbibliography

\end{document}








Some extra options, inside brackets and comma-separated, are added when importing biblatex:

backend=biber
Sets the backend to sort the bibliography, biber is the default one and recommended since it provides full localization for several commands and the styles for biber are easier to modify because they use standard LaTeX macros. The other supported backend is bibtex, which is a more traditional program; if set as the backend, bibtex will only be used to sort the bibliography, so no bibtex styles can be used here.
style=alphabetic
Defines the bibliography style and the citation style, in this case alphabetic. Depending on the style, more citation commands might be available. See biblatex bibliography styles and citation styles for more information.
sorting=ynt
Determines the criteria to sort the bibliographic sources. In this case they are sorted by year, name and title. See the reference guide for a list of sorting options.
The rest of the commands were explained in the introduction.
 Open a more complete biblatex example in Overleaf


The bibliography file
The bibliography files must have the standard bibtex syntax




@article{einstein,
    author = "Albert Einstein",
    title = "{Zur Elektrodynamik bewegter K{\"o}rper}. ({German})
    [{On} the electrodynamics of moving bodies]",
    journal = "Annalen der Physik",
    volume = "322",
    number = "10",
    pages = "891--921",
    year = "1905",
    DOI = "http://dx.doi.org/10.1002/andp.19053221004",
    keywords = "physics"
}

@book{dirac,
    title = {The Principles of Quantum Mechanics},
    author = {Paul Adrien Maurice Dirac},
    isbn = {9780198520115},
    series = {International series of monographs on physics},
    year = {1981},
    publisher = {Clarendon Press},
    keywords = {physics}
}

@online{knuthwebsite,
    author = "Donald Knuth",
    title = "Knuth: Computers and Typesetting",
    url  = "http://www-cs-faculty.stanford.edu/~uno/abcde.html",
    addendum = "(accessed: 01.09.2016)",
    keywords = "latex,knuth"
}

@inbook{knuth-fa,
    author = "Donald E. Knuth",
    title = "Fundamental Algorithms",
    publisher = "Addison-Wesley",
    year = "1973",
    chapter = "1.2",
    keywords  = "knuth,programming"
}
...




This file contains records in a special format; for instance, the first bibliographic reference is defined by:

@article{...}
This is the first line of a record entry, @article tells BibTeX that the information stored here is about an article. The information about this entry is enclosed within braces.  Besides the entry types shown in the example (article, book, online and inbook) there are a lot more, see the reference guide.
einstein
The label einstein is assigned to this entry, is a unique identifier that can be used to refer this article within the document.
author = "Albert Einstein",
This is the first field in the bibliography entry, indicates that the author of this article is Albert Einstein. Several comma-separated fields can be added using the same syntax key = value, for instance: title, pages, year, URL, etc. See the reference guide for a list of possible fields.
The information in this file can later be printed and referenced within a LaTeX document, as shown in the previous sections, with the command \addbibresource{sample.bib}. Not all the information in the .bib file will be displayed, it depends on the bibliography style set in the document.
 Open a more complete biblatex example in Overleaf


Customizing the bibliography
Biblatex allows high customization of the bibliography section with little effort. It was mentioned that several citation styles and bibliography styles are available, and you can also create new ones. Another customization option is to change the default title of the bibliography section.




\documentclass{article}

\usepackage[
backend=biber,
style=alphabetic,
sorting=ynt
]{biblatex}
\addbibresource{sample.bib}

\title{Bibliography management: \texttt{biblatex} package}
\author{Overleaf}
\date{May 2021}

\begin{document}

\maketitle

Using \texttt{biblatex} you can display a bibliography divided into sections, 
depending on citation type. Let's cite! Einstein's journal paper \cite{einstein} 
and Dirac's book \cite{dirac} are physics-related items. Next, \textit{The \LaTeX\ Companion} 
book \cite{latexcompanion}, Donald Knuth's website \cite{knuthwebsite}, 
\textit{The Comprehensive Tex Archive Network} (CTAN) \cite{ctan} are 
\LaTeX-related items; but the others, Donald Knuth's items, 
\cite{knuth-fa,knuth-acp} are dedicated to programming. 

\medskip

\printbibliography[title={Whole bibliography}]








The additional parameter title={Whole bibliography} passed inside brackets to the command \printbibliography is the one that changes the title.
The bibliography can also be subdivided into sections based on different filters, for instance: print only references from the same author, the same journal or similar title. Below an example.




\printbibliography[type=article,title={Articles only}]
\printbibliography[type=book,title={Books only}]

\printbibliography[keyword={physics},title={Physics-related only}]
\printbibliography[keyword={latex},title={\LaTeX-related only}]








Here, the bibliography is divided in 4 sections. The syntax of the commands used here is explained below:

\printbibliography[type=article,title={Articles only}]
Only prints entries whose type is "article", and sets the title "Articles only" for this section. The same syntax works for any other entry type.
\printbibliography[keyword={physics},title={Physics-related only}]
Filters bibliography entries that include the word "physics" in any of the fields. Sets the title "Physics-related only" for said section.
 Open a more complete biblatex example in Overleaf


Adding the bibliography in the table of contents
For the bibliography the be printed in the table of contents an extra option must be passed to \printbibliography




\printbibliography[
heading=bibintoc,
title={Whole bibliography}
]

\printbibliography[heading=subbibintoc,type=article,title={Articles only}]








A section and a subsection are added to the table of contents:

In the first case, adding heading=bibintoc adds the title to the table of contents as an unnumbered chapter if possible or as an unnumbered section otherwise.
The second case is heading=subbibintoc that adds the title as a second level entry in the table of contents, in this example as a subsection nested in "Whole bibliography".
 Open a more complete biblatex example in Overleaf


Reference guide
Supported entry types



article
book
mvbook


inbook
bookinbook
suppbook


booklet
collection
mvcollection


incollection
suppcollection
manual


misc
online
patent


periodical
suppperiodical
proceedings


mvproceedings
inproceedings
reference


mvreference
inreference
report


set
thesis
unpublished


custom
conference
electronic


masterthesis
phdthesis
techreport


Supported entry fields (The printed information depends on the bibliography style)



abstract
addendum
afterword
annotate


author
authortype
bookauthor
bookpagination


booksubtitle
booktitle
chapter
commentator


date
doi
edition
editor


editortype
eid
entrysubtype
eprint


eprinttype
eprintclass
eventdate
eventtitle


file
foreword
holder
howpublished


indextitle
institution
introduction
isan


isbn
ismn
isrn
issue


issuesubtitle
issuetitle
iswc
journalsubtitle


journaltitle
label
language
library


location
mainsubtitle
maintitle
month


note
number
organization
origdate


origlanguage
origlocation
origpublisher
origtitle


pages
pagetotal
pagination
part


publisher
pubstate
reprinttitle
series


shortauthor
shortedition
shorthand
shorthandintro


shortjournal
shortseries
shorttitle
subtitle


title
translator
type
url


venue
version
volume
year

Bibliography sorting options



option
description


nty
sort by name, title, year


nyt
sort by name, year, title


nyvt
sort by name, year, volume, title


anyt
sort by alphabetic label, name, year, title


anyvt
sort by alphabetic label, name, year, volume, title


ydnt
sort by year (descending), name, title


none
entries are processed in citation order

For detailed information on these entries and options, see the package documentation.

Further reading
For more information see

Biblatex bibliography styles
Biblatex citation styles
Bibliography management with natbib
Bibliography management with bibtex
Creating and Managing Bibliographies with BibTeX on Overleaf
Biblatex package documentation
International language support
Table of contents
Management in a large project
Multi-file LaTeX projects
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Inserting Images - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsInserting ImagesImages are essential elements in most of the scientific documents. LaTeX provides several options to handle images and make them look exactly what you need. In this article we explain how to include images in the most common formats, how to shrink, enlarge and rotate them, and how to reference them within your document.

Contents

1 Introduction
2 The folder path to images
3 Changing the image size and rotating the picture
4 Positioning

4.1 Wrapping text around figures


5 Captioning, labelling and referencing

5.1 Captions
5.2 Labels and cross-references


6 Generating high-res and low-res images
7 Reference guide
8 Further reading


Introduction
Below is an example on how to import a picture.




\documentclass{article}
\usepackage{graphicx}
\graphicspath{ {./images/} }

\begin{document}
The universe is immense and it seems to be homogeneous, 
in a large scale, everywhere we look at.

\includegraphics{universe}

There's a picture of a galaxy above
\end{document}








Latex can not manage images by itself, so we need to use the graphicx package. To use it, we include the following line in the preamble: \usepackage{graphicx}.
The command \graphicspath{ {./images/} } tells LaTeX that the images are kept in a folder named images under the directory of the main document. 
The \includegraphics{universe} command is the one that actually included the image in the document. Here universe is the name of the file containing the image without the extension, then universe.PNG becomes universe. The file name of the image should not contain white spaces nor multiple dots. 
Note: The file extension is allowed to be included, but it's a good idea to omit it. If the file extension is omitted it will prompt LaTeX to search for all the supported formats. For more details see the section about generating high resolution and low resolution images.
 Open an images example in Overleaf


The folder path to images
When working on a document which includes several images it's possible to keep those images in one or more separated folders so that your project is more organised.
The command \graphicspath{ {images/} } tells LaTeX to look in the images folder. The path is relative to the current working directory—so, the compiler will look for the file in the same folder as the code where the image is included. The path to the folder is relative by default, if there is no initial directory specified, for instance 




%Path relative to the .tex file containing the \includegraphics command
\graphicspath{ {images/} }




This is a typically straightforward way to reach the graphics folder within a file tree, but can leads to complications when .tex files within folders are included in the main .tex file. Then, the compiler may end up looking for the images folder in the wrong place. Thus, it is best practice to specify the graphics path to be relative to the main .tex file, denoting the main .tex file directory as   ./ , for instance: 




%Path relative to the main .tex file 
\graphicspath{ {./images/} }




as in the introduction.
The path can also be absolute, if the exact location of the file on your system is specified. For example, if you were working on a local LaTeX installation on your own computer: 




%Path in Windows format:
\graphicspath{ {c:/user/images/} }

%Path in Unix-like (Linux, Mac OS) format
\graphicspath{ {/home/user/images/} }




Notice that this command requires a trailing slash  /  and that the path is in between double braces.
You can also set multiple paths if the images are saved in more than one folder. For instance, if there are two folders named images1 and images2, use the command




\graphicspath{ {./images1/}{./images2/} }




 Open an images example in Overleaf


Changing the image size and rotating the picture
If we want to further specify how LaTeX should include our image in the document (length, height, etc), we can pass those settings in the following format:




\begin{document}

Overleaf is a great professional tool to edit online documents, 
share and backup your \LaTeX{} projects. Also offers a 
rather large help documentation.

\includegraphics[scale=1.5]{overleaf-logo}








The command \includegraphics[scale=1.5]{overleaf-logo} will include the image overleaf-logo in the document, the extra parameter scale=1.5 will do exactly that, scale the image 1.5 of its real size.
You can also scale the image to a some specific width and height.




\begin{document}

Overleaf is a great professional tool to edit online documents, 
share and backup your \LaTeX{} projects. Also offers a 
rather large help documentation.

\includegraphics[width=5cm, height=4cm]{overleaf-logo}








As you probably have guessed, the parameters inside the brackets [width=3cm, height=4cm] define the width and the height of the picture. You can use different units for these parameters. If only the width parameter is passed, the height will be scaled to keep the aspect ratio.
The length units can also be relative to some elements in document. If you want, for instance, make a picture the same width as the text:




\begin{document}

The universe is immense and it seems to be homogeneous, 
in a large scale, everywhere we look at.

\includegraphics[width=\textwidth]{universe}








Instead of \textwidth you can use any other default LaTeX length: \columnsep, \linewidth, \textheight, \paperheight, etc. See the  reference guide for a further description of these units.
There is another common option when including a picture within your document, to rotate it. This can easily accomplished in LaTeX:




\begin{document}

Overleaf is a great professional tool to edit online, 
share and backup your \LaTeX{} projects. Also offers a 
rather large base of help documentation.

\includegraphics[scale=1.2, angle=45]{overleaf-logo}








The parameter angle=45 rotates the picture 45 degrees counter-clockwise. To rotate the picture clockwise use a negative number.

Positioning
In the previous section was explained how to include images in your document, but the combination of text and images may not look as we expected. To change this we need to introduce a new environment.




In the next example the figure will be positioned 
right below this sentence.

\begin{figure}[h]
\includegraphics[width=8cm]{Plot}
\end{figure}








The figure environment is used to  display pictures as floating elements within the document. This means you include the picture inside the figure environment and you don't have to worry about it's placement, LaTeX will position it in a such way that it fits the flow of the document.
Anyway, sometimes we need to have more control on the way the figures are displayed. An additional parameter can be passed to determine the figure positioning. In the example, begin{figure}[h], the parameter inside the brackets set the position of the figure to here. Below a table to list the possible positioning values.



Parameter

Position


h

Place the float here, i.e., approximately at the same point it occurs in the source text (however, not exactly at the spot)


t

Position at the top of the page.


b

Position at the bottom of the page.


p

Put on a special page for floats only.


!

Override internal parameters LaTeX uses for determining "good" float positions.


H

Places the float at precisely the location in the LaTeX code. Requires the float package, though may cause problems occasionally. This is somewhat equivalent to h!.

In the next example you can see a picture at the top of the document, despite being declared below the text.




In this picture you can see a bar graph that shows
the results of a survey which involved some important
data studied as time passed.

\begin{figure}[t]
\includegraphics[width=8cm]{Plot}
\centering
\end{figure}








The additional command \centering will centre the picture. The default alignment is left.

Wrapping text around figures
It's also possible to wrap the text around a figure. When the document contains small pictures this makes it look better.




\begin{wrapfigure}{r}{0.25\textwidth} %this figure will be at the right
    \centering
    \includegraphics[width=0.25\textwidth]{mesh}
\end{wrapfigure}

There are several ways to plot a function of two variables, 
depending on the information you are interested in. For 
instance, if you want to see the mesh of a function so it 
easier to see the derivative you can use a plot like the 
one on the left.


\begin{wrapfigure}{l}{0.25\textwidth}
    \centering
    \includegraphics[width=0.25\textwidth]{contour}
\end{wrapfigure}

On the other side, if you are only interested on
certain values you can use the contour plot, you 
can use the contour plot, you can use the contour 
plot, you can use the contour plot, you can use 
the contour plot, you can use the contour plot, 
you can use the contour plot, like the one on the left.

On the other side, if you are only interested on 
certain values you can use the contour plot, you 
can use the contour plot, you can use the contour 
plot, you can use the contour plot, you can use the 
contour plot, you can use the contour plot, 
you can use the contour plot, 
like the one on the left.








For the commands in the example to work, you have to import the wrapfig package. To use wrapfig, include the following line in the document preamble: 

\usepackage{wrapfig}

This makes the wrapfigure environment available and we can place an \includegraphics command inside it to create a figure around which text will be wrapped. Here is how we can specify a wrapfigure environment:

\begin{wrapfigure}[lineheight]{position}{width}
  ...
\end{wrapfigure}

The position parameter has eight possible values:



r

R

right side of the text


l

L

left side of the text


i

I

inside edge–near the binding (in a twoside document)


o

O

outside edge–far from the binding

The uppercase version allows the figure to float. The lowercase version means exactly here.
Now you can define the wrapfigure environment by means of the commands \begin{wrapfigure}{l}{0.25\textwidth} \end{wrapfigure}. Notice that the environment has two additional parameters enclosed in braces. Below the code is explained with more detail:

{l}
This defines the alignment of the figure. Set l for left and r for right. Furthermore, if you are using a book or any similar format, use instead o for the outer edge and i for the inner edge of the page.
{0.25\textwidth}
This is the width of figure box. It's not the width of the image itself, that must be set in the \includegraphics command. Notice that the length is relative to the text width, but normal units can also be used (cm, in, mm, etc). See the reference guide for a list of units.
\centering
This was already explained, but in this example the image will be centred by using its container as reference, instead of the whole text.
For a more complete article about image positioning see Positioning images and tables
 Open an images example in Overleaf


Captioning, labelling and referencing
Captioning images to add a brief description and labelling them for further reference are two important tools when working on a lengthy text. 

Captions
Let's start with a caption example:




\begin{figure}[h]
\caption{Example of a parametric plot ($\sin (x), \cos(x), x$)}
\centering
\includegraphics[width=0.5\textwidth]{spiral}
\end{figure}








It's really easy, just add the \caption{Some caption} and inside the braces write the text to be shown. The placement of the caption depends on where you place the command; if it's above the \includegraphics then the caption will be on top of it, if it's below then the caption will also be set below the figure.
Captions can also be placed right after the figures. The sidecap package uses similar code to the one in the previous example to accomplish this.




\documentclass{article}
\usepackage[rightcaption]{sidecap}

\usepackage{graphicx} %package to manage images
\graphicspath{ {images/} }

\begin{SCfigure}[0.5][h]
\caption{Using again the picture of the universe.
This caption will be on the right}
\includegraphics[width=0.6\textwidth]{universe}
\end{SCfigure}








There are two new commands

\usepackage[rightcaption]{sidecap}
As you may expect this line will import a package named sidecap, but there is an additional parameter: rightcaption. This parameter establishes the placement of the caption at the right of the picture, you can also use leftcaption. In book-like documents outercaption and innercaption are also available. The names of these are self-descriptive.
\begin{SCfigure}[0.5][h] \end{SCfigure}
Defines an environment similar to figure. The first parameter is the width of the caption relative to the size of the image, as declared in \includegraphics. The second parameter h works exactly as in the figure environment. See the placement section for more information.
You can do a more advanced management of the caption formatting. Check the further reading section for references.

Labels and cross-references
Figures, just as many other elements in a LaTeX document (equations, tables, plots, etc) can be referenced within the text. This is very easy, just add a \label to the figure or SCfigure environment, then later use that label to refer the picture.




\begin{figure}[h]
    \centering
    \includegraphics[width=0.25\textwidth]{mesh}
    \caption{a nice plot}
    \label{fig:mesh1}
\end{figure}

As you can see in the figure \ref{fig:mesh1}, the 
function grows near 0. Also, in the page \pageref{fig:mesh1} 
is the same example.








There are three commands that generate cross-references in this example.

\label{fig:mesh1}
This will set a label for this figure. Since labels can be used in several types of elements within the document, it's a good practice to use a prefix, such as fig: in the example.
\ref{fig:mesh1}
This command will insert the number assigned to the figure. It's automatically generated and will be updated if insert some other figure before the referenced one.
\pageref{fig:mesh1}
This prints out the page number where the referenced image appears.
The \caption is mandatory to reference a figure.
Another great characteristic in a LaTeX document is the ability to automatically generate a list of figures. This is straightforward.




\listoffigures








This command only works on captioned figures, since it uses the caption in the table. The example above lists the images in this article.
Important Note: When using cross-references your LaTeX project must be compiled twice, otherwise the references, the page references and the table of figures won't work—Overleaf takes care of that for you.

Generating high-res and low-res images
So far while specifying the image file name in the \includegraphics command we have omitted file extensions. However, that is not necessary, though it is often useful. If the file extension is omitted, LaTeX will search for any supported image format in that directory, and will search for various extensions in the default order (which can be modified).
This is useful in switching between development and production environments. In a development environment (when the article/report/book is still in progress), it is desirable to use low-resolution versions of images (typically in .png format) for fast compilation of the preview. In the production environment (when the final version of the article/report/book is produced), it is desirable to include the high-resolution version of the images.
This is accomplished by

Not specifying the file extension in the \includegraphics command, and
Specifying the desired extension in the preamble.
Thus, if we have two versions of an image, venndiagram.pdf (high-resolution) and venndiagram.png (low-resolution), then we can include the following line in the preamble to use the .png version while developing the report - 




  \DeclareGraphicsExtensions{.png,.pdf}




The command above will ensure that if two files are encountered with the same base name but different extensions (for example venndiagram.pdf and venndiagram.png), then the .png version will be used first, and in its absence the .pdf version will be used, this is also a good ideas if some low-resolution versions are not available.
Once the report has been developed, to use the high-resolution .pdf version, we can change the line in the preamble specifying the extension search order to




  \DeclareGraphicsExtensions{.pdf,.png}




Improving on the technique described in the previous paragraphs, we can also instruct LaTeX to generate low-resolution .png versions of images on the fly while compiling the document if there is a PDF that has not been converted to PNG yet. To achieve that, we can include the following in the preamble after \usepackage{graphicx}




  \usepackage{epstopdf}
  \epstopdfDeclareGraphicsRule{.pdf}{png}{.png}{convert #1 \OutputFile}
  \DeclareGraphicsExtensions{.png,.pdf}




If venndiagram2.pdf exists but not venndiagram2.png, the file venndiagram2-pdf-converted-to.png will be created and loaded in its place. The command convert #1 is responsible for the conversion and additional parameters may be passed between convert and #1. For example - convert -density 100 #1.
There are some important things to have in mind though:

For the automatic conversion to work, we need to call pdflatex with the --shell-escape option.
For the final production version, we must comment out the \epstopdfDeclareGraphicsRule, so that only high-resolution PDF files are loaded. We'll also need to change the order of precedence.
 Open an images example in Overleaf


Reference guide
LaTeX units and legths



Abbreviation

Definition


pt

A point, is the default length unit. About 0.3515mm


mm

a millimetre


cm

a centimetre


in

an inch


ex

the height of an x in the current font


em

the width of an m in the current font


\columnsep

distance between columns


\columnwidth

width of the column


\linewidth

width of the line in the current environment


\paperwidth

width of the page


\paperheight

height of the page


\textwidth

width of the text


\textheight

height of the text


\unitlength

units of length in the picture environment.


About image types in LaTeX

latex
When compiling with latex, we can only use EPS images, which is a vector format.
pdflatex
If we are compiling using "pdflatex" to produce a PDF, then we can use a number of image formats -
   JPG: Best choice if we want to insert photos
   PNG: Best choice if we want to insert diagrams (if a vector version could not be generated) and screenshots
   PDF: Even though we are used to seeing PDF documents, a PDF can also store images 
   EPS: EPS images can be included using the epstopdf package (we just need to install the package, we 
        don't need to use \usepackage{} to include it in our document.)

Vector format or bitmap format?
Images can be of either vector format of bitmap format. Generally we don't need to worry about it, but if we do happen to know the format the image is in, we can use that information to choose an appropriate image format to include in our LaTeX document. If we have an image in vector format, we should go for PDF or EPS. If we have it in bitmap format, we should go for JPG or PNG, as storing bitmap pictures in PDF or EPS takes a lot of disk space.
 Open an images example in Overleaf


Further reading
For more information see

Positioning images and tables
Lists of tables and figures
Single sided and double sided documents
Lengths in LaTeX
floatrow package for advanced caption managing of floating elements (tables and figures)
sidecap package documentation, for side-figure captions
epstopdf package documentation (EPS to PDF conversion)
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Tables - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsTablesThere are three ways you can insert tables in Overleaf:

Using the Insert table button in the editor toolbar.
Copying and pasting a table from another document while using Visual Editor.
Writing the LaTeX code for the table in Code Editor.
If you’re new to LaTeX, using the toolbar in Visual Editor (option 1) is a great way to get started. And you can switch between Visual Editor and Code Editor to see the code behind the table. This page focuses on option 3.

Contents

1 Creating a simple table in LaTeX
2 Tables with a fixed width
3 Combining rows and columns
4 Multi-page tables
5 Positioning tables
6 Captions, labels and references
7 List of tables
8 Changing the appearance of a table

8.1 Line width and cell padding
8.2 Colour alternating rows
8.3 Colouring a table (cells, rows, columns and lines)


9 Reference guide
10 Further reading


Creating a simple table in LaTeX
We can start with one of the simplest examples of a table:



\begin{center}
\begin{tabular}{ c c c }
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\  
 cell7 & cell8 & cell9    
\end{tabular}
\end{center}



 Open this example in Overleaf.


The tabular environment is the default LaTeX method to create tables. You must specify a parameter to this environment; here we use {c c c} which tells LaTeX there are three columns and the text inside each one of them must be centred. 
The tabular environment provides additional flexibility; for example, you can put separator lines in between each column:



\begin{center}
\begin{tabular}{ |c|c|c| } 
 \hline
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\ 
 cell7 & cell8 & cell9 \\ 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.


Here is a description of the constructions used in the example above:

{ |c|c|c| }
This declares that three columns, separated by a vertical line, are going to be used in the table. Each c means that the contents of the column will be centred. You can also use r to align the text to the right and l for left alignment.
\hline
This will insert  a horizontal line on top of the table and at the bottom too. There is no restriction on the number of times you can use \hline.
cell1 & cell2 & cell3 \\
Each & is a cell separator and the double-backslash \\ sets the end of this row.
Below you can see a second example which uses various vertical and horizontal lines (often called "rules"):



\begin{center}
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 \hline
 2 & 7 & 78 & 5415 \\
 \hline
 3 & 545 & 778 & 7507 \\
 \hline
 4 & 545 & 18744 & 7560 \\
 \hline
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.



Tables with a fixed width
When formatting a table you might require a fixed width, either for each column or for the entire table. The following example adds the array package to document preamble: 

\usepackage{array}

and uses it to set fixed column widths:



\documentclass{article}
\usepackage{array}
\begin{document}
\begin{center}
\begin{tabular}{ | m{5em} | m{1cm}| m{1cm} | } 
  \hline
  cell1 dummy text dummy text dummy text& cell2 & cell3 \\ 
  \hline
  cell1 dummy text dummy text dummy text & cell5 & cell6 \\ 
  \hline
  cell7 & cell8 & cell9 \\ 
  \hline
\end{tabular}
\end{center}
\end{document}



 Open this example in Overleaf.


In the tabular environment, the parameter m{5em} sets a width of 5em for the first column (1cm for the other two) and centres the text in the middle of the cell. The aligning options are m for middle, p for top and b for bottom. When using these parameters the text is automatically formatted to fit inside each cell.
If you don't need to control the width of each cell, but of the entire table and then evenly distribute the space within, use the tabularx package. See the example below:



\documentclass{article}
\usepackage{tabularx}
\begin{document}
\begin{tabularx}{0.8\textwidth} { 
  | >{\raggedright\arraybackslash}X 
  | >{\centering\arraybackslash}X 
  | >{\raggedleft\arraybackslash}X | }
 \hline
 item 11 & item 12 & item 13 \\
 \hline
 item 21  & item 22  & item 23  \\
\hline
\end{tabularx}
\end{document}



 Open this example in Overleaf.


The environment tabularx is similar to tabular but more flexible. To use it, add the line \usepackage{tabularx} to the document preamble. Notice that the environment opening statement is different, in the example the table width is set to 0.8\textwidth, which is 80% of the document's text width. You can use any of the LaTeX units to set that value.
The prefix inside braces | >{\raggedright\arraybackslash}X | >{\centering\arraybackslash}X | >{\raggedleft\arraybackslash}X | sets the alignment of each column: the first one to left, the second one to center and the third one to right.

Combining rows and columns
Rows and columns can be merged to create larger table cells. The following example uses the \multicolumn command to merge several columns:



\documentclass{article}
\usepackage{multirow}
\begin{document}
\begin{tabular}{ |p{3cm}||p{3cm}|p{3cm}|p{3cm}|  }
 \hline
 \multicolumn{4}{|c|}{Country List} \\
 \hline
 Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 Code&ISO numeric Code\\
 \hline
 Afghanistan   & AF    &AFG&   004\\
 Aland Islands&   AX  & ALA   &248\\
 Albania &AL & ALB&  008\\
 Algeria    &DZ & DZA&  012\\
 American Samoa&   AS  & ASM&016\\
 Andorra& AD  & AND   &020\\
 Angola& AO  & AGO&024\\
 \hline
\end{tabular}
\end{document}



 Open this example in Overleaf.


Let's review each component of the command \multicolumn{4}{|c|}{Country List} \\:

{4}
The number of columns to be combined: 4 in this case.
{|c|}
Delimiters and alignment of the resulting cell: in this case the text will be centred and a vertical line will be drawn at each side of the cell.
{Country List}
Text to be displayed inside the cell.
To combine rows you need to add the multirow package to your document preamble:

\usepackage{multirow}

You can then use the \multirow command in your document:



\documentclass{article}
\usepackage{multirow}
\begin{document}
\begin{center}
\begin{tabular}{ |c|c|c|c| } 
\hline
col1 & col2 & col3 \\
\hline
\multirow{3}{4em}{Multiple row} & cell2 & cell3 \\ 
& cell5 & cell6 \\ 
& cell8 & cell9 \\ 
\hline
\end{tabular}
\end{center}
\end{document}



 Open this example in Overleaf.


The multirow command takes three parameters; our example uses the following settings:

the number of rows to be combined: 3
the width of the column: 4em
the content of the cell: Multiple row
Multi-page tables
If you have to insert a very long table, which takes up two or more pages in your document, use the longtable package. First, add the following line to your document preamble:

\usepackage{longtable}

You can then use the longtable environment, as shown in the following example:




\documentclass{article}
\usepackage{longtable}

\begin{document}
 
 \begin{longtable}[c]{| c | c |}
 \caption{Long table caption.\label{long}}\\

 \hline
 \multicolumn{2}{| c |}{Begin of Table}\\
 \hline
 Something & something else\\
 \hline
 \endfirsthead

 \hline
 \multicolumn{2}{|c|}{Continuation of Table \ref{long}}\\
 \hline
 Something & something else\\
 \hline
 \endhead

 \hline
 \endfoot

 \hline
 \multicolumn{2}{| c |}{End of Table}\\
 \hline\hline
 \endlastfoot

 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 ...
 Lots of lines & like this\\
 \end{longtable}








 Open a longtable example in Overleaf

The behaviour of longtable is similar to the default tabular, but generates tables that can be broken by the standard LaTeX page-breaking algorithm. There are four longtable-specific elements:

\endfirsthead
Everything above this command will appear at the beginning of the table, in the first page.
\endhead
Whatever you put before this command and below \endfirsthead will be displayed at the top of the table in every page except the first one.
\endfoot
Similar to \endhead, what you put after \endhead and before this command will appear at the bottom of the table in every page except the last one.
\endlastfoot
Similar to \endfirsthead. The elements after \endfoot and before this command will be displayed at the bottom of the table but only in the last page where the table appears.
Positioning tables
Positioning a table is easy if they're inside a float table environment.



\documentclass{article}
\begin{document}
Below is a table positioned exactly here:
\begin{table}[h!]
\centering
 \begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
 \end{tabular}
\end{table}
\end{document}



 Open this example in Overleaf.


The parameter h! passed to the table environment declaration establishes that this table must be placed here, and override LaTeX defaults. The positioning parameters that can be passed-in include:

h
Will place the table here approximately.
t
Position the table at the top of the page.
b
Position the table at the bottom of the page.
p
Put the table in a special page, for tables only.
!
Override internal LaTeX parameters.
H
Place the table at this precise location, pretty much like h!.
For further examples on table positioning see the Positioning images and tables article.
In this example there are a few more commands:

\centering
Centres the table relative to the float container element.
\[1ex]
This adds extra space to the cell.
Captions, labels and references
Tables can be captioned, labelled and referenced by means of the table environment.



\documentclass{article}
\begin{document}
Table \ref{table:1} is an example of a referenced \LaTeX{} element.

\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{Table to test captions and labels.}
\label{table:1}
\end{table}
\end{document}



 Open this example in Overleaf.


There are three important commands in the example:

\caption{Table to test captions and labels}
As you may expect this command sets the caption for the table. If you create a list of tables this caption will be used there. You can place it above or below the table.
\label{table:1}
If you need to reference the table within your document, set a label with this command. The label will number the table and, when combined with the \ref command, will allow you to reference it.
\ref{table:1}
This code will be substituted by the number corresponding to the referenced table.
List of tables
To create a list of tables use the \listoftables command. The caption of each table will be used to generate this list. For languages supported by the babel package, the title "List of tables" will be translated accordingly. See the article about International language support for more info.



\documentclass{article}
\begin{document}
\listoftables
\vspace{5pt}
The table \ref{table:1} is an example of referenced \LaTeX{} elements.

\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{This is the caption for the first table.}
\label{table:1}
\end{table}

\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
  4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{This is the caption for the second table.}
\label{table:2}
\end{table}
\end{document}



 Open this example in Overleaf.



Changing the appearance of a table
Several table elements can be modified to suit the needs of your document. Below you will learn how to modify the line thickness, the line colour and the background colour of the cells in your table.

Line width and cell padding
The legibility of a table can sometimes be improved by incrementing the column spacing and row stretch.



\documentclass{article}
\setlength{\arrayrulewidth}{0.5mm}
\setlength{\tabcolsep}{18pt}
\renewcommand{\arraystretch}{1.5}
\begin{document}
\begin{tabular}{ |p{3cm}|p{3cm}|p{3cm}|  }
\hline
\multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
Aland Islands & AX   & ALA \\
Albania &AL & ALB \\
Algeria    &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & AND   \\
Angola & AO & AGO \\
\hline
\end{tabular}
\end{document}



 Open this example in Overleaf.


A description of the commands is provided below:

\setlength{\arrayrulewidth}{0.5mm}
This sets the thickness of the borders of the table. In the example is 0.5mm but you can use other units—see the article Lengths in LaTeX for a complete list.
\setlength{\tabcolsep}{18pt}
The space between the text and the left/right border of its containing cell is set to 18pt with this command. Again, you may use other units if needed.
\renewcommand{\arraystretch}{1.5}
The height of each row is set to 1.5 relative to its default height.
Colour alternating rows
You can apply alternating colours to the rows of your table by using the xcolor package with the table option, as demonstrated in the following example:



\documentclass{article}
\usepackage[table]{xcolor}
\setlength{\arrayrulewidth}{0.5mm}
\setlength{\tabcolsep}{18pt}
\renewcommand{\arraystretch}{2.5}
\begin{document}
{\rowcolors{3}{green!80!yellow!50}{green!70!yellow!40}
\begin{tabular}{ |p{3cm}|p{3cm}|p{3cm}|  }
\hline
\multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
Aland Islands & AX   & ALA \\
Albania &AL & ALB \\
Algeria    &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & AND   \\
Angola & AO & AGO \\
\hline
\end{tabular}}
\end{document}



 Open this example in Overleaf.


Notice the braces right before the command 

\rowcolors{3}{green!80!yellow!50}{green!70!yellow!40}

and after the tabular environment. The command \rowcolors takes three parameters each passed inside braces: 

the row to start,
the colour for odd rows and
the colour for even rows.
See the xcolor package documentation (at the further reading section) for a list of available colours and how to create your own. In the example the colours green and yellow are mixed in different proportions.
For the command to work make sure to add

\usepackage[table]{xcolor}

to the preamble of your LaTeX file.

Colouring a table (cells, rows, columns and lines)
All elements in a table can be customized to use a specific colour. Again, this functionality is provided by xcolor so you must add

\usepackage[table]{xcolor}

to the preamble. Below you can see an example.



\documentclass{article}
\usepackage[table]{xcolor}
\setlength{\arrayrulewidth}{1mm}
\setlength{\tabcolsep}{18pt}
\renewcommand{\arraystretch}{2.5}
\newcolumntype{s}{>{\columncolor[HTML]{AAACED}} p{3cm}}
\arrayrulecolor[HTML]{DB5800}
\begin{document}
\begin{tabular}{ |s|p{3cm}|p{3cm}| }
\hline
\rowcolor{lightgray} \multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
\rowcolor{gray}
Aland Islands & AX & ALA \\
Albania   &AL & ALB \\
Algeria  &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & \cellcolor[HTML]{AA0044} AND    \\
Angola & AO & AGO \\
\hline
\end{tabular}
\end{document}



 Open this example in Overleaf.


Below is a description about how to change the colour of each element in the table:

Colour of the lines. The command \arrayrulecolor is used for this. In the example an HTML format is used, but other formats are available too, see the xcolor documentation for a complete list (link provided at the further reading section).
Background colour of a cell. Use the command \cellcolor. You can either enter the name directly inside the braces (red, gray, green and so on) or pass a format parameter inside brackets (HTML in the example) and then set the desired colour inside the braces using the established format.
Background colour of a row. In this case \rowcolor will accomplish that. The same observations about colour selection mentioned in the two previous commands are valid for this one.
Background colour of a column. This one is a bit tricky, but the easiest way is to define a new column type. The command \newcolumntype{s}{>{\columncolor[HTML]{AAACED}} p{3cm}}
 define a column type called s whose alignment is p, the column width is 3cm and the colour is set with HTML format to AAACED. This new column type is used in the tabular environment.
Reference guide
A brief description of parameters in the tabular environment.
Tables can be created using tabular environment.

\begin{tabular}[pos]{cols}
 table content
\end{tabular}

where options can be:

pos : Vertical position. It can assume the following values:


t
the line at the top is aligned with the text baseline


b
the line at the bottom is aligned with the text baseline


c or none
the table is centred to the text baseline

cols : Defines the alignment and the borders of each column. It can have the following values:


l
left-justified column


c
centred column


r
right-justified column


p{'width'}
paragraph column with text vertically aligned at the top


m{'width'}
paragraph column with text vertically aligned in the middle (requires array package)


b{'width'}
paragraph column with text vertically aligned at the bottom (requires array package)


|
vertical line


||
double vertical line


*{num}{form}
the format form is repeated num times; for example *{3}{|l}| is equal to |l|l|l|

To separate between cells and introducing new lines use the following commands:



&
column separator


\\
start new row (additional space may be specified after \\ using square brackets, such as \\[6pt])


\hline
horizontal line between rows


\newline
start a new line within a cell (in a paragraph column)


\cline{i-j}
partial horizontal line beginning in column i and ending in column j

Further reading
For more information see

How to insert tables in Overleaf
Positioning images and tables
Lists of tables and figures
Lengths in LaTeX
Using colours in LaTeX
xcolor package manual
tabularx package manual
tabu package manual
longtable package manual
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

International language support - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsInternational language supportContents

1 Introduction
2 Input encoding
3 Font encoding
4 Babel
5 Using more than one language in a document
6 Right-to-Left writing

6.1 Arabic language


7 Examples of Supported Languages
8 Reference guide
9 Further reading


Introduction
If you are a non-English speaker, you can load the babel package which enables LaTeX to typeset in many different languages. Another option for multilingual typesetting is the polyglossia package which uses LuaLaTeX and XeLaTeX—readers interested to know more can read the Overleaf article Multilingual typesetting on Overleaf using polyglossia and fontspec.
We will start with a simple babel package example that typesets a document in Spanish:



\documentclass{article}
\usepackage[spanish]{babel}
\begin{document}

\tableofcontents

\vspace{2cm} %Add a 2cm space

\begin{abstract}
Este es un breve resumen del contenido del 
documento escrito en español.
\end{abstract}

\section{Sección Introductoria}
Esta es la primera sección, podemos agregar 
algunos elementos adicionales y todo será 
escrito correctamente. Más aún, si una palabra 
es demaciado larga y tiene que ser truncada, 
babel tratará de truncarla correctamente 
dependiendo del idioma.

\section{Sección con teoremas}
Esta sección es para ver que pasa con los comandos 
que definen texto
\end{document}



 Open this example in Overleaf.

This example produces the following output:

The babel package not only makes it possible to typeset Spanish language text but also changes the language used to typeset elements; for example, instead of "abstract" and "Contents" the Spanish words "resumen" and "Índice" are used.

Input encoding
Prior to 2018, LaTeX’s handling of input files encoded in UTF-8 required users to add the line  

\usepackage[utf8]{inputenc}

to their document preamble. With the release of TeX Live 2018, LaTeX was enhanced to adopt UTF-8 as its default text encoding, removing the need to add \usepackage[utf8]{inputenc}—as demonstrated by examples in this article. 

Note: If you can’t input some letters of national alphabets directly from the keyboard, you can use LaTeX alternative commands for accents and special characters. See the reference guide.
Font encoding
To ensure LaTeX can typeset your document you need to use fonts which have the character shapes required to typeset the language(s) being used. In addition, when using pdfLaTeX the fontenc package may still be required to ensure that input characters are correctly mapped to the appropriate output character shape (glyph) in the fonts being used:

 \usepackage[encoding]{fontenc}

where encoding is a comma-separated list of encodings reflecting the languages being used. The default LaTeX font encoding is OT1, but it contains only the 128 characters. The T1 encoding contains letters and punctuation characters for most European languages using the Latin script. For languages using Cyrillic script you can use T2A, T2B, T2C, or X2 font encodings. 
Users needing support for advanced multi-language typesetting should consider switching from pdfLaTeX to LuaLaTeX or XeLaTeX.

Babel
The babel package presented in the introduction allows the use of characters from a range of languages and also translates some elements within the document. babel also automatically activates the appropriate hyphenation rules for the language you choose.
You can activate the babel package by adding the following command to the preamble:

\usepackage[language]{babel}

Change the language to the name of the language you need. You can see a list of the languages available in the babel package documentation, under section 1.27 Languages supported by babel with ldf files.

Using more than one language in a document
The babel package enables typesetting multiple languages in the same document:



\documentclass{article}
\usepackage[T1, T2A]{fontenc}% T2A for Cyrillic font encoding
\usepackage[english, russian]{babel}
\begin{document}

\begin{abstract}
Это вводный абзац в начале документа.
\end{abstract}

 Этот текст будет на русском языке. Это демонстрация того, что символы кириллицы
 в сгенерированном документе (Compile to PDF) отображаются правильно.
 Для этого Вы должны установить нужный  язык (russian) 
и необходимую кодировку шрифта (T2A).

\selectlanguage{english}
This text will be in English. The elements within this 
block of text will also be set in the right language.

\begin{abstract}
A brief description of the main subject to be 
explained in the entire document.
\end{abstract}

\selectlanguage{russian}

Кириллические символы также могут быть использованы в математическом режиме.
 
\begin{equation}
  S_\textup{ис} = S_{123}
\end{equation}
\end{document}



 Open this example in Overleaf.

This example produces the following output:

Note how the fontenc and babel packages are each passed two parameters: 

two encodings for fontenc: T1 for Latin-script languages and T2A for Cyrillic languages.
two languages for babel: english and russian. When using this syntax the last language in the option list will be active (i.e. Russian), and you can use the command \selectlanguage{english} at any point to change the active language.
Right-to-Left writing
Arabic language
LaTeX users wishing to typeset languages such as Arabic or Hebrew should use either LuaLaTeX or XeLaTeX. However, if the use of pdfLaTeX is unavoidable you can typeset Arabic using the arabtex package, which is further discussed and demonstrated in an Overleaf article on Arabic typesetting. Here, we’ll give an example without repeating material contained in the article dedicated to Arabic. 

Note: Possibly due to the age of the package, arabtex depends on \usepackage[utf8]{inputenc} and will not work without it.


\documentclass[11pt,a4paper]{report}
\usepackage{arabtex}
\usepackage[utf8]{inputenc}
\usepackage[LFE,LAE]{fontenc}
\usepackage[arabic]{babel}
\title{
\Huge\textsc{اللغة العربية}
}
\author{سالم البوزيدي}
\begin{document}
\maketitle
\tableofcontents
\chapter{علوم الحاسوب}
\section{تاريخ}
\begin{otherlanguage}{arabic}
يعود تاريخ علوم الحاسوب إلى اختراع أول حاسوب رقمي حديث. فقبل العشرينات من القرن العشرين، كان مصطلح حاسوب \textLR{Computer} يشير إلى أي أداة بشرية تقوم بعملية الحسابات. ما هي القضايا أو الأشياء التي يمكن لآلة أن تحسبها باتباع قائمة من التعليمات مع ورقة وقلم، دون تحديد للزمن اللازم ودون أي مهارات أو بصيرة (ذكاء)؟ وكان أحد دوافع هذه الدراسات هو تطوير آلات حاسبة \textLR{computing machines} يمكنها إتمام الأعمال الروتينية والعرضة للخطأ البشري عند إجراء حسابات بشرية.
خلال الأربعينات، مع تطوير آلات حاسبة أكثر قوة وقدرة حسابية، تتطور مصطلح حاسوب ليشير إلى الآلات بدلا من الأشخاص الذين يقومون بالحسابات. وأصبح من الواضح أن الحواسيب يمكنها أن تقوم بأكثر من مجرد عمليات حسابية وبالتالي انتقلوا لدراسة تحسيب أو التحسيب بشكل عام. بدأت المعلوماتية وعلوم الحاسب تأخذ استقلالها كفرع أكاديمي مستقل في الستينات، مع إيجاد أوائل أقسام علوم الحاسب في الجامعات وبدأت الجامعات تعطي إجازات في هذه العلوم [1]. 
\end{otherlanguage}
\begin{thebibliography}{99}
   [1]
    من ويكيبيديا، الموسوعة الحرة
\end{thebibliography}
\end{document}



 Open this example in Overleaf.

This example produces the following output:


Examples of Supported Languages
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Reference guide
Accents and special characters
If you can't input some letters of national alphabets directly from the keyboard, you can use LaTeX commands for accents and special characters. 



LaTeX command (universal)

Output


\`{o}
ò


\'{o}
ó


\^{o}
ô


\"{o}
ö


\H{o}
ő


\~{o}
õ


\c{c}
ç


\k{a}
ą


\={o}
ō


\b{o}
o


\.{o}
ȯ


\d{u}
ụ


\r{a}
å


\u{o}
ŏ


\v{s}
š


\t{oo}
o͡o



LaTeX command

Output


\aa
å


\AA
Å


\ae
æ


\AE
Æ


\l
ł


\L
Ł


\o
ø


\O
Ø


\i
ı


\j



!`
¡


?`
¿


Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Arabic - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsArabicContents

1 Introduction

1.1 Notes on the arabtex package


2 A first arabtex example

2.1 arabtex: transliteration or UTF-8 input


3 A second arabtex example
4 An arabtex example also using babel

4.1 Input encoding
4.2 Language-specific document elements
4.3 Font encoding


5 Further reading


Introduction
In this article we explain how to typeset Arabic using the arabtex package with pdfLaTeX. However, the underlying pdfTeX engine (software), which typesets/processes your pdfLaTeX document, has relatively limited support for typesetting complex-script languages such as Arabic, Hebrew, Devanagari or Malayalam. Typesetting such languages requires more complete support of Unicode-based text input, the use of OpenType fonts and other capabilities which are not present in pdf(La)TeX. 
Many authors are mandated to use pdfLaTeX due to requirements of their workflow, but if you are able to choose the LaTeX compiler, the modern approach to typesetting Arabic is to use XeLaTeX (XeTeX engine) or LuaLaTeX (LuaHBTeX engine). LuaLaTeX, via LuaHBTeX, provides the most advanced and complete TeX-based solutions for complex-script language typesetting. See these pages about polyglossia and babel.

Notes on the arabtex package
Klaus Lagally started work on the arabtex package in 1991, primarily as a personal project—see Appendix B of the package documentation. Its genesis and early development predates the advent of pdfTeX by around 5 years and LuaHBTeX and XeTeX by more than a decade—and long before the rise of Unicode and OpenType fonts. The arabtex package is a tour-de-force of complex TeX programming, but many core component files now date from circa 2003, meaning that the age of the arabtex package can give rise to incompatibilities with current versions of LaTeX or LaTeX packages.

A first arabtex example
The following basic example uses the arabtex package to typeset a single word in Arabic:



\documentclass[a4paper,10pt]{article}
\usepackage{arabtex}
\usepackage{utf8}
\setcode{utf8}
\begin{document}
Here is the word ``Arabic'' written in Arabic:  \<اَلْعَرَبِيَّةُ>. You can also use the command \verb|\RL{arabic text}| like this: \RL{اَلْعَرَبيَّةُ}.
\end{document}



 Open this pdfLaTeX and arabtex example in Overleaf.

This example produces the following output:

Note that the arabic text used with command \RL{arabic text} should not contain more than a single paragraph of right-to-left text.

arabtex: transliteration or UTF-8 input
The arabtex package supports the ability to typeset Arabic text by writing it using a particular form of transliteration: representing Arabic text using the Latin script. Here's a fragment from an example in the arabtex documentation—note how the Arabic text is represented in Latin text, which is converted to Arabic:



\documentclass[12pt]{article}
\usepackage{arabtex}
\begin{document}
\setarab % choose the language specific conventions
\vocalize % switch diacritics for short vowels on
%\transtrue % display the transliteration
\arabtrue % print arabic text (on by default)
\centerline {\RL{^gu.hA wa-.himAruhu}} % typeset a centred line of Arabic text
\begin{RLtext}
fa-qAla lahu ^gu.hA:

.garIbuN 'amruka yA .sadIqI!
'a-tu.saddiqu al-.himAra wa-tuka_d_dibunI?
\end{RLtext}
\end{document}



 Open this pdfLaTeX and arabtex example in Overleaf.

This example produces the following output:

If we want arabtex to use actual Arabic text as input, not transliterated Latin text, we have to tell arabtex to use UTF-8 input instead, by writing 



\usepackage{utf8}
\setcode{utf8}



The utf8 package is part of the arabtex package.

A second arabtex example
The following example contains a more substantial piece of Arabic text which also contains some words in English:



\documentclass[a4paper,10pt]{article}
\usepackage{arabtex}
\usepackage{utf8}
\begin{document}
\setcode{utf8}
Here is the word ``Arabic'' written in Arabic:  \<اَلْعَرَبِيَّةُ>. You can also use the command \verb|\RL{arabic text}| like this: \RL{اَلْعَرَبيَّةُ}. 

\vspace{10pt}
Here is a larger section of Arabic, containing some words in English within the \verb|\LR| command:

\vspace{10pt}
\begin{RLtext}
يعود تاريخ علوم الحاسوب إلى اختراع أول حاسوب رقمي حديث. فقبل العشرينات من القرن العشرين، كان مصطلح حاسوب \LR{Computer} يشير إلى أي أداة بشرية تقوم بعملية الحسابات. ما هي القضايا أو الأشياء التي يمكن لآلة أن تحسبها باتباع قائمة من التعليمات مع ورقة وقلم، دون تحديد للزمن اللازم ودون أي مهارات أو بصيرة (ذكاء)؟ وكان أحد دوافع هذه الدراسات هو تطوير آلات حاسبة \LR{computing machines} يمكنها إتمام الأعمال الروتينية والعرضة للخطأ البشري عند إجراء حسابات بشرية.
خلال الأربعينات، مع تطوير آلات حاسبة أكثر قوة وقدرة حسابية، تتطور مصطلح حاسوب ليشير إلى الآلات بدلا من الأشخاص الذين يقومون بالحسابات. وأصبح من الواضح أن الحواسيب يمكنها أن تقوم بأكثر من مجرد عمليات حسابية وبالتالي انتقلوا لدراسة تحسيب أو التحسيب بشكل عام. بدأت المعلوماتية وعلوم الحاسب تأخذ استقلالها كفرع أكاديمي مستقل في الستينات، مع إيجاد أوائل أقسام علوم الحاسب في الجامعات وبدأت الجامعات تعطي إجازات في هذه العلوم [1]. 
\end{RLtext}
\end{document}



 Open this pdfLaTeX and arabtex example in Overleaf.



An arabtex example also using babel
The following examples uses arabtex together with the babel and inputenc packages, for reasons that will be noted below.



\documentclass[11pt,a4paper]{report}
\usepackage[utf8]{inputenc}
\usepackage{arabtex}
%\usepackage[LAE]{fontenc} %Not needed due to [arabic] option of the babel package
\usepackage[arabic]{babel}
\title{
    \Huge\textsc{اللغة العربية}
}
\author{سالم البوزيدي}
\begin{document}
\maketitle
\tableofcontents
\chapter{علوم الحاسوب}
\section{تاريخ}
\begin{otherlanguage}{arabic}
يعود تاريخ علوم الحاسوب إلى اختراع أول حاسوب رقمي حديث. فقبل العشرينات من القرن العشرين، كان مصطلح حاسوب \textLR{Computer} يشير إلى أي أداة بشرية تقوم بعملية الحسابات. ما هي القضايا أو الأشياء التي يمكن لآلة أن تحسبها باتباع قائمة من التعليمات مع ورقة وقلم، دون تحديد للزمن اللازم ودون أي مهارات أو بصيرة (ذكاء)؟ وكان أحد دوافع هذه الدراسات هو تطوير آلات حاسبة \textLR{computing machines} يمكنها إتمام الأعمال الروتينية والعرضة للخطأ البشري عند إجراء حسابات بشرية.
خلال الأربعينات، مع تطوير آلات حاسبة أكثر قوة وقدرة حسابية، تتطور مصطلح حاسوب ليشير إلى الآلات بدلا من الأشخاص الذين يقومون بالحسابات. وأصبح من الواضح أن الحواسيب يمكنها أن تقوم بأكثر من مجرد عمليات حسابية وبالتالي انتقلوا لدراسة تحسيب أو التحسيب بشكل عام. بدأت المعلوماتية وعلوم الحاسب تأخذ استقلالها كفرع أكاديمي مستقل في الستينات، مع إيجاد أوائل أقسام علوم الحاسب في الجامعات وبدأت الجامعات تعطي إجازات في هذه العلوم [1]. 
\end{otherlanguage}
\end{document}



 Open this Arabic text example in Overleaf




Input encoding
To support a variety of input encodings for different groups of languages and/or on different computer platforms LaTeX employs the inputenc package. Prior to the release of TeX Live 2018, using UTF-8 encoded text with pdfLaTeX required the inputenc package by writing 



\usepackage[utf8]{inputenc}



in your document's preamble. 
As noted in the Overleaf blog post TeX Live upgrade—September 2019, LaTeX has switched to UTF-8 as the default input encoding; consequently, it is now not usually necessary to explicitly write \usepackage[utf8]{inputenc} if you are using a post-2018 release of TeX Live. However, for the above example writing \usepackage[utf8]{inputenc} is still required.

Language-specific document elements
The arabic option of the babel package provides support for the Arabic language:



\usepackage[arabic]{babel}



which includes bidirectional typesetting and use of Arabic names for document elements. If you need to insert some Latin text inside your Arabic document, you use the \textLR{...} command; for example, by writing  



\textLR{Latin text}



Font encoding
In addition to using the correct input encoding, typesetting a LaTeX document, containing Arabic text, requires fonts with the appropriate correct output encoding to provide the glyphs (shapes) which represent typeset Arabic. Typesetting the example above needs the equivalent of writing



\usepackage[LAE]{fontenc}



but, as noted in this  reply on tex.stackexchange, using the arabic option of babel results in loading the required LAE encoding files laeenc.def and laeenc.dfu.

Further reading
For more information see

Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Chinese - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsChineseContents

1 Introduction
2 The ctex classes
3 xeCJK with XeLaTeX
4 Using the CJKutf8 with pdfLaTeX
5 Further reading


Introduction
This article explains how to typeset Chinese documents on Overleaf. The recommended approach is to use the XeLaTeX or LuaLaTeX compilers because they directly support UTF-8 encoded text and work with TrueType and OpenType fonts. See this article to learn how to change the compiler in Overleaf.
Let’s start with an example which uses XeLaTeX and the ctexart document class:



\documentclass{ctexart}
\begin{document}
\tableofcontents

\begin{abstract}
这是简介及摘要。
\end{abstract}

\section{前言}

\section{关于数学部分}
数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.

這是繁體中文。
\end{document}



 Open this XeLaTeX example in Overleaf

This example produces the following output:

The ctexart document class part of the ctex package bundle which implements common Chinese typesetting practices. We discuss further details about the ctex classes below.

The ctex classes
In order to handle characters for Simplified Chinese typesetting you can use the ctex document classes: ctexart, ctexrep, ctexbook and ctexbeamer. For example, to use the ctexart class include the following line in your document preamble:



\documentclass{ctexart}



The ctexart class (and other ctex classes) provides Chinese localisation, much like babel. You will not only be able to typeset Chinese characters, but also define elements such as “Abstract” and “Table of Contents” that will be translated as 摘要 and 目录.
You can import external fonts to your document, either uploading them to the same directory of your LaTeX file, or using system-wide fonts. For instance, if the BabelStone Han font is already installed on your system, you can use it in your document with



\setCJKmainfont{BabelStone Han}



Additional fonts for some parts of the document can be configured. To set a specific font for elements that use a sans serif font style use \setCJKsansfont{} and for elements that are displayed in a monospace font, such as verbatim environments, use the command \setCJKmonofont{}. You can refer to the list of Chinese fonts available on Overleaf here.
Notice that the last line in the example at the introduction is actually using Traditional Chinese characters. This is accomplished by the Fandol font (the default) because this font includes them. So, with the right font, you can actually typeset your document in both Simplified and Traditional Chinese. If you use a traditional- or simplified-only font, though, then characters whose glyphs are not available would not show up in the output PDF.
If you need to use document class such as memoir or perhaps a thesis .cls provided by your university, but would still like to use the ctex bundle, you can load the ctex package, like this:

\documentclass{UniThesis}
\usepackage{ctex}

xeCJK with XeLaTeX
If the complete ctex localisation classes and package feels like an overkill, and you just want to typeset some Chinese characters, you can use the xeCJK package—which only works when compiled with XeLaTeX.



\documentclass{article}
\usepackage{xeCJK}
\begin{document}
\section{前言}
这是一些文字。

\section{关于数学部分}
数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.

這是繁體中文。
\end{document}



 Open this xeCJK (XeLaTeX) example in Overleaf

This example produces the following output:


Using the CJKutf8 with pdfLaTeX
The CJKutf8 package can be used to typeset CJK languages with pdfLaTeX. Chinese (and Japanese/Korean) text must be placed inside a CJK environment, so this is usually convenient for primarily Latin-based documents (e.g., English) which contain fragments of Chinese text (or vice-versa).



\documentclass{article}
\usepackage{CJKutf8}
\begin{document}
\begin{CJK*}{UTF8}{gbsn}

\section{前言}

\section{关于数学部分}
数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.

\end{CJK*}

\bigskip  %% Just some white space

You can also insert Latin text in your document

\bigskip  %% Just some white space

\begin{CJK*}{UTF8}{bsmi}
這是繁體中文。
\end{CJK*}
\end{document}



 Open this CJKutf8 package example (using pdfLaTeX) in Overleaf

This example produces the following output:

The line \usepackage{CJKutf8} imports the CJKutf8 package which enables UTF-8 encoding for use with Chinese, Japanese and Korean fonts. Every block of Chinese text must be typed inside a \begin{CJK*}{UTF8}{gbsn} environment. In this environment UTF8 is the encoding and gbsn is the font to be used. You can use gbsn or gkai fonts for Simplified characters, and bsmi or bkai for Traditional characters.

Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Chinese fonts available on Overleaf
Example: Using the CTeX packages on Overleaf
Example: How to write multilingual text with different scripts in LaTeX
Typesetting quotations and quotation marks
International language support
Arabic
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Ctex packages documentation
xeCJK package documentation
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

French - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsFrenchContents

1 Introduction
2 French example using pdfLaTeX

2.1 Text files: integers and characters
2.2 Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
2.3 Output encoding: the fontenc package
2.4 LaTeX T1 font encoding
2.5 Example of copy and paste


3 Language-specific packages and commands
4 Hyphenation
5 Further reading


Introduction
This article explains how to typeset French text: enabling correct typesetting of accented characters, such as â, ê, î, ô, û etc., and providing support for language-specific features such as hyphenation. If you are looking for instructions on how to use more than one language in a single document, for instance English and French, see the International language support article.

French example using pdfLaTeX
We’ll start with the following pdfLaTeX example which you can open in Overleaf using the link below the code. 



\documentclass{article}
% \usepackage[utf8]{inputenc} is no longer required (since 2018)

%Set the font (output) encoding
%--------------------------------------
\usepackage[T1]{fontenc} %Not needed by LuaLaTeX or XeLaTeX

%French-specific commands
%--------------------------------------
\usepackage[french]{babel}
\usepackage[autolanguage]{numprint} % for the \nombre command

%Hyphenation rules
%--------------------------------------
\usepackage{hyphenat}
\hyphenation{mate-mática recu-perar}
%--------------------------------------

\begin{document}
\tableofcontents

\vspace{2cm} %Add a 2cm space

\begin{abstract}
Ceci est un bref résumé du contenu du document écrit en français.
\end{abstract}

\section{Section d'introduction}
Il s'agit de la première section, nous ajoutons des éléments supplémentaires et tout sera correctement orthographiés. En outre, si un mot est trop long et doit être tronqué, babel va essayer de tronquer correctement en fonction de la langue.

\section{Section théorèmes}
Cette section est de voir ce qui se passe avec les commandes de texte qui définissent.

\begin{itemize}
\item premier élément
\item deuxième élément
\end{itemize}

\[ \lim x =  \theta + \nombre{152383.52} \]
\end{document}



 Open this pdfLaTeX example in Overleaf.

This example produces the following output:


Text files: integers and characters
Any text file, such as a LaTeX input .tex file, is nothing more than a stream of numeric (integer) values which are being used as a mechanism to represent characters of text; consequently, processing a text file involves scanning (reading/processing) a series of integer values. However, an important question arises: which set of characters is actually represented by the integer values contained in a particular text file? In other words, how have those integer values been encoded: what is the correct (intended) "mapping" (encoding) from integers in the text file to the corresponding characters they are supposed to represent?
Text files can be generated within innumerable computing environments: across different countries/continents, using a multitude of different devices, operating systems and editing tools. Originators of text files could, potentially, use or apply different text encodings according to local requirements, such as language, when generating and storing the sequence of integer values chosen to represent the individual characters contained in a text file. This may work well if the generated text files stayed within compatible technical ecosystems, which use the same encoding, but what would happen when those files are transferred to completely different environments—because many text files do not contain any information which indicates the encoding used to generate them.
Clearly, the producer (originator) and consumer (user) of textual data must, somehow, agree on the encoding (mapping) being used, otherwise encoding errors are likely to arise due to mismatches between the integer data in the file and the set of characters it is assumed to represent. In addition to correctly mapping text file integer values to characters, any subsequent visual display of those characters requires some form of font that is capable of providing the data (shapes, or even bitmaps) to output a visual representation of the desired characters.

Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
Historically, a variety of 8-bit encodings were used to generate/process text files, including LaTeX inputs. To cut short a very long story, the developers of LaTeX created the inputenc package to address encoding issues—allowing text files, created using various encodings, to be transferred between disparate LaTeX installations. 
However, over time, users/software developers moved away from multiple 8-bit encodings to using Unicode and its UTF-8 encoding scheme, which became the de facto option for encoding text files. Prior to 2018, to process UTF-8 encoded files LaTeX document preambles included the line 



\usepackage[utf8]{inputenc}



Readers might observe that the example above does not include the line \usepackage[utf8]{inputenc} in the document preamble: why is that? This is due to an important change to LaTeX introduced in 2018: a switch to UTF-8 as the default input encoding. Documents typeset with pdfLaTeX, and using UTF-8 encoded text, including those created and typeset on Overleaf, no longer need to include \usepackage[utf8]{inputenc} but is does no harm to do so. For further information see the April 2018 issue of LaTeX News and the Overleaf blog post TeX Live upgrade—September 2019. All text files created on Overleaf are encoded using UTF-8.

Output encoding: the fontenc package
To correctly typeset characters contained within input files, those characters need to be mapped to the appropriate output shapes (glyphs) contained in fonts used to typeset the document. This “output encoding” is handled by another package called fontenc. 
To use fontenc include the following line in your document preamble, using an encoding, such as the T1 encoding, which supports accented characters contained in Latin-based languages:



\usepackage[T1]{fontenc}



Using the T1 font encoding, via \usepackage[T1]{fontenc}, has other benefits:

The default OT1 LaTeX font (“output”) encoding is 7-bit, meaning it can only encode 128 characters and does not include (enable) access to genuine accented character shapes (glyphs) contained in fonts. The OT1 encoding causes TeX engines to “fake” accented characters by typesetting (combining) a base character with an overlaid, and shifted, accent character.
If the TeX engine has to resort to construction of accented characters, this has implications for copy/paste of text from PDFs: copying text containing constructed accented characters will result in two separate characters being pasted: the base character and the accent character. Using the T1 encoding avoids this.
Using the T1 encoding, to access genuine accented characters, improves hyphenation.
LaTeX T1 font encoding
The following chart lists the T1 font encoding. It is reproduced from page 22 of the document LaTeX font encodings which is available on CTAN.



Example of copy and paste
The following minimal example, which does not use fontenc, demonstrates issues with copy/paste of text containing accented characters. 



\documentclass{article}
\begin{document}
Section théorèmes (OT1 encoding)

{
\fontencoding{T1}\selectfont Section théorèmes (T1 encoding)
}
\end{document}



 Open this example in Overleaf


The first piece of text is typeset using LaTeX’s default OT1 encoding, resulting in “fake” accented characters. The following piece of LaTeX code:



\fontencoding{T1}\selectfont



switches to using the T1 encoding, which results in LaTeX typesetting accented character glyphs. If you copy the text from the PDF produced by the example above you should see something like this:
Section th´eor`emes (OT1 encoding)
Section théorèmes (T1 encoding)
Observe how the OT1 encoded text does not contain actual accented characters, whereas the text encoded with T1 does contain them. The result of copy/paste can also depend on the application being used to view the PDF from which you are copying/pasting text containing accented characters.

Language-specific packages and commands
To extend the default capabilities of LaTeX, providing proper hyphenation and translation of the names of document elements, import the babel package using the french language option.



\usepackage[french]{babel}



As you may see in example using pdfLaTeX, instead of “Abstract” and “Contents” the French versions “Résumé” and “Table des matières” are used.
Notice that the preamble also loads the numprint package



\usepackage[autolanguage]{numprint}



which changes the formatting of numbers written inside the braces of the \nombre{} command.

Hyphenation
The babel package usually does a good job of providing language-specific hyphenation capabilities, but if a particular word does not hyphenate correctly there are packages to assist. For example, you can add the hyphenat package in your preamble:




 \usepackage{hyphenat}
 \hyphenation{mathéma-tiques récu-pérer}




The second line is a list of space-separated words with defined hyphenation rules. If you want to prevent hyphenation of a specific word, write {\nobreak word} within your document, or include it in an \mbox{word}.

Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
Arabic
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

German - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsGermanContents

1 Introduction
2 German example using pdfLaTeX

2.1 Text files: integers and characters
2.2 Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
2.3 Output encoding: the fontenc package
2.4 LaTeX T1 font encoding
2.5 Example of copy and paste


3 Language-specific packages and commands
4 Hyphenation
5 Further reading


Introduction
This article explains how to typeset German text: enabling correct typesetting of characters such as ä, ö, ẞ, ü	etc., and providing support for language-specific features such as hyphenation. If you are looking for instructions on how to use more than one language in a single document, for instance English and German, see the International language support article.

German example using pdfLaTeX
We’ll start with the following pdfLaTeX example which you can open in Overleaf using the link below the code. 



\documentclass{article}

% \usepackage[utf8]{inputenc} is no longer required (since 2018)

%Set the font (output) encoding
%--------------------------------------
\usepackage[T1]{fontenc} %Not needed by LuaLaTeX or XeLaTeX
%--------------------------------------

%German-specific commands
%--------------------------------------
\usepackage[ngerman]{babel}

%Hyphenation rules
%--------------------------------------
\usepackage{hyphenat}
\hyphenation{Mathe-matik wieder-gewinnen}
%--------------------------------------
\begin{document}
\tableofcontents
\vspace{2cm} %Add a 2cm space

\begin{abstract}
Dies ist eine kurze Zusammenfassung der Inhalte des in deutscher Sprache
verfassten Dokuments.
\end{abstract}

\section{Einleitendes Kapitel}
Dies ist der erste Abschnitt. Hier können wir einige zusätzliche Elemente
hinzufügen und alles wird korrekt geschrieben und umgebrochen werden. Falls ein
Wort für eine Zeile zu lang ist, wird \texttt{babel} versuchen je nach Sprache
richtig zu trennen.

\section{Eingabe mit mathematischer Notation}
In diesem Abschnitt ist zu sehen, was mit Makros geschieht, die zuvor definiert wurden.

\[ \lim x =  \theta + 152383.52 \]
\end{document}



 Open this pdfLaTeX example in Overleaf.

This example produces the following output:


Text files: integers and characters
Any text file, such as a LaTeX input .tex file, is nothing more than a stream of numeric (integer) values which are being used as a mechanism to represent characters of text; consequently, processing a text file involves scanning (reading/processing) a series of integer values. However, an important question arises: which set of characters is actually represented by the integer values contained in a particular text file? In other words, how have those integer values been encoded: what is the correct (intended) "mapping" (encoding) from integers in the text file to the corresponding characters they are supposed to represent?
Text files can be generated within innumerable computing environments: across different countries/continents, using a multitude of different devices, operating systems and editing tools. Originators of text files could, potentially, use or apply different text encodings according to local requirements, such as language, when generating and storing the sequence of integer values chosen to represent the individual characters contained in a text file. This may work well if the generated text files stayed within compatible technical ecosystems, which use the same encoding, but what would happen when those files are transferred to completely different environments—because many text files do not contain any information which indicates the encoding used to generate them.
Clearly, the producer (originator) and consumer (user) of textual data must, somehow, agree on the encoding (mapping) being used, otherwise encoding errors are likely to arise due to mismatches between the integer data in the file and the set of characters it is assumed to represent. In addition to correctly mapping text file integer values to characters, any subsequent visual display of those characters requires some form of font that is capable of providing the data (shapes, or even bitmaps) to output a visual representation of the desired characters.

Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
Historically, a variety of 8-bit encodings were used to generate/process text files, including LaTeX inputs. To cut short a very long story, the developers of LaTeX created the inputenc package to address encoding issues—allowing text files, created using various encodings, to be transferred between disparate LaTeX installations. 
However, over time, users/software developers moved away from multiple 8-bit encodings to using Unicode and its UTF-8 encoding scheme, which became the de facto option for encoding text files. Prior to 2018, to process UTF-8 encoded files LaTeX document preambles included the line 



\usepackage[utf8]{inputenc}



Readers might observe that the example above does not include the line \usepackage[utf8]{inputenc} in the document preamble: why is that? This is due to an important change to LaTeX introduced in 2018: a switch to UTF-8 as the default input encoding. Documents typeset with pdfLaTeX, and using UTF-8 encoded text, including those created and typeset on Overleaf, no longer need to include \usepackage[utf8]{inputenc} but is does no harm to do so. For further information see the April 2018 issue of LaTeX News and the Overleaf blog post TeX Live upgrade—September 2019. All text files created on Overleaf are encoded using UTF-8.

Output encoding: the fontenc package
To correctly typeset characters contained within input files, those characters need to be mapped to the appropriate output shapes (glyphs) contained in fonts used to typeset the document. This “output encoding” is handled by another package called fontenc. 
To use fontenc include the following line in your document preamble, using an encoding, such as the T1 encoding, which supports accented characters contained in Latin-based languages:



\usepackage[T1]{fontenc}



Using the T1 font encoding, via \usepackage[T1]{fontenc}, has other benefits:

The default OT1 LaTeX font (“output”) encoding is 7-bit, meaning it can only encode 128 characters and does not include (enable) access to genuine accented character shapes (glyphs) contained in fonts. The OT1 encoding causes TeX engines to “fake” accented characters by typesetting (combining) a base character with an overlaid, and shifted, accent character.
If the TeX engine has to resort to construction of accented characters, this has implications for copy/paste of text from PDFs: copying text containing constructed accented characters will result in two separate characters being pasted: the base character and the accent character. Using the T1 encoding avoids this.
Using the T1 encoding, to access genuine accented characters, improves hyphenation.
LaTeX T1 font encoding
The following chart lists the T1 font encoding. It is reproduced from page 22 of the document LaTeX font encodings which is available on CTAN.



Example of copy and paste
The following minimal example, which does not use fontenc, demonstrates issues with copy/paste of text containing accented characters. 



\documentclass{article}
\begin{document}
können wir einige zusätzliche (OT1 encoding)

{
\fontencoding{T1}\selectfont können wir einige zusätzliche (T1 encoding)
}
\end{document}



 Open this example in Overleaf


The first piece of text is typeset using LaTeX’s default OT1 encoding, resulting in “fake” accented characters. The following piece of LaTeX code:



\fontencoding{T1}\selectfont



switches to using the T1 encoding, which results in LaTeX typesetting accented character glyphs. If you copy the text from the PDF produced by the example above you should see something like this:
k¨onnen wir einige zus¨atzliche (OT1 encoding)
können wir einige zusätzliche (T1 encoding)
Observe how the OT1 encoded text does not contain actual accented characters, whereas the text encoded with T1 does contain them. The result of copy/paste can also depend on the application being used to view the PDF from which you are copying/pasting text containing accented characters.

Language-specific packages and commands
To extend the default capabilities of LaTeX, providing proper hyphenation and translation of the names of document elements, import the babel package using the ngerman language option.



\usepackage[ngerman]{babel}



As you may see in example using pdfLaTeX, instead of “Abstract” and “Contents” the German versions “Zusammenfassung” and “Inhaltsverzeichnis” are used. In addition, the new orthographic rules approved in 1998 are supported by babel using ngerman instead of the german parameter, which supports the old orthography.

Hyphenation
The babel package usually does a good job of providing language-specific hyphenation capabilities, but if a particular word does not hyphenate correctly there are packages to assist. For example, you can add the hyphenat package in your preamble:




\usepackage{hyphenat}
\hyphenation{Mathe-matik wieder-gewinnen}




The second line is a list of space-separated words with defined hyphenation rules. If you want to prevent hyphenation of a specific word, write {\nobreak word} within your document, or include it in an \mbox{word}.

Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Italian
Japanese
Korean
Arabic
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Greek - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsGreekContents

1 Introduction

1.1 Greek example using pdfLaTeX
1.2 Text files: integers and characters
1.3 Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
1.4 Output encoding: the fontenc package
1.5 LaTeX LGR font encoding for Greek text


2 Language-specific packages and commands

2.1 Documents with Greek and Latin text


3 Further reading


Introduction
This article explains how to typeset Greek text and provide support for language-specific features such as hyphenation.

Greek example using pdfLaTeX
We’ll start with the following pdfLaTeX example which you can open in Overleaf using the link below the code.



\documentclass{article}
% \usepackage[utf8]{inputenc} is no longer required (since 2018)

% Set the font (output) encoding
\usepackage[LGR]{fontenc}

% Greek-specific commands
\usepackage[greek]{babel}

\begin{document}
\tableofcontents

\begin{abstract}
Αυτή είναι μια σύντομη περιγραφή του θέματος 
σαφέστερα εξηγείται στο παρόν έγγραφο
\end{abstract}

\section{εισαγωγή}
Αυτό είναι το πρώτο τμήμα του εγγράφου. 
Είναι μια εισαγωγική παράγραφος.

\section{δεύτερο τμήμα}
Το δεύτερο τμήμα του εγγράφου. Αυτή η ενότητα 
μπορεί να περιέχει μαθηματική σημειογραφία.
\end{document}



 Open this pdfLaTeX example in Overleaf

This example produces the following output:


Text files: integers and characters
Any text file, such as a LaTeX input .tex file, is nothing more than a stream of numeric (integer) values which are being used as a mechanism to represent characters of text; consequently, processing a text file involves scanning (reading/processing) a series of integer values. However, an important question arises: which set of characters is actually represented by the integer values contained in a particular text file? In other words, how have those integer values been encoded: what is the correct (intended) "mapping" (encoding) from integers in the text file to the corresponding characters they are supposed to represent?
Text files can be generated within innumerable computing environments: across different countries/continents, using a multitude of different devices, operating systems and editing tools. Originators of text files could, potentially, use or apply different text encodings according to local requirements, such as language, when generating and storing the sequence of integer values chosen to represent the individual characters contained in a text file. This may work well if the generated text files stayed within compatible technical ecosystems, which use the same encoding, but what would happen when those files are transferred to completely different environments—because many text files do not contain any information which indicates the encoding used to generate them.
Clearly, the producer (originator) and consumer (user) of textual data must, somehow, agree on the encoding (mapping) being used, otherwise encoding errors are likely to arise due to mismatches between the integer data in the file and the set of characters it is assumed to represent. In addition to correctly mapping text file integer values to characters, any subsequent visual display of those characters requires some form of font that is capable of providing the data (shapes, or even bitmaps) to output a visual representation of the desired characters.

Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
Historically, a variety of 8-bit encodings were used to generate/process text files, including LaTeX inputs. To cut short a very long story, the developers of LaTeX created the inputenc package to address encoding issues—allowing text files, created using various encodings, to be transferred between disparate LaTeX installations. 
However, over time, users/software developers moved away from multiple 8-bit encodings to using Unicode and its UTF-8 encoding scheme, which became the de facto option for encoding text files. Prior to 2018, to process UTF-8 encoded files LaTeX document preambles included the line 



\usepackage[utf8]{inputenc}



Readers might observe that the example above does not include the line \usepackage[utf8]{inputenc} in the document preamble: why is that? This is due to an important change to LaTeX introduced in 2018: a switch to UTF-8 as the default input encoding. Documents typeset with pdfLaTeX, and using UTF-8 encoded text, including those created and typeset on Overleaf, no longer need to include \usepackage[utf8]{inputenc} but is does no harm to do so. For further information see the April 2018 issue of LaTeX News and the Overleaf blog post TeX Live upgrade—September 2019. All text files created on Overleaf are encoded using UTF-8.


Output encoding: the fontenc package
To correctly typeset characters contained within input files, those characters need to be mapped to the appropriate output shapes (glyphs) contained in fonts used to typeset the document. This “output encoding” is handled by another package called fontenc. 
For Greek text, you select the LGR encoding via fontenc by including the following line in your document preamble:



\usepackage[LGR]{fontenc}



LaTeX LGR font encoding for Greek text
The following chart lists the LGR font encoding for Greek text. It is reproduced from page 36 of the document LaTeX font encodings which is available on CTAN.


Language-specific packages and commands
To extend the default capabilities of LaTeX, providing proper hyphenation and translation of the names of document elements, import the babel package using the greek language option.



\usepackage[greek]{babel}



As you may see in the example using pdfLaTeX, instead of “Abstract” and “Contents” the Greek words “Περίληψη” and “Περιεχόμενα” are used.

Documents with Greek and Latin text
Here is an example containing Latin and Greek characters.



\documentclass{article}

% Set the font (output) encodings
\usepackage[LGR, T1]{fontenc}

% \usepackage[utf8]{inputenc} is no longer required (since 2018)

% Greek-specific commands
\usepackage[greek]{babel}

% Use Greek characters directly in mathematical mode 
% instead of using the commands \alpha etc
\usepackage{alphabeta}

\begin{document}
\tableofcontents

\begin{abstract}
Αυτή είναι μια σύντομη περιγραφή του θέματος 
σαφέστερα εξηγείται στο παρόν έγγραφο
\end{abstract}

\section{εισαγωγή}
Αυτό είναι το πρώτο τμήμα του εγγράφου. Είναι 
μια εισαγωγική παράγραφο.

\section{δεύτερο τμήμα}
Το δεύτερο τμήμα του εγγράφου. Αυτή η ενότητα 
μπορεί να περιέχει μαθηματική σημειογραφία.

\[x^2 + y^2 - \alpha = 4τ + 5α \]

\textlatin{Latin text can also be added to 
the document.}
\end{document}



 Open this pdfLaTeX example in Overleaf

This example produces the following output:

Here is a brief description of commands used in the above example.

\usepackage{alphabeta}: By loading this package you can use Greek characters, in math mode, directly entered via your keyboard/keypad, instead of using commands such as \alpha, \beta, \gamma etc. See the LaTeX code \[x^2 + y^2 - \alpha = 4τ + 5α \] within the example above.
\usepackage[LGR, T1]{fontenc}: This command will set two encodings for fonts in this document: LGR for Greek text and T1 for Latin text.
\textlatin{Latin text here}: You can use this command to typeset text written using Latin characters, which is useful for brief annotations.
Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Arabic
Italian
Japanese
Korean
Portuguese
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Italian - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsItalianContents

1 Introduction
2 Italian example using pdfLaTeX

2.1 Text files: integers and characters
2.2 Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
2.3 Output encoding: the fontenc package
2.4 LaTeX T1 font encoding
2.5 Example of copy and paste


3 Language-specific packages and commands
4 Hyphenation
5 Further reading


Introduction
This article explains how to typeset Italian text: enabling correct typesetting of accented characters, such as à, è, é, ì etc., and providing support for language-specific features such as hyphenation. If you are looking for instructions on how to use more than one language in a single document, for instance English and Italian, see the International language support article.

Italian example using pdfLaTeX
We’ll start with the following pdfLaTeX example which you can open in Overleaf using the link below the code. 



\documentclass{article}

%\usepackage[utf8]{inputenc} is no longer required (since 2018)

%Set the font (output) encoding
%--------------------------------------
\usepackage[T1]{fontenc} %Not needed by LuaLaTeX or XeLaTeX
%--------------------------------------

%Italian-specific commands
%--------------------------------------
\usepackage[italian]{babel}
%Hyphenation rules
%--------------------------------------
\usepackage{hyphenat}
\hyphenation{mate-mati-ca recu-perare}

\begin{document}
\tableofcontents

\vspace{2cm} %Add a 2cm space

\begin{abstract}
Questo è un breve riassunto dei contenuti del 
documento scritto in italiano.
\end{abstract}

\section{Sezione introduttiva}
Questa è la prima sezione, possiamo aggiungere 
alcuni elementi aggiuntivi e tutto 
digitato correttamente. Inoltre, se una parola 
è troppo lunga e deve essere troncato 
babel cercherà per troncare correttamente 
a seconda della lingua.

\section{Teoremi Sezione}
Questa sezione è quello di vedere cosa succede con i comandi 
testo definendo

\[ \lim x =  \sin{\theta} + \max \{3.52, 4.22\} \]
\end{document}



 Open this pdfLaTeX example in Overleaf.

This example produces the following output:


Text files: integers and characters
Any text file, such as a LaTeX input .tex file, is nothing more than a stream of numeric (integer) values which are being used as a mechanism to represent characters of text; consequently, processing a text file involves scanning (reading/processing) a series of integer values. However, an important question arises: which set of characters is actually represented by the integer values contained in a particular text file? In other words, how have those integer values been encoded: what is the correct (intended) "mapping" (encoding) from integers in the text file to the corresponding characters they are supposed to represent?
Text files can be generated within innumerable computing environments: across different countries/continents, using a multitude of different devices, operating systems and editing tools. Originators of text files could, potentially, use or apply different text encodings according to local requirements, such as language, when generating and storing the sequence of integer values chosen to represent the individual characters contained in a text file. This may work well if the generated text files stayed within compatible technical ecosystems, which use the same encoding, but what would happen when those files are transferred to completely different environments—because many text files do not contain any information which indicates the encoding used to generate them.
Clearly, the producer (originator) and consumer (user) of textual data must, somehow, agree on the encoding (mapping) being used, otherwise encoding errors are likely to arise due to mismatches between the integer data in the file and the set of characters it is assumed to represent. In addition to correctly mapping text file integer values to characters, any subsequent visual display of those characters requires some form of font that is capable of providing the data (shapes, or even bitmaps) to output a visual representation of the desired characters.

Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
Historically, a variety of 8-bit encodings were used to generate/process text files, including LaTeX inputs. To cut short a very long story, the developers of LaTeX created the inputenc package to address encoding issues—allowing text files, created using various encodings, to be transferred between disparate LaTeX installations. 
However, over time, users/software developers moved away from multiple 8-bit encodings to using Unicode and its UTF-8 encoding scheme, which became the de facto option for encoding text files. Prior to 2018, to process UTF-8 encoded files LaTeX document preambles included the line 



\usepackage[utf8]{inputenc}



Readers might observe that the example above does not include the line \usepackage[utf8]{inputenc} in the document preamble: why is that? This is due to an important change to LaTeX introduced in 2018: a switch to UTF-8 as the default input encoding. Documents typeset with pdfLaTeX, and using UTF-8 encoded text, including those created and typeset on Overleaf, no longer need to include \usepackage[utf8]{inputenc} but is does no harm to do so. For further information see the April 2018 issue of LaTeX News and the Overleaf blog post TeX Live upgrade—September 2019. All text files created on Overleaf are encoded using UTF-8.

Output encoding: the fontenc package
To correctly typeset characters contained within input files, those characters need to be mapped to the appropriate output shapes (glyphs) contained in fonts used to typeset the document. This “output encoding” is handled by another package called fontenc. 
To use fontenc include the following line in your document preamble, using an encoding, such as the T1 encoding, which supports accented characters contained in Latin-based languages:



\usepackage[T1]{fontenc}



Using the T1 font encoding, via \usepackage[T1]{fontenc}, has other benefits:

The default OT1 LaTeX font (“output”) encoding is 7-bit, meaning it can only encode 128 characters and does not include (enable) access to genuine accented character shapes (glyphs) contained in fonts. The OT1 encoding causes TeX engines to “fake” accented characters by typesetting (combining) a base character with an overlaid, and shifted, accent character.
If the TeX engine has to resort to construction of accented characters, this has implications for copy/paste of text from PDFs: copying text containing constructed accented characters will result in two separate characters being pasted: the base character and the accent character. Using the T1 encoding avoids this.
Using the T1 encoding, to access genuine accented characters, improves hyphenation.
LaTeX T1 font encoding
The following chart lists the T1 font encoding. It is reproduced from page 22 of the document LaTeX font encodings which is available on CTAN.



Example of copy and paste
The following minimal example, which does not use fontenc, demonstrates issues with copy/paste of text containing accented characters. 



\documentclass{article}
\begin{document}
cercherà (OT1 encoding)

{
\fontencoding{T1}\selectfont cercherà (T1 encoding)
}
\end{document}



 Open this example in Overleaf.


The first piece of text is typeset using LaTeX’s default OT1 encoding, resulting in “fake” accented characters. The following piece of LaTeX code:



\fontencoding{T1}\selectfont



switches to using the T1 encoding, which results in LaTeX typesetting accented character glyphs. If you copy the text from the PDF produced by the example above you should see something like this:
cercher`a (OT1 encoding)
cercherà (T1 encoding)
Observe how the OT1 encoded text does not contain actual accented characters, whereas the text encoded with T1 does contain them. The result of copy/paste can also depend on the application being used to view the PDF from which you are copying/pasting text containing accented characters.

Language-specific packages and commands
To extend the default capabilities of LaTeX, providing proper hyphenation and translation of the names of document elements, import the babel package using the italian language option.



\usepackage[italian]{babel}



As you may see in example using pdfLaTeX, instead of “Abstract” and “Contents” the Italian versions “Sommario” and “Indice” are used.

Hyphenation
The babel package usually does a good job of providing language-specific hyphenation capabilities, but if a particular word does not hyphenate correctly there are packages to assist. For example, you can add the hyphenat package in your preamble:




 \usepackage{hyphenat}
 \hyphenation{mate-mati-ca recu-perare}




The first command will import the package hyphenat and the second line is a list of space-separated words with defined hyphenation rules. On the other side, if you want a word not to be broken automatically, use the {\nobreak word} command within your document.

Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Arabic
Japanese
Korean
Portuguese
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Japanese - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsJapaneseDifferent packages exist to support Japanese typesetting for various LaTeX engines, though not all packages fully support all Japanese typesetting conventions e.g. vertical typesetting. This help article briefly outlines how to typeset Japanese with pdfLaTeX, XƎLaTeX, pTeX and LuaLaTeX.

Contents

1 CJKutf8 package with pdfLaTeX
2 xeCJK package with XeLaTeX

2.1 Using Google Noto fonts


3 The pTeX engine

3.1 Using pLaTeX on Overleaf


4 luatex-ja package bundle with LuaLaTeX
5 The jlreq class
6 Further reading


CJKutf8 package with pdfLaTeX
The CJKutf8 package is sufficient if you would like to compile with pdfLaTeX.



\documentclass{article}
\usepackage{CJKutf8}
\begin{document}

\begin{CJK}{UTF8}{min}
\section{これは最初のセクションである}
日本語で \LaTeX の組版を実証するための導入部分。

フォントはまた、数学的な形態および他の環境で使用することができる
\end{CJK}

\bigskip

Outside the environment Latin characters may be used.

\begin{CJK*}{UTF8}{goth}
\section{これは最初のセクションである}
日本語で \LaTeX の組版を実証するための導入部分。

フォントはまた、数学的な形態および他の環境で使用することができる
\end{CJK*}
\end{document}



 Open this CJKutf8 example in Overleaf.

This example produces the following output, demonstrating Japanese text typeset using two font families:

The line \usepackage{CJKutf8} imports the CJKutf8 which enables UTF8 encoding for Chinese, Japanese and Korean characters.
In this case, every block of Japanese text must be typed inside a \begin{CJK*}{UTF8}{min} environment. In that environment UTF8 is the encoding and min (Mincho family) is the font to be used in section 1 of the example.
As demonstrated by section 2 of the example, you can replace min with goth to use the Gothic family; however, CJKutf8 and pdfLaTeX are not capable of easily using other fonts.

xeCJK package with XeLaTeX
XeLaTeX offers the possibility of using OpenType and TrueType fonts, and the xeCJK package provides support for Chinese, Japanese and Korean typesetting. 



\documentclass{article}
\usepackage{xeCJK}
\setCJKmainfont{IPAMincho}
\setCJKsansfont{IPAGothic}
\setCJKmonofont{IPAGothic}
\begin{document}

\section{これは最初のセクションである}
日本語で \LaTeX の組版を実証するための導入部分。

フォントはまた、数学的な形態および他の環境で使用することができる

\bigskip

And you can also use Latin characters within your Japanese document.

\bigskip

\begin{verbatim}
このテキストは、別のフォントを持つことになります

This is a verbatim environment using a monospaced font.
\end{verbatim}
\end{document}



 Open this xeCJK example in Overleaf.

This example produces the following output:

Below is a description of each command:

\usepackage{xeCJK}: this includes the package xeCJK which allows use of Chinese, Japanese and Korean fonts in a document to be compiled with XeLaTeX. See this article for help setting your Overleaf project's compiler.
\setCJKmainfont{IPAMincho}: sets the main font used for this document.
\setCJKsansfont{IPAGothic}: sets the font to be used in elements that require the sans family font.
\setCJKmonofont{IPAGothic}: sets the font to be used in elements that require the monospace family font. In the example the Japanese text inside the verbatim environment uses this font.
Using Google Noto fonts
Because Google Noto Fonts suitable for use with CJK typesetting are stored on Overleaf's servers, we can use them to repeat the previous example. 



\documentclass{article}
\usepackage{xeCJK}
\setCJKmainfont{Noto Serif CJK JP}
\setCJKsansfont{Noto Sans CJK JP}
\setCJKmonofont{Noto Sans Mono CJK JP}
\begin{document}

\section{これは最初のセクションである}
日本語で \LaTeX の組版を実証するための導入部分。

フォントはまた、数学的な形態および他の環境で使用することができる

\bigskip

And you can also use Latin characters within your Japanese document.

\bigskip

\begin{verbatim}
このテキストは、別のフォントを持つことになります

This is a verbatim environment using a monospaced font.
\end{verbatim}
\end{document}



 Open this xeCJK example in Overleaf.

This example produces the following output:


The pTeX engine
Many journals and conference proceedings published in Japan use a specific Japanese LaTeX distribution called pLaTeX, which is based on the jsarticle or jsbook document classes. pLaTeX supports many Japanese typesetting conventions, including vertical typesetting. 

Using pLaTeX on Overleaf
Although pLaTeX is not listed as a user-selectable compiler in Overleaf's Compiler menu drop-down:

Overleaf can be configured to use pLaTeX by adding a small configuration file to your project: that file is called latexmkrc. Here are the steps to do that:

set your project's compiler setting to LaTeX
add a new, empty, file called latexmkrc (no file extension) to your project
add the following lines to latexmkrc:


$latex = 'platex';
$bibtex = 'pbibtex';
$dvipdf = 'dvipdfmx %O -o %D %S';
$makeindex = 'mendex %O -o %D %S';



If you are using a template that was designed for uplatex instead, then change platex to uplatex, and pbibtex to upbibtex.
The following listings show a basic pLaTeX document together with a latexmkrc file used to compile it on Overleaf. Use the link below the listings to open these files on Overleaf.

pLaTeX-example.tex


\documentclass{jsarticle}
\bibliographystyle{jplain}
\title{A pLaTeX example}
\begin{document}

本稿では、文書組版システムp\LaTeX{}の使い方を解説します。p\LaTeX{}を利用するときには、
あらかじめ文章中に\TeX{}コマンドと呼ばれる組版用の指示を混在させ\ldots

\section{導入}
こんにちは世界！
\end{document}




latexmkrc


$latex = 'platex';
$bibtex = 'pbibtex';
$dvipdf = 'dvipdfmx %O -o %D %S';
$makeindex = 'mendex %O -o %D %S';




 Open this pLaTeX project on Overleaf.

This example produces the following output:


luatex-ja package bundle with LuaLaTeX
The luatex-ja package bundle is a relatively new effort to port pTeX's typesetting capabilities to LuaLaTeX, to leverage LuaLaTeX's scripting engine and OTF/TTF support. (Remember to set your project's compiler to LuaLaTeX.) The easiest way to use it is by loading the ltjbook, ltjarticle or ltjreport document class:



\documentclass{ltjarticle}
\begin{document}
\section{これは最初のセクションである}
日本語で \LaTeX の組版を実証するための導入部分。

フォントはまた、数学的な形態および他の環境で使用することができる
\end{document}



 Open this ltjarticle and LuaLaTeX example on Overleaf.

This example produces the following output:

Or, if you would like to use a different document class, then you can load the luatex-ja package instead, like this:



\documentclass{scrartcl}
\usepackage{luatexja}
\begin{document}
\section{これは最初のセクションである}
日本語で \LaTeX の組版を実証するための導入部分。

フォントはまた、数学的な形態および他の環境で使用することができる
\end{document}



 Open this luatex-ja and LuaLaTeX example on Overleaf.

This example produces the following output:

To load your own preferred fonts for the Japanese text, you'll also need the luatexja-fontspec package:




\usepackage[match]{luatexja-fontspec}
\setmainjfont{TakaoMincho}
\setsansjfont{TakaoGothic}
\setmonojfont{Komatuna}



See the luatex-ja package documentation for its other (very extensive) Japanese typesetting features and customisations.

The jlreq class
The jlreq class is a more recent choice for typesetting Japanese documents. You can simply set jlreq as the document class, but it requires LuaLaTeX, pLaTeX or upLaTeX as the compiler.



\documentclass{jlreq}
\begin{document}
\section{これは最初のセクションである}
日本語で \LaTeX の組版を実証するための導入部分。

フォントはまた、数学的な形態および他の環境で使用することができる
\end{document}



 Open this jlreq and LuaLaTeX example on Overleaf.

This example produces the following output:

The Overleaf Gallery contains a template demonstrating jlreq and LuaLaTeX,  which you can open here. The jlreq package documentation contains details for the Japanese typesetting features and customisations offered.

Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Latex-questions/Does Overleaf support pTeX?
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Italian
Arabic
Korean
Portuguese
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Korean - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsKoreanContents

1 Introduction

1.1 Example using Google Noto CJK fonts
1.2 Example using Noto fonts and different font weights


2 Example using xeCJK with fonts loaded into your project
3 Typesetting Korean documents with pdfLaTeX
4 Further reading


Introduction
LaTeX supports many worldwide languages by means of special packages. This article explains how to import and use packages to typeset documents containing Korean text. A list of Korean typefaces available on Overleaf can be found here.

Example using Google Noto CJK fonts
We can use the xeCJK package, which requires the XeLaTeX compiler, to typeset some Korean using the Noto CJK fonts installed on Overleaf:



\documentclass{article}
\usepackage{xeCJK}
\setmainfont{Noto Serif}
\setCJKmainfont{Noto Serif CJK KR}
\setCJKsansfont{Noto Sans CJK KR}
\setCJKmonofont{Noto Sans Mono CJK KR}
\begin{document}
\section{소개}
전체 문서에 대한 기본 정보를 소개 단락.

\begin{verbatim}
그것은 간격 방법을 참조 그대로 글꼴을 테스트
\end{verbatim}

Latin characters are also allowed.
\end{document}



 Open this Korean example in Overleaf

This example produces the following output:

In the above example four different different fonts are declared:

\setmainfont{Noto Serif}: Uses the Noto Serif font for text with Latin characters.
\setCJKmainfont{Noto Serif CJK KR}: Sets the font Noto Serif CJK KR to be used as the main font.
\setCJKsansfont{Noto Sans CJK KR}: Just as the previous command, this uses Noto Sans CJK KR for document elements to be typeset in a sans serif font.
\setCJKmonofont{Noto Sans Mono CJK KR}: Uses the Noto Sans Mono CJK KR font for document elements that require a monospace font; for instance, within the verbatim environment.
Example using Noto fonts and different font weights
Because the xeCJK package uses fontspec the usual LaTeX font style, family and weight selection commands, such as \ttfamily, \bfseries and \textsf continue to work, as shown in the following example:



\documentclass{article}
\usepackage{xeCJK}
\setmainfont{Noto Serif}
\setCJKmainfont{Noto Serif CJK KR}
\setCJKsansfont{Noto Sans CJK KR}
\setCJKmonofont{Noto Sans Mono CJK KR}
\begin{document}
\section{소개}
전체 문서에 대한 기본 정보를 소개 단락.

\vspace{10pt}

\noindent Regular weight monospace: {\ttfamily 전체 문서에 대한 기본 정보를 소개 단락.}

\vspace*{10pt}

\noindent Bold weight monospace: {\ttfamily\bfseries 전체 문서에 대한 기본 정보를 소개 단락.} 

\vspace*{10pt}

\noindent Sans serif: \textsf{ 전체 문서에 대한 기본 정보를 소개 단락.}

\vspace*{10pt}

\noindent Sans serif bold: \textsf{\bfseries 전체 문서에 대한 기본 정보를 소개 단락.}

\vspace*{10pt}

\noindent And of course, Latin characters are also allowed in \textbf{bold} or \textit{italics}.
\end{document}



 Open this second Korean example in Overleaf

This example produces the following output:


Example using xeCJK with fonts loaded into your project
The following example uses fonts, UnGungseo.ttf and gulim.ttf, uploaded into the Overleaf project.



\documentclass{article}
\usepackage{xeCJK}

\setmainfont{Noto Serif}
\setCJKmainfont{UnGungseo.ttf}
\setCJKsansfont{UnGungseo.ttf}
\setCJKmonofont{gulim.ttf}

\begin{document}

\section{소개}
전체 문서에 대한 기본 정보를 소개 단락.

\begin{verbatim}
그것은 간격 방법을 참조 그대로 글꼴을 테스트
\end{verbatim}

Latin characters are also allowed.

\end{document}



 Open this XeLaTeX and xeCJK example in Overleaf
This example produces the following output:


Typesetting Korean documents with pdfLaTeX
If your workflow means you have to use pdfLaTeX, and cannot use XeLaTeX, you can use the CJKutf8 package with pdfLaTeX. Here is an example:



\documentclass{article}
\usepackage{CJKutf8}
\begin{document}
\begin{CJK}{UTF8}{mj}
 전체 문서에 대한 기본 정보를 소개 단락.

 \begin{verbatim}
 그것은 간격 방법을 참조 그대로 글꼴을 테스트
 \end{verbatim}
\end{CJK}

Latin characters are also allowed.
\end{document}



 Open this CJKuft8 package example in Overleaf

This example produces the following output:

Note that in order to type Korean text you must use the CJK environment:
\begin{CJK}{UTF8}{mj}will start a CJK environment, the first parameter passed to the environment declaration is the text encoding. Use only UTF8 on Overleaf, since all text files on Overleaf are UTF8. The second parameter is the font family to be used: use mj for Korean.

Further reading
For more information see

A list of Korean typefaces available on Overleaf
Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Italian
Japanese
Arabic
Portuguese
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Portuguese - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsPortugueseContents

1 Introduction
2 Portuguese example using pdfLaTeX

2.1 Text files: integers and characters
2.2 Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
2.3 Output encoding: the fontenc package
2.4 LaTeX T1 font encoding
2.5 Example of copy and paste


3 Language-specific packages and commands
4 Hyphenation
5 Further reading


Introduction
This article explains how to typeset Portuguese: enabling correct typesetting of accented characters, such as ç, ã, é etc., and providing support for language-specific features such as hyphenation. If you are looking for instructions on how to use more than one language in a single document, for instance English and Portuguese, see the International language support article.

Portuguese example using pdfLaTeX
We’ll start with the following pdfLaTeX example which you can open in Overleaf using the link below the code. 



\documentclass{article}
% \usepackage[utf8]{inputenc} is no longer required (since 2018)

%Set the font (output) encoding
%--------------------------------------
\usepackage[T1]{fontenc} %Not needed by LuaLaTeX or XeLaTeX
%--------------------------------------

%Portuguese-specific commands
%--------------------------------------
\usepackage[portuguese]{babel}
%--------------------------------------

%Hyphenation rules
%--------------------------------------
\usepackage{hyphenat}
\hyphenation{mate-mática recu-perar}
%--------------------------------------

\begin{document}
\tableofcontents

\vspace{2cm} %Add a 2cm space

\begin{abstract}
Este é um breve resumo do conteúdo do documento escrito em Português.
\end{abstract}

\section{Seção introdutória}
Esta é a primeira seção, podemos acrescentar alguns elementos adicionais 
e tudo será escrito corretamente. Além disso, se uma palavra é um caminho 
muito longo e tem de ser truncado, babel irá tentar truncar corretamente, 
dependendo do idioma.

\section{Segunda seção}
Esta seção é para ver o que acontece com comandos de texto que definem

\[ \lim x =  \theta + 152383.52 \]
\end{document}



 Open this pdfLaTeX example in Overleaf.

This example produces the following output:


Text files: integers and characters
Any text file, such as a LaTeX input .tex file, is nothing more than a stream of numeric (integer) values which are being used as a mechanism to represent characters of text; consequently, processing a text file involves scanning (reading/processing) a series of integer values. However, an important question arises: which set of characters is actually represented by the integer values contained in a particular text file? In other words, how have those integer values been encoded: what is the correct (intended) "mapping" (encoding) from integers in the text file to the corresponding characters they are supposed to represent?
Text files can be generated within innumerable computing environments: across different countries/continents, using a multitude of different devices, operating systems and editing tools. Originators of text files could, potentially, use or apply different text encodings according to local requirements, such as language, when generating and storing the sequence of integer values chosen to represent the individual characters contained in a text file. This may work well if the generated text files stayed within compatible technical ecosystems, which use the same encoding, but what would happen when those files are transferred to completely different environments—because many text files do not contain any information which indicates the encoding used to generate them.
Clearly, the producer (originator) and consumer (user) of textual data must, somehow, agree on the encoding (mapping) being used, otherwise encoding errors are likely to arise due to mismatches between the integer data in the file and the set of characters it is assumed to represent. In addition to correctly mapping text file integer values to characters, any subsequent visual display of those characters requires some form of font that is capable of providing the data (shapes, or even bitmaps) to output a visual representation of the desired characters.

Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
Historically, a variety of 8-bit encodings were used to generate/process text files, including LaTeX inputs. To cut short a very long story, the developers of LaTeX created the inputenc package to address encoding issues—allowing text files, created using various encodings, to be transferred between disparate LaTeX installations. 
However, over time, users/software developers moved away from multiple 8-bit encodings to using Unicode and its UTF-8 encoding scheme, which became the de facto option for encoding text files. Prior to 2018, to process UTF-8 encoded files LaTeX document preambles included the line 



\usepackage[utf8]{inputenc}



Readers might observe that the example above does not include the line \usepackage[utf8]{inputenc} in the document preamble: why is that? This is due to an important change to LaTeX introduced in 2018: a switch to UTF-8 as the default input encoding. Documents typeset with pdfLaTeX, and using UTF-8 encoded text, including those created and typeset on Overleaf, no longer need to include \usepackage[utf8]{inputenc} but is does no harm to do so. For further information see the April 2018 issue of LaTeX News and the Overleaf blog post TeX Live upgrade—September 2019. All text files created on Overleaf are encoded using UTF-8.

Output encoding: the fontenc package
To correctly typeset characters contained within input files, those characters need to be mapped to the appropriate output shapes (glyphs) contained in fonts used to typeset the document. This “output encoding” is handled by another package called fontenc. 
To use fontenc include the following line in your document preamble, using an encoding, such as the T1 encoding, which supports accented characters contained in Latin-based languages:



\usepackage[T1]{fontenc}



Using the T1 font encoding, via \usepackage[T1]{fontenc}, has other benefits:

The default OT1 LaTeX font (“output”) encoding is 7-bit, meaning it can only encode 128 characters and does not include (enable) access to genuine accented character shapes (glyphs) contained in fonts. The OT1 encoding causes TeX engines to “fake” accented characters by typesetting (combining) a base character with an overlaid, and shifted, accent character.
If the TeX engine has to resort to construction of accented characters, this has implications for copy/paste of text from PDFs: copying text containing constructed accented characters will result in two separate characters being pasted: the base character and the accent character. Using the T1 encoding avoids this.
Using the T1 encoding, to access genuine accented characters, improves hyphenation.
LaTeX T1 font encoding
The following chart lists the T1 font encoding. It is reproduced from page 22 of the document LaTeX font encodings which is available on CTAN.



Example of copy and paste
The following minimal example, which does not use fontenc, demonstrates issues with copy/paste of text containing accented characters. 



\documentclass{article}
\begin{document}
Seção introdutória (OT1 encoding)

{
\fontencoding{T1}\selectfont Seção introdutória (T1 encoding)
}
\end{document}



 Open this example in Overleaf


The first piece of text is typeset using LaTeX’s default OT1 encoding, resulting in “fake” accented characters. The following piece of LaTeX code:



\fontencoding{T1}\selectfont



switches to using the T1 encoding, which results in LaTeX typesetting accented character glyphs. If you copy the text from the PDF produced by the example above you should see something like this:
Se¸c˜ao introdut´oria (OT1 encoding)
Seção introdutória (T1 encoding)
Observe how the OT1 encoded text does not contain actual accented characters, whereas the text encoded with T1 does contain them. The result of copy/paste can also depend on the application being used to view the PDF from which you are copying/pasting text containing accented characters.

Language-specific packages and commands
To extend the default capabilities of LaTeX, providing proper hyphenation and translation of the names of document elements, import the babel package using the portuguese language option.



\usepackage[portuguese]{babel}



As you may see in the example using pdfLaTeX, instead of “Abstract” and “Contents” the Portuguese words “Resumo” and “Conteúdo” are used.
If you need to use the Brazilian Portuguese localization use brazilian instead of portuguese as the language parameter when importing babel.

Hyphenation
The babel package usually does a good job of providing language-specific hyphenation capabilities, but if a particular word does not hyphenate correctly there are packages to assist. For example, you can add the hyphenat package in your preamble:




 \usepackage{hyphenat}
 \hyphenation{mate-mática recu-perar}




The second line is a list of space-separated words with defined hyphenation rules. If you want to prevent hyphenation of a specific word, write {\nobreak word} within your document, or include it in an \mbox{word}.

Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Italian
Japanese
Korean
Arabic
Russian
Spanish
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Russian - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsRussianContents

1 Introduction
2 Russian example using pdfLaTeX
3 Background topics: characters and encodings

3.1 Text files: integers and characters
3.2 Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
3.3 Output encoding: the fontenc package (for use with pdfLaTeX)


4 Language-specific packages and commands
5 Hyphenation
6 A final example
7 Further reading


Introduction
This article explores typesetting Russian text: enabling correct use of Cyrillic characters, such аs ц, ч, ш, щ, ъ etc., and providing support for language-specific features such as hyphenation. If you are looking for instructions on how to use more than one language in a single document, for instance English and Russian, see the International language support article.

Russian example using pdfLaTeX
We’ll start with the following pdfLaTeX example which you can open in Overleaf using the link below the code. Because Russian uses the Cyrillic script pdfLaTeX needs to ensure it not only handles the input (encoding) of Cyrillic text but also ensure the correct (output) encoding is applied to any fonts used to typeset the document. These encoding issues are discussed below.



\documentclass{article}
\usepackage[T2A]{fontenc}

%Hyphenation rules
%--------------------------------------
\usepackage{hyphenat}
\hyphenation{ма-те-ма-ти-ка вос-ста-нав-ли-вать}
%--------------------------------------
\usepackage[english, russian]{babel}
\begin{document}
 
\tableofcontents

\begin{abstract}
  Это вводный абзац в начале документа.
\end{abstract}
 
\section{Предисловие}
 Этот текст будет на русском языке. Это демонстрация того, что символы кириллицы
 в сгенерированном документе (Compile to PDF) отображаются правильно. Для этого Вы должны установить нужный  язык (russian) и необходимую кодировку шрифта (T2A).

\vskip12pt

\textbf{Этот текст будет на русском языке. Это демонстрация того, что символы кириллицы в сгенерированном документе (Compile to PDF) отображаются правильно.}

\vskip12pt

\textit{Этот текст будет на русском языке. Это демонстрация того, что символы кириллицы в сгенерированном документе (Compile to PDF) отображаются правильно.} 

\section{Математические формулы}
Кириллические символы также могут быть использованы в математическом режиме.

\begin{equation}
  S_\textup{ис} = S_{123}
\end{equation}
\end{document}



 Open this pdfLaTeX example in Overleaf

This example produces the following output:


Background topics: characters and encodings
The following sections provide background material on topics related to typesetting different languages using LaTeX (mostly related to pdfLaTeX).

Text files: integers and characters
Any text file, such as a LaTeX input .tex file, is nothing more than a stream of numeric (integer) values which are being used as a mechanism to represent characters of text; consequently, processing a text file involves scanning (reading/processing) a series of integer values. However, an important question arises: which set of characters is actually represented by the integer values contained in a particular text file? In other words, how have those integer values been encoded: what is the correct (intended) "mapping" (encoding) from integers in the text file to the corresponding characters they are supposed to represent?
Text files can be generated within innumerable computing environments: across different countries/continents, using a multitude of different devices, operating systems and editing tools. Originators of text files could, potentially, use or apply different text encodings according to local requirements, such as language, when generating and storing the sequence of integer values chosen to represent the individual characters contained in a text file. This may work well if the generated text files stayed within compatible technical ecosystems, which use the same encoding, but what would happen when those files are transferred to completely different environments—because many text files do not contain any information which indicates the encoding used to generate them.
Clearly, the producer (originator) and consumer (user) of textual data must, somehow, agree on the encoding (mapping) being used, otherwise encoding errors are likely to arise due to mismatches between the integer data in the file and the set of characters it is assumed to represent. In addition to correctly mapping text file integer values to characters, any subsequent visual display of those characters requires some form of font that is capable of providing the data (shapes, or even bitmaps) to output a visual representation of the desired characters.

Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
Historically, a variety of 8-bit encodings were used to generate/process text files, including LaTeX inputs. To cut short a very long story, the developers of LaTeX created the inputenc package to address encoding issues—allowing text files, created using various encodings, to be transferred between disparate LaTeX installations. 
However, over time, users/software developers moved away from multiple 8-bit encodings to using Unicode and its UTF-8 encoding scheme, which became the de facto option for encoding text files. Prior to 2018, to process UTF-8 encoded files LaTeX document preambles included the line 



\usepackage[utf8]{inputenc}



Readers might observe that the example above does not include the line \usepackage[utf8]{inputenc} in the document preamble: why is that? This is due to an important change to LaTeX introduced in 2018: a switch to UTF-8 as the default input encoding. Documents typeset with pdfLaTeX, and using UTF-8 encoded text, including those created and typeset on Overleaf, no longer need to include \usepackage[utf8]{inputenc} but is does no harm to do so. For further information see the April 2018 issue of LaTeX News and the Overleaf blog post TeX Live upgrade—September 2019. All text files created on Overleaf are encoded using UTF-8.

Output encoding: the fontenc package (for use with pdfLaTeX)
To correctly typeset characters contained within input files, those characters need to be mapped to the appropriate output shapes (glyphs) contained in fonts used to typeset the document. This “output encoding” is handled by another package called fontenc. 
To use fontenc include the following line in your document preamble, using an encoding, such as the T2A encoding, which supports the Cyrillic script:



\usepackage[T2A]{fontenc}




The following chart lists the T2A font encoding for Cyrillic text. It is reproduced from page 23 of the document LaTeX font encodings which is available on CTAN.



Language-specific packages and commands
To extended the default LaTeX capabilities, for proper hyphenation and translating the names of the document elements, import the babel package and use the russian language option:


\usepackage[russian]{babel}


As you may see in the example in the introduction, instead of "Abstract" and "Contents" the Russian words "Аннотация" and "Содержание" are used. Cyrillic characters can also be used in mathematical mode.
If you need to include more than one language, for instance, Russian and English, see the International language support article to learn how to achieve this. A great deal of useful background information can be found in the document Russian language module for Babel.

Hyphenation
To achieve linebreaks, some words have to be hyphenated: broken up into syllables separated by a - (hyphen), allowing the word to continue on the next line. For example, математика could become мате-мати-ка. The babel package usually does a good job of hyphenation but, occasionally, you may need to define hyphenation points manually, which you can do using these commands in the preamble:




 \usepackage{hyphenat}
  \hyphenation{мате-мати-ка восста-навливать}




\usepackage{hyphenat} imports the hyphenat package and the second line is a list of space-separated words with defined hyphenation points. If you want to prevent automatic hyphenation of a particular word, use the command {\nobreak word} within your document.

A final example
This final example configures LaTeX so that the Russian text can be typeset using pdfLaTeX, XeLaTeX and LuaLuaTeX—to switch compilers on Overleaf, see the article Changing compiler. 
This example uses the \iftutex command from the iftex package to detect whether a Unicode-aware engine (LuaTeX or XeTeX) is being used to compile the LaTeX code (document). If so, Google's OpenType Noto fonts are configured via the fontspec package and used to typeset the document. If a non-Unicode-aware engine, such as pdfTeX, is detected then the LaTeX code (document) is typeset using old 8-bit font technologies (based on Adobe Type 1).
The following code opens on Overleaf and defaults to compiling with XeLaTeX. To use a different compiler, see the article Changing compiler.



\documentclass{article}
\usepackage{iftex}
\iftutex
% For LuaTeX or XeTeX Use Google's 
% OpenType Noto fonts for typesetting
% Russian text
\usepackage{fontspec}
\defaultfontfeatures{Ligatures={TeX}}
\setmainfont{Noto Serif}
\setsansfont{Noto Sans}
\setmonofont{Noto Sans Mono}
\else
% For pdfTeX we must use old
% 8-bit font technologies
\usepackage[T2A]{fontenc}
\fi
%Hyphenation rules
\usepackage{hyphenat}
\hyphenation{ма-те-ма-ти-ка вос-ста-нав-ли-вать}
\usepackage[english, russian]{babel}
\begin{document}

Этот текст будет на русском языке. Это демонстрация того, что символы кириллицы в сгенерированном документе отображаются правильно.

\vskip12pt

\textbf{Этот текст будет на русском языке. Это демонстрация того, что символы кириллицы в сгенерированном документе отображаются правильно.}

\vskip12pt

\textit{Этот текст будет на русском языке. Это демонстрация того, что символы кириллицы в сгенерированном документе отображаются правильно.} 

\vskip12pt

\texttt{Этот текст будет на русском языке.}
\end{document}



 Open this example on Overleaf

Using XeLaTeX, this example produces the following output:


Further reading
For more information see

Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Arabic
Spanish
Russian language module for Babel
History of the T2A, T2B and T2C Cyrillic encodings
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Spanish - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsSpanishContents

1 Introduction

1.1 Spanish text example using pdfLaTeX
1.2 Text files: integers and characters
1.3 Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
1.4 Output encoding: the fontenc package
1.5 LaTeX T1 font encoding


2 Language-specific packages and commands
3 Hyphenation
4 Reference guide
5 Further reading


Introduction
This article explains how to typeset Spanish text: enabling correct typesetting of accented characters,  such as ñ, and providing support for language-specific features such as hyphenation.

Spanish text example using pdfLaTeX
We’ll start with the following pdfLaTeX example which you can open in Overleaf using the link below the code.



\documentclass{article}

% Set the font (output) encodings
\usepackage[T1]{fontenc}

% \usepackage[utf8]{inputenc} is no longer required (since 2018)

% Spanish-specific commands
\usepackage[spanish]{babel}
\begin{document}
\tableofcontents

\vspace{2cm} %Add a 2cm space

\begin{abstract}
Este es un breve resumen del contenido del 
documento escrito en español.
\end{abstract}

\section{Sección introductoria}
Esta es la primera sección, podemos agregar 
algunos elementos adicionales y todo será 
escrito correctamente. Más aún, si una palabra 
es demasiado larga y tiene que ser truncada, 
babel tratará de truncarla correctamente 
dependiendo del idioma.

\section{Sección con teoremas}
Esta sección es para ver qué pasa con los comandos 
que definen texto
\end{document}



 Open this pdfLaTeX example in Overleaf

This example produces the following output:


Text files: integers and characters
Any text file, such as a LaTeX input .tex file, is nothing more than a stream of numeric (integer) values which are being used as a mechanism to represent characters of text; consequently, processing a text file involves scanning (reading/processing) a series of integer values. However, an important question arises: which set of characters is actually represented by the integer values contained in a particular text file? In other words, how have those integer values been encoded: what is the correct (intended) "mapping" (encoding) from integers in the text file to the corresponding characters they are supposed to represent?
Text files can be generated within innumerable computing environments: across different countries/continents, using a multitude of different devices, operating systems and editing tools. Originators of text files could, potentially, use or apply different text encodings according to local requirements, such as language, when generating and storing the sequence of integer values chosen to represent the individual characters contained in a text file. This may work well if the generated text files stayed within compatible technical ecosystems, which use the same encoding, but what would happen when those files are transferred to completely different environments—because many text files do not contain any information which indicates the encoding used to generate them.
Clearly, the producer (originator) and consumer (user) of textual data must, somehow, agree on the encoding (mapping) being used, otherwise encoding errors are likely to arise due to mismatches between the integer data in the file and the set of characters it is assumed to represent. In addition to correctly mapping text file integer values to characters, any subsequent visual display of those characters requires some form of font that is capable of providing the data (shapes, or even bitmaps) to output a visual representation of the desired characters.

Input encoding: inputenc, UTF-8 and a change to LaTeX in 2018
Historically, a variety of 8-bit encodings were used to generate/process text files, including LaTeX inputs. To cut short a very long story, the developers of LaTeX created the inputenc package to address encoding issues—allowing text files, created using various encodings, to be transferred between disparate LaTeX installations. 
However, over time, users/software developers moved away from multiple 8-bit encodings to using Unicode and its UTF-8 encoding scheme, which became the de facto option for encoding text files. Prior to 2018, to process UTF-8 encoded files LaTeX document preambles included the line 



\usepackage[utf8]{inputenc}



Readers might observe that the example above does not include the line \usepackage[utf8]{inputenc} in the document preamble: why is that? This is due to an important change to LaTeX introduced in 2018: a switch to UTF-8 as the default input encoding. Documents typeset with pdfLaTeX, and using UTF-8 encoded text, including those created and typeset on Overleaf, no longer need to include \usepackage[utf8]{inputenc} but is does no harm to do so. For further information see the April 2018 issue of LaTeX News and the Overleaf blog post TeX Live upgrade—September 2019. All text files created on Overleaf are encoded using UTF-8.

Output encoding: the fontenc package
To correctly typeset characters contained within input files, those characters need to be mapped to the appropriate output shapes (glyphs) contained in fonts used to typeset the document. This “output encoding” is handled by another package called fontenc. 
To use fontenc include the following line in your document preamble, using an encoding, such as the T1 encoding, which supports accented characters contained in Latin-based languages:



\usepackage[T1]{fontenc}



Using the T1 font encoding, via \usepackage[T1]{fontenc}, has other benefits:

The default OT1 LaTeX font (“output”) encoding is 7-bit, meaning it can only encode 128 characters and does not include (enable) access to genuine accented character shapes (glyphs) contained in fonts. The OT1 encoding causes TeX engines to “fake” accented characters by typesetting (combining) a base character with an overlaid, and shifted, accent character.
If the TeX engine has to resort to construction of accented characters, this has implications for copy/paste of text from PDFs: copying text containing constructed accented characters will result in two separate characters being pasted: the base character and the accent character. Using the T1 encoding avoids this.
Using the T1 encoding, to access genuine accented characters, improves hyphenation.
LaTeX T1 font encoding
The following chart lists the T1 font encoding. It is reproduced from page 22 of the document LaTeX font encodings which is available on CTAN.



Language-specific packages and commands
To extend the default capabilities of LaTeX, providing proper hyphenation and translation of the names of document elements, import the babel package using the spanish language option.



\usepackage[spanish]{babel}



As you may see in the example using pdfLaTeX, instead of “Abstract” and “Contents” the Spanish versions “Resumen” and “Índice” are used.
Babel provides additional localization support for Spanish via the parameters mexico and mexico-com, the latter will use a comma instead of a dot as the decimal marker in mathematical mode. These options can be passed to the babel package along with Spanish support:



\usepackage[spanish, mexico]{babel}



Some mathematical commands are also localized for Spanish, as shown in the following example which also demonstrates Spanish quotation marks (<< and >>):



\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage[spanish]{babel}
\begin{document}
\section{Sección con teoremas}
Esta sección es para ver que pasa con los comandos que definen texto

\[ \lim x =  \tg {\theta} + \max \{3.52, 4.22\} \]

El paquete también agrega un comportamiento especial a <<éstas márcas para hacer citas textuales>> tal como lo indican las relgas de la RAE.
\end{document}



 Open this pdfLaTeX example in Overleaf

This example produces the following output:

Here, you can see that \max and \lim are displayed using accented characters. For a complete list of mathematical symbols in Spanish see the reference guide. Details of additional features for localization of math commands can be found in the (Spanish) documentation for the babel-spanish package.
The character sequences << and >> are used to produce Spanish quotation marks, which can conflict with some packages. See the (Spanish) documentation of the babel-spanish package for further details on use of quotation marks.

Hyphenation
The babel package usually does a good job of providing language-specific hyphenation capabilities, but if a particular word does not hyphenate correctly there are packages to assist. For example, you can add the hyphenat package in your preamble:




 \usepackage{hyphenat}
 \hyphenation{mate-máti-cas recu-perar}




The first command will import the package hyphenat and the second line is a list of space-separated words with defined hyphenation rules. On the other side, if you want a word not to be broken automatically, use the {\nobreak word} command within your document.

Reference guide
Spanish LaTeX commands in mathematical mode



LaTeX command

Output


\sen
sen


\tg
tg


\arcsen
arc sen


\arccos
arc cos


\arctg
arc tg


\lim
lím


\limsup
lím sup


\liminf
lím inf


\max
máx


\inf
ínf


\min
mín


Further reading
For more information see

Documentation for the babel-spanish package
Supporting modern fonts with XƎLaTeX
Typesetting quotations and quotation marks
International language support
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Arabic
The not so short introduction to LaTeX2ε
LaTeX/Internationalization on WikiBooks
LaTeX/Special_Characters on WikiBooks
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Multilingual typesetting on Overleaf using polyglossia and fontspec - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsMultilingual typesetting on Overleaf using polyglossia and fontspec
Introduction
This article provides an overview of typesetting multilingual documents on Overleaf using the XeLaTeX (or LuaLaTeX) compiler in conjunction with the fontspec and polyglossia LaTeX packages.
For many, if not most, users their default choice of TeX engine is pdfTeX, which, unlike XeTeX and LuaTeX, does not have a built-in capability to read UTF-8 encoded text files. Using pdfTeX makes typesetting certain languages in LaTeX very complicated, especially those that do not use a Latin-based script. Some packages—such as inputenc, fontenc and arabtex—provide support to pdfTeX for typesetting non-Latin languages and scripts, but not all glyphs and characters may be supported or rendered correctly in the output PDF, even if you’ve used the utf8 or utf8x option with inputenc.
For an in-depth discussion of UTF-8, Unicode encoding and the XeTeX/LuaTeX engines, the Overleaf article Unicode, UTF-8 and multilingual text: An introduction is a fascinating read.
Enter XeTeX and LuaTeX
The XeTeX and LuaTeX engines can directly read/process UTF-8 encoded text; consequently, they offer native support for Unicode—they can also work with TrueType and OpenType fonts directly. These properties make them a natural choice for typesetting multilingual or non-Latin documents in LaTeX, producing outputs like these:
  
These examples can be found in the Overleaf Gallery: How to Write Multilingual Text with Different Scripts in LaTeX on Overleaf and Multilingual "Thank-You".
If you’re looking to typeset Chinese, Japanese and Korean, have a look at these articles:

Chinese
Japanese
Korean

Xe(La)TeX is still useful for these languages, but more specialised TeX engines are available, specifically designed for typesetting CJK languages—such as pTeX for typesetting Japanese.
Note that if your cursor seems to be misbehaving whilst editing text in certain languages on Overleaf, you may want to click on the Overleaf Menu button (situated above the project file list) and change the “Font Family” option. You could also try changing your browser’s monospaced font preferences or using Overleaf’s Rich Text view instead. However, at the time of writing, the Source and Rich Text views may not (yet) fully support right-to-left text editing at the level of functionality we are aiming to achieve.
Changing the project’s compiler
The fontspec and polyglossia packages require the XeLaTeX or LuaLaTeX compiler, so you’ll need to set up your Overleaf project to use either of those compilers. Detailed instructions can be found in our article Choosing a LaTeX Compiler but here is a brief video clip showing how to set the compiler for your project:




Once you’re compiling with XeLaTeX or LuaLaTeX, you can (should) remove the inputenc and fontenc packages from your .tex file’s preamble because these Unicode-capable engines will assume input (text) files are UTF-8 encoded. Incidentally, all text files uploaded to Overleaf are converted to UTF-8 so you should usually use utf8 with inputenc when working with the pdfLaTeX and LaTeX compilers on Overleaf.
If your entire document involves just one language
When using the fontspec package you might get away with only setting up a main (serif) font, a sans-serif font and probably a monospaced font designed to support the language you are typesetting—there’s a catch, but we’ll revisit that later in the article. For example, if your entire document is in Greek, with some English words, you can simply write

\usepackage{fontspec}
\setmainfont[Script=Greek]{GFS Artemisia}
\setsansfont[Script=Greek]{GFS Neohellenic}
\setmonofont[Script=Greek]{Noto Mono}
. . .
Το Lorem Ipsum είναι \textsf{απλά} ένα κείμενο χωρίς νόημα
για τους επαγγελματίες της \texttt{τυπογραφίας} και στοιχειοθεσίας.


You can choose fonts from a list of available TrueType and OpenType fonts. The Ligatures=TeX option is added automatically for \setmainfont and \setsansfont, so you don’t have to add that yourself. (\setromanfont is an alias of \setmainfont.)
The LaTeX code above produces the following output:

Multiple languages/scripts in the same document: Introducing polyglossia
If your document contains non-trivial amounts of text in multiple languages, the polyglossia package is helpful to help take care of language-specific typesetting conventions and hyphenation.

\usepackage{fontspec}
\setmainfont{FreeSerif}
\setsansfont{FreeSans}
\setmonofont{FreeMono}

\usepackage{polyglossia}
\setdefaultlanguage{french}
\setotherlanguages{english,russian,thai}

\begin{document}
\begin{abstract}
Le Lorem Ipsum est simplement du faux texte employé dans 
la composition et la mise en page avant impression.
\end{abstract}

Merci. \textenglish{Thank you.} \textrussian{Спасибо.} Et plus de
texte en français!

Le Lorem Ipsum est le faux texte standard ...

\begin{english}
Lorem Ipsum is simply dummy text ...
\end{english}

\begin{russian}
Lorem Ipsum - это текст-`\textsf{рыба}', часто используемый в 
\texttt{печати} и вэб-дизайне. ...
\end{russian}

\begin{thai}
\XeTeXlinebreaklocale "th_TH"
\textenglish{Lorem Ipsum} คือ เนื้อหาจำลองแบบเรียบๆ ที่ใช้กันในธุรกิจงานพิมพ์หรืองานเรียงพิมพ์
\end{thai}



polyglossia lets you set the main language of the document with \setdefaultlanguage (default is English) and (possibly multiple) ‘other’ languages with \setotherlanguages. (\setmainlanguage is an alias of \setdefaultlanguage.) If you expect to be using just one other foreign language you can use the singular \setotherlanguage. The language names are the same as those used by babel.
We’ve prepared a small example of a (primarily) French document which also contains some English, Russian and Thai text. We’ve decided to use the FreeSerif, FreeSans and FreeMono typefaces.
Because the document’s main language is french, the abstract environment automatically produces the heading ‘Résumé’. Notice how, at the end of the first paragraph, the exclamation mark is typeset using the French-spacing typesetting convention: it is set apart from ‘français’ even though it follows immediately after the word français in the source code.
In the main text, short English, Cyrillic and Thai text snippets can be included in a paragraph of French text with \textenglish{Thank you}, \textrussian{Спасибо} and \textthai{ขอบคุณ}. Generally, you can use \textLANGUAGE{...} to typeset text in any LANGUAGE that has been declared by \setdefaultlanguage and \setotherlanguages. Because the document’s main (serif) font is FreeSerif, and FreeSerif contains glyphs for Latin, Cyrillic and Thai (and more!) scripts, fontspec and polyglossia can use it to render all these texts into the output PDF.
For longer paragraphs of text in foreign/other languages, it is recommended to use \begin{LANGUAGE}...\end{LANGUAGE}, e.g. \begin{russian}...\end{russian}, \begin{thai}...\end{thai}. In the case of Arabic you can’t use \begin{arabic}...\end{arabic}; you’ll have to write \begin{Arabic}...\end{Arabic} instead, while \textarabic{...} is still valid.
Some considerations may be needed for certain languages: for instance, within the thai environment, the words Lorem Ipsum need to be wrapped in a \textenglish{...} (or \textfrench{...}) command to ensure they are rendered using the Latin-script glyphs.
At this point you might ask: If FreeSerif is so versatile and contains glyphs for Russian and Thai anyway, why would we still need to use \textrussian, \begin{english}...\end{english} etc? Wouldn’t that be redundant? Let’s see what happens when we remove the \begin{english}...\end{english} and \begin{russian}...\end{russian} environments:

Certainly, the Latin and Cyrillic glyphs are all rendered in the output PDF, but note that some words are now hyphenated incorrectly: ‘unk-nown’ and ‘unchan-ged’—and стандартной isn’t hyphenated at all. Without the language-switching environments, the compiler thinks these text items are still in the French language and attempts to typeset them using French conventions. The compiler tries to apply French hyphenation rules which, naturally, produce incorrect results. This is why typography and typesetting is so much more than just font design and selection: they are very language- and culture-specific disciplines.
Revisiting our first Greek example, we now see why it is a good idea to load polyglossia and use \setdefaultlanguage{greek}: to ensure the document is typeset following Greek conventions.
Mixing right-to-left (RTL) and left-to-right (LTR) languages
You need to be careful when typesetting a mixture of right-to-left (RTL) scripts, such as Arabic or Hebrew, and left-to-right (LTR) scripts in the same document. Consider the following small Arabic document with an English word, using Amiri as the main font:

\usepackage{polyglossia}
\setdefaultlanguage{arabic}
\setmainfont{Amiri}
\begin{document}
ما هو differentiation
\end{document}


which produces:

The text is automatically set right-to-left, starting on the right-hand edge of the page. The word “differentiation” itself is typeset correctly as left-to-right text–but wait, no it’s not! It’s rendered as “dffirentiation” in the output! What’s going on?
The Amiri font does have glyphs for Latin alphabets but here the text differentiation is not marked as English: the compiler treats differentiation as right-to-left text, as if it were a sequence of Arabic characters. During typesetting, the original sequence iff is processed as ffi (i.e., as RTL text) and Amiri’s ligature glyph for “ffi” is typeset. Marking the word with \textenglish{...} ensures it is  interpreted correctly as left-to-right text.

\setmainfont{Amiri}
\setotherlanguage{english}
\newfontfamily\englishfont{TeX Gyre Termes}
\begin{document}
ما هو \textenglish{differentiation}



Note: If you’re used to the babel package commands you’ll be happy to hear that the commands \selectlanguage, \foreignlanguage and the environment otherlanguage are also supported by polyglossia.
Language-specific options
Some languages support additional options for customisation; for example, greek accepts a variant=ancient, mono or poly option for ancient, monotonic or polytonic Greek; hindi can be configured with numerals=western or devanagari.  See the polyglossia package documentation for details.
These can be specified when loading the language:

\setdefaultlanguage[variant=poly]{greek}
\setotherlanguage[numerals=western]{hindi}


or later at anytime:

\setkeys{greek}{variant=ancient}


or even locally for a specific environment:

\begin{greek}[variant=ancient]
...
\end{greek}


Specifying fonts for specific languages
You can specify the font used for different languages. Suppose you’d like to typeset all English text (contained in our previous example) in italics; you could write:

\newfontfamily\englishfont{FreeSerif Italic}



You can of course use something even more flamboyant:

\newfontfamily\englishfont{Chancery Uralic}



This mechanism of setting fonts for different languages or scripts is especially important when you use a main font that does not have glyphs for all scripts or languages in your document. Suppose we now decide to use Caladea as the main document font:

\setmainfont{Caladea}


Upon compilation we would see the following error:


Package polyglossia Error: The current roman font
does not contain the Cyrillic script!

(polyglossia)                Please define
\cyrillicfont with \newfontfamily.

See the polyglossia package documentation for
explanation.
Type  H <return>  for immediate help.
 ...

l.15 \select@language {russian}

Package polyglossia Error: The current roman font
does not contain the Thai script!

(polyglossia)                Please define
\thaifont with \newfontfamily.

See the polyglossia package documentation for
explanation.
Type  H <return>  for immediate help.
 ...

l.23 \select@language {thai}
...



We are now obligated to specify which fonts to use for Cyrillic and Thai scripts. Again, you can refer to the list of available TrueType and OpenType fonts on Overleaf.

\newfontfamily\cyrillicfont[Script=Cyrillic]{Charis SIL}
\newfontfamily\thaifont[Script=Thai]{Garuda}



Note: it is outside the scope of this article to address issues relating to choices of aesthetically-pleasing and typographically-compatible font combinations.
Notice that we’ve defined \cyrillicfont instead of \russianfont, i.e. we defined a font for the Cyrillic script rather than the Russian language. The advantage of defining \cyrillicfont is that if, for example, serbian is also a defined language in your project, then \textserbian would automatically use the defined \cyrillicfont. If you had defined only \russianfont, then using \textserbian would again complain about “the current roman font does not contain the Cyrillic script” and you would need to define \cyrillicfont anyway — unless you did mean to use a different font for Serbian text!
Another similar scenario is the Devanagari script, which is used for the Hindi and Sanskrit languages; or the Arabic script used for Arabic and Farsi (Persian).

\setdefaultlanguage{english}
\setotherlanguages{hindi,sanskrit}
\newfontfamily\devanagarifont[Script=Devanagari]{Lohit Devanagari}
...
Hindi: \texthindi{हिन्दी}
Sanskrit: \textsanskrit{संस्कृतम्}



When using \newfontfamily it is necessary to specify the Script,  otherwise some glyphs may be rendered incorrectly; for example, if we had written only \newfontfamily\thaifont{Garuda} the typeset result may be wrong (left image below)—the correct output is produced by adding [Script=Thai].
 Wrong:  Correct: 
Defining other font families
Let’s have a look at another example, this time with Hebrew:

\documentclass{article}
\usepackage{polyglossia}
\setdefaultlanguage[numerals=hebrew]{hebrew}
\setotherlanguage{english}
\newfontfamily\hebrewfont[Script=Hebrew]{Hadasim CLM}
\begin{document}
\section{מבוא}
זוהי עובדה מבוססת שדעתו של הקורא תהיה מוסחת עלידי טקטס קריא כאשר הוא יביט בפריסתו.  -
\end{document}



So far so good. Now suppose we were using a template originally created for an English document, which sets section headers in sans serif type using the titlesec package:

\RequirePackage{titlesec}
\titleformat{\section}{\Large\sffamily\bfseries}{\thesection}{1em}{}
\usepackage{polyglossia}
\setdefaultlanguage[numerals=hebrew]{hebrew}
...


We are confronted with the error message:


Package polyglossia Error: The current roman font
does not contain the Hebrew script!

(polyglossia)                Please define
\hebrewfont with \newfontfamily.

See the polyglossia package documentation for
explanation.
Type  H <return>  for immediate help.
 ...

l.27 \section{מבוא}



This is a bit confusing: didn’t we already define \hebrewfont to be Hadasim CLM? Well, it’s really because we haven’t specified a sans serif font for Hebrew. Let’s remedy this by adding a definition for \hebrewfontsf:

\newfontfamily\hebrewfontsf[Script=Hebrew]{Miriam CLM}


And now we have the output:

Should the need arise, we could also define a monospaced font to use with \hebrewfonttt.
Acknowledgements
All lorem ipsum snippets, in various languages, are from https://lipsum.com.


Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Articles - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsArticlesThis page provides a list of articles which focus on providing background technical information on a wide range of TeX- and LaTeX-related topics. New articles are continually added so be sure to bookmark and revisit this page!
Multi-part article series
A six-part series: How do TeX macros actually work?
A six-part article series on \expandafter, TeX tokens and expansion
Typesetting colour emoji using OpenType fonts
An overview of technologies supporting the use of colour emoji fonts in LaTeX
Background reading
What's in a Name: A Guide to the Many Flavours of TeX
The two modes of TeX engines: INI mode and production mode
An introduction to \endlinechar: How TeX reads lines from text files
TeX tokens
A New Series of Articles: TeX Tokens and Related Concepts—But Why (and How)?
What is a "TeX token"?
What is a TeX token list?
Kpathsea and file searching
An introduction to Kpathsea and how TeX engines search for files
LaTeX page layout
Taming LaTeX's Page Layout: A Visual Template and Toolset for Book Authors
LuaTeX
An Introduction to LuaTeX (Part 1): What is it—and what makes it so different?
An Introduction to LuaTeX (Part 2): Understanding \directlua
Using LuaTeX to run tools and utilities installed on Overleaf’s servers
Unicode, UTF-8 and multilingual work
Unicode, UTF-8 and multilingual text: An introduction
Understanding TeX boxes
Pandora’s \hbox: Using LuaTeX to Lift the Lid of TeX Boxes
How TeX Calculates Glue Settings in an \hbox
Boxes and Glue: A Brief, but Visual, Introduction Using LuaTeX
TeX tables
TeX Tables: How TeX Calculates Spanned Column Widths
Mathematical typesetting
OpenType-based math typesetting: An introduction to the STIX2 OpenType fonts
Miscellaneous topics
The Stoic Resilience of PDF Within a Digital Ecosystem
How to use latexmkrc with Overleaf: examples and techniques
How to create a multilingual, customisable CD disk jewel case calendar using LaTeX
A quick visual guide to creating table cells with diagonal lines in LaTeX
How to write in Markdown on Overleaf
Markdown into LaTeX with Style
LaTeX is More Powerful than you Think - Computing the Fibonacci Numbers and Turing Completeness
The TeX family tree: LaTeX, pdfTeX, XeTeX, LuaTeX and ConTeXt
Mathtools - for beautiful math
Using Latexdiff For Marking Changes To Tex Documents
How to draw Vector Graphics using TikZ in LaTeX
Getting started with BibLaTeX
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Learn LaTeX in 30 minutes - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsLearn LaTeX in 30 minutesThis introductory tutorial does not assume any prior experience of LaTeX but, hopefully, by the time you are finished, you will not only have written your first LaTeX document but also acquired sufficient knowledge and confidence to take the next steps toward LaTeX proficiency.

Contents

1 What is LaTeX?
2 Why learn LaTeX?
3 Writing your first piece of LaTeX
4 The preamble of a document
5 Including title, author and date information
6 Adding comments
7 Bold, italics and underlining
8 Adding images
9 Captions, labels and references
10 Creating lists in LaTeX

10.1 Unordered lists
10.2 Ordered lists


11 Adding math to LaTeX

11.1 Inline math mode
11.2 Display math mode
11.3 More complete examples


12 Basic document structure

12.1 Abstracts
12.2 Paragraphs and new lines
12.3 Chapters and sections


13 Creating tables

13.1 Creating a basic table in LaTeX
13.2 Adding borders
13.3 Captions, labels and references


14 Adding a Table of Contents
15 Downloading your finished document
16 Finding and using LaTeX packages

16.1 Loading packages
16.2 Finding information about packages: CTAN
16.3 Packages available on Overleaf: Introducing TeX Live




What is LaTeX?
LaTeX (pronounced “LAY-tek” or “LAH-tek”) is a tool for typesetting professional-looking documents. However, LaTeX’s mode of operation is quite different to many other document-production applications you may have used, such as Microsoft Word or LibreOffice Writer: those “WYSIWYG” tools provide users with an interactive page into which they type and edit their text and apply various forms of styling. LaTeX works very differently: instead, your document is a plain text file interspersed with LaTeX commands used to express the desired (typeset) results. To produce a visible, typeset document, your LaTeX file is processed by a piece of software called a TeX engine which uses the commands embedded in your text file to guide and control the typesetting process, converting the LaTeX commands and document text into a professionally typeset PDF file. This means you only need to focus on the content of your document and the computer, via LaTeX commands and the TeX engine, will take care of the visual appearance (formatting).

Why learn LaTeX?
Various arguments can be proposed for, or against, learning to use LaTeX instead of other document-authoring applications; but, ultimately, it is a personal choice based on preferences, affinities, and documentation requirements. 
Arguments in favour of LaTeX include:

support for typesetting extremely complex mathematics, tables and technical content for the physical sciences;
facilities for footnotes, cross-referencing and management of bibliographies;
ease of producing complicated, or tedious, document elements such as indexes, glossaries, table of contents, lists of figures;
being highly customizable for bespoke document production due to its intrinsic programmability and extensibility through thousands of free add-on packages.
Overall, LaTeX provides users with a great deal of control over the production of documents which are typeset to extremely high standards. Of course, there are types of documents or publications where LaTeX doesn’t shine, including many “free form” page designs typically found in magazine-type publications.
One important benefit of LaTeX is the separation of document content from document style: once you have written the content of your document, its appearance can be changed with ease. Similarly, you can create a LaTeX file which defines the layout/style of a particular document type and that file can be used as a template to standardise authorship/production of additional documents of that type; for example, this allows scientific publishers to create article templates, in LaTeX, which authors use to write papers for submission to journals. Overleaf has a gallery containing thousands of templates, covering an enormous range of document types—everything from scientific articles, reports and books to CVs and presentations. Because these templates define the layout and style of the document, authors need only to open them in Overleaf—creating a new project—and commence writing to add their content.

Writing your first piece of LaTeX
The first step is to create a new LaTeX project. You can do this on your own computer by creating a new .tex file; alternatively, you can start a new project in Overleaf.
Let’s start with the simplest working example, which can be opened directly in Overleaf:



\documentclass{article}
\begin{document}
First document. This is a simple example, with no 
extra parameters or packages included.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




You can see that LaTeX has automatically indented the first line of the paragraph, taking care of that formatting for you. Let’s have a closer look at what each part of our code does.
The first line of code, \documentclass{article}, declares the document type known as its class, which controls the overall appearance of the document. Different types of documents require different classes; i.e., a CV/resume will require a different class than a scientific paper which might use the standard LaTeX article class. Other types of documents you may be working on may require different classes such as book or report. To get some idea of the many LaTeX class types available,  visit the relevant page on CTAN (Comprehensive TeX Archive Network).
Having set the document class, our content, known as the body of the document, is written between the \begin{document} and \end{document} tags. After opening the example above, you can make changes to the text and, when finished, view the resulting typeset PDF by recompiling the document. To do this in Overleaf, simply hit Recompile, as demonstrated in this brief video clip:





Any Overleaf project can be configured to recompile automatically each time it is edited: click the small arrow next to the Recompile button and set Auto Compile to On, as shown in the following screengrab:

Having seen how to add content to our document, the next step is to give it a title. To do this, we must talk briefly about the preamble.

The preamble of a document
The screengrab above shows Overleaf storing a LaTeX document as a file called main.tex: the .tex file extension is, by convention, used when naming files containing your document’s LaTeX code. 
The previous example showed how document content was entered after the \begin{document} command; however, everything in your .tex file appearing before that point is called the preamble, which acts as the document’s “setup” section. Within the preamble you define the document class (type) together with specifics such as languages to be used when writing the document; loading packages you would like to use (more on this later), and it is where you’d apply other types of configuration. 
A minimal document preamble might look like this:




\documentclass[12pt, letterpaper]{article}
\usepackage{graphicx}




where \documentclass[12pt, letterpaper]{article} defines the overall class (type) of document. Additional parameters, which must be separated by commas, are included in square brackets ([...]) and used to configure this instance of the article class; i.e., settings we wish to use for this particular article-class-based document. 
In this example, the two parameters do the following: 

12pt sets the font size
letterpaper sets the paper size
Of course other font sizes, 9pt, 11pt, 12pt, can be used, but if none is specified, the default size is 10pt. As for the paper size, other possible values are a4paper and legalpaper. For further information see the article about page size and margins.
The preamble line 




\usepackage{graphicx}




is an example of loading an external package (here, graphicx) to extend LaTeX’s capabilities, enabling it to import external graphics files. LaTeX packages are discussed in the section Finding and using LaTeX packages.

Including title, author and date information
Adding a title, author and date to our document requires three more lines in the preamble (not the main body of the document). Those lines are:

\title{My first LaTeX document}: the document title
\author{Hubert Farnsworth}: here you write the name of the author(s) and, optionally, the \thanks command within the curly braces:
\thanks{Funded by the Overleaf team.}: can be added after the name of the author, inside the braces of the author command. It will add a superscript and a footnote with the text inside the braces. Useful if you need to thank an institution in your article.
\date{August 2022}: you can enter the date manually or use the command \today to typeset the current date every time the document is compiled
With these lines added, your preamble should look something like this:




\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}




To typeset the title, author and date use the \maketitle command within the body of the document:




\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}




The preamble and body can now be combined to produce a complete document which can be opened in Overleaf:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Adding comments
LaTeX is a form of “program code”, but one which specializes in document typesetting; consequently, as with code written in any other programming language, it can be very useful to include comments within your document. A LaTeX comment is a section of text that will not be typeset or affect the document in any way—often used to add “to do” notes; include explanatory notes; provide in-line explanations of tricky macros or comment-out lines/sections of LaTeX code when debugging. 
To make a comment in LaTeX, simply write a % symbol at the beginning of the line, as shown in the following code which uses the example above:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!

% This line here is a comment. It will not be typeset in the document.
\end{document}



 Open this example in Overleaf.

This example produces output that is identical to the previous LaTeX code which did not contain the comment.

Bold, italics and underlining
Next, we will now look at some text formatting commands:

Bold: bold text in LaTeX is typeset using the \textbf{...} command.
Italics: italicised text is produced using the \textit{...} command.
Underline: to underline text use the \underline{...} command.
The next example demonstrates these commands:



Some of the \textbf{greatest}
discoveries in \underline{science} 
were made by \textbf{\textit{accident}}.



 Open this example in Overleaf.

This example produces the following output:




Another very useful command is \emph{argument}, whose effect on its argument depends on the context. Inside normal text, the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text—see the next example:



Some of the greatest \emph{discoveries} in science 
were made by accident.

\textit{Some of the greatest \emph{discoveries} 
in science were made by accident.}

\textbf{Some of the greatest \emph{discoveries} 
in science were made by accident.}



 Open this \emph example in Overleaf.

This example produces the following output:





Note: some packages, such as Beamer, change the behaviour of the \emph command.
Adding images
In this section we will now look at how to add images to a LaTeX document—note that you need to upload images to your Overleaf project.
The following example demonstrates how to include a picture:




\documentclass{article}
\usepackage{graphicx} %LaTeX package to import graphics
\graphicspath{{images/}} %configuring the graphicx package
 
\begin{document}
The universe is immense and it seems to be homogeneous, 
on a large scale, everywhere we look.

% The \includegraphcs command is 
% provided (implemented) by the 
% graphicx package
\includegraphics{universe}  
 
There's a picture of a galaxy above.
\end{document}



 Open this image example in Overleaf.
This example produces the following output:




Importing graphics into a LaTeX document needs an add-on package which provides the commands and features required to include external graphics files. The above example loads the  graphicx package which, among many other commands, provides \includegraphics{...} to import graphics and \graphicspath{...} to advise LaTeX where the graphics are located.
To use the graphicx package, include the following line in your Overleaf document preamble:




\usepackage{graphicx}




In our example the command \graphicspath{{images/}} informs LaTeX that images are kept in a folder named images, which is contained in the current directory:

The \includegraphics{universe} command does the actual work of inserting the image in the document. Here, universe is the name of the image file but without its extension. 
Note:

Although the full file name, including its extension, is allowed in the \includegraphics command, it’s considered best practice to omit the file extension because it will prompt LaTeX to search for all the supported formats.
Generally, the graphic’s file name should not contain white spaces or multiple dots; it is also recommended to use lowercase letters for the file extension when uploading image files to Overleaf.
More information on LaTeX packages can be found at the end of this tutorial in the section Finding and using LaTeX packages. 

Captions, labels and references
Images can be captioned, labelled and referenced by means of the figure environment, as shown below:




\documentclass{article}
\usepackage{graphicx}
\graphicspath{{images/}}
 
\begin{document}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.75\textwidth]{mesh}
    \caption{A nice plot.}
    \label{fig:mesh1}
\end{figure}
 
As you can see in figure \ref{fig:mesh1}, the function grows near the origin. This example is on page \pageref{fig:mesh1}.

\end{document}



 Open this image example in Overleaf.
This example produces the following output:




There are several noteworthy commands in the example:

\includegraphics[width=0.75\textwidth]{mesh}: This form of \includegraphics instructs LaTeX to set the figure’s width to 75% of the text width—whose value is stored in the \textwidth command.
\caption{A nice plot.}: As its name suggests, this command sets the figure caption which can be placed above or below the figure. If you create a list of figures this caption will be used in that list.
\label{fig:mesh1}: To reference this image within your document you give it a label using the \label command. The label is used to generate a number for the image and, combined with the next command, will allow you to reference it.
\ref{fig:mesh1}: This code will be substituted by the number corresponding to the referenced figure.
Images incorporated in a LaTeX document should be placed inside a figure environment, or similar, so that LaTeX can automatically position the image at a suitable location in your document.
Further guidance is contained in the following Overleaf help articles:

Positioning of Figures
Inserting Images
Creating lists in LaTeX
You can create different types of list using environments, which are used to encapsulate the LaTeX code required to implement a specific typesetting feature. An environment starts with \begin{environment-name} and ends with \end{environment-name} where environment-name might be figure, tabular or one of the list types: itemize for unordered lists or enumerate for ordered lists.

Unordered lists
Unordered lists are produced by the itemize environment. Each list entry must be preceded by the \item command,  as shown below: 



\documentclass{article}
\begin{document}
\begin{itemize}
  \item The individual entries are indicated with a black dot, a so-called bullet.
  \item The text in the entries may be of any length.
\end{itemize}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





You can also open this  larger Overleaf project
 which demonstrates various types of LaTeX list.
Ordered lists
Ordered lists use the same syntax as unordered lists but are created using the enumerate environment:



\documentclass{article}
\begin{document}
\begin{enumerate}
  \item This is the first entry in our list.
  \item The list numbers increase with each entry we add.
\end{enumerate}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




As with unordered lists, each entry must be preceded by the \item command which, here, automatically generates the numeric ordered-list label value, starting at 1.

For further information you can open this  larger Overleaf project
 which demonstrates various types of LaTeX list or visit our dedicated help article on LaTeX lists, which provides many more examples and shows how to create customized lists.
Adding math to LaTeX
One of the main advantages of LaTeX is the ease with which mathematical expressions can be written. LaTeX provides two writing modes for typesetting mathematics:

inline math mode used for writing formulas that are part of a paragraph
display math mode used to write expressions that are not part of a text or paragraph and are typeset on separate lines
Inline math mode
Let’s see an example of inline math mode:



\documentclass[12pt, letterpaper]{article}
\begin{document}
In physics, the mass-energy equivalence is stated 
by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset inline-mode math you can use one of these delimiter pairs: \( ... \), $ ... $ or \begin{math} ... \end{math}, as demonstrated in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
\begin{math}
E=mc^2
\end{math} is typeset in a paragraph using inline math mode---as is $E=mc^2$, and so too is \(E=mc^2\).
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Display math mode
Equations typeset in display mode can be numbered or unnumbered, as in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
The mass-energy equivalence is described by the famous equation
\[ E=mc^2 \] discovered in 1905 by Albert Einstein. 

In natural units ($c = 1$), the formula expresses the identity
\begin{equation}
E=m
\end{equation}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset display-mode math you can use one of these delimiter pairs: \[ ... \], \begin{displaymath} ... \end{displaymath} or \begin{equation} ... \end{equation}. Historically, typesetting display-mode math required use of $$ characters delimiters, as in $$ ... display math here ...$$, but  this method is no longer recommended: use LaTeX’s delimiters \[ ... \] instead.

More complete examples
The following examples demonstrate a range of mathematical content typeset using LaTeX. 



\documentclass{article}
\begin{document}
Subscripts in math mode are written as $a_b$ and superscripts are written as $a^b$. These can be combined and nested to write expressions such as

\[ T^{i_1 i_2 \dots i_p}_{j_1 j_2 \dots j_q} = T(x^{i_1},\dots,x^{i_p},e_{j_1},\dots,e_{j_q}) \]
 
We write integrals using $\int$ and fractions using $\frac{a}{b}$. Limits are placed on integrals using superscripts and subscripts:

\[ \int_0^1 \frac{dx}{e^x} =  \frac{e-1}{e} \]

Lower case Greek letters are written as $\omega$ $\delta$ etc. while upper case Greek letters are written as $\Omega$ $\Delta$.

Mathematical operators are prefixed with a backslash as $\sin(\beta)$, $\cos(\alpha)$, $\log(x)$ etc.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The next example uses the equation* environment which is provided by the amsmath package, so we need to add the following line to our document preamble:




\usepackage{amsmath}% For the equation* environment




For further information on using amsmath see our help article.



\documentclass{article}
\usepackage{amsmath}% For the equation* environment
\begin{document}
\section{First example}

The well-known Pythagorean theorem \(x^2 + y^2 = z^2\) was proved to be invalid for other exponents, meaning the next equation has no integer solutions for \(n>2\):

\[ x^n + y^n = z^n \]

\section{Second example}

This is a simple math expression \(\sqrt{x^2+1}\) inside text. 
And this is also the same: 
\begin{math}
\sqrt{x^2+1}
\end{math}
but by using another command.

This is a simple math expression without numbering
\[\sqrt{x^2+1}\] 
separated from text.

This is also the same:
\begin{displaymath}
\sqrt{x^2+1}
\end{displaymath}

\ldots and this:
\begin{equation*}
\sqrt{x^2+1}
\end{equation*}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The possibilities with math in LaTeX are endless so be sure to visit our help pages for advice and examples on specific topics:

Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Fractions and Binomials
Aligning Equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Basic document structure
Next, we explore abstracts and how to partition a LaTeX document into different chapters, sections and paragraphs.

Abstracts
Scientific articles usually provide an abstract which is a brief overview/summary of their core topics, or arguments. The next example demonstrates typesetting an abstract using LaTeX’s abstract environment:



\documentclass{article}
\begin{document}
\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Paragraphs and new lines
With the abstract in place, we can begin writing our first paragraph. The next example demonstrates: 

how a new paragraph is created by pressing the "enter" key twice, ending the current line and inserting a subsequent blank line;
how to start a new line without starting a new paragraph by inserting a manual line break using the \\ command, which is a double backslash; alternatively, use the \newline command.
The third paragraph in this example demonstrates use of the commands \\ and \newline:



\documentclass{article}
\begin{document}

\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}

After our abstract we can begin the first paragraph, then press ``enter'' twice to start the second one.

This line will start a second paragraph.

I will start the third paragraph and then add \\ a manual line break which causes this text to start on a new line but remains part of the same paragraph. Alternatively, I can use the \verb|\newline|\newline command to start a new line, which is also part of the same paragraph.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Note how LaTeX automatically indents paragraphs—except immediately after document headings such as section and subsection—as we will see.
New users are advised that multiple \\ or \newlines should not used to “simulate” paragraphs with larger spacing between them because this can interfere with LaTeX’s typesetting algorithms. The recommended method is to continue using blank lines for creating new paragraphs, without any \\, and load the parskip package by adding \usepackage{parskip} to the preamble.
Further information on paragraphs can be found in the following articles:

Paragraphs and new lines
How to change paragraph spacing in LaTeX
LaTeX Error: There's no line here to end provides additional advice and guidance on using \\.
Chapters and sections
Longer documents, irrespective of authoring software, are usually partitioned into parts, chapters, sections, subsections and so forth. LaTeX also provides document-structuring commands but the available commands, and their implementations (what they do), can depend on the document class being used. By way of example, documents created using the book class can be split into parts, chapters, sections, subsections and so forth but the letter class does not provide (support) any commands to do that. 
This next example demonstrates commands used to structure a document based on the book class:



\documentclass{book}
\begin{document}

\chapter{First Chapter}

\section{Introduction}

This is the first section.

Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit. Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...

\section{Second Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\subsection{First Subsection}
Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...

\section*{Unnumbered Section}
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The names of sectioning commands are mostly self-explanatory; for example, \chapter{First Chapter} creates a new chapter titled First Chapter, \section{Introduction} produces a section titled Introduction, and so forth. Sections can be further divided into \subsection{...} and even \subsubsection{...}. The numbering of sections, subsections etc. is automatic but can be disabled by using the so-called starred version of the appropriate command which has an asterisk (*) at the end, such as \section*{...} and \subsection*{...}. 
Collectively, LaTeX document classes provide the following sectioning commands, with specific classes each supporting a relevant subset:

\part{part}
\chapter{chapter}
\section{section}
\subsection{subsection}
\subsubsection{subsubsection}
\paragraph{paragraph}
\subparagraph{subparagraph}
In particular, the \part and \chapter commands are only available in the report and book document classes. 
Visit the Overleaf article article about sections and chapters for further information about document-structure commands.

Creating tables
The following examples show how to create tables in LaTeX, including the addition of lines (rules) and captions. 

Creating a basic table in LaTeX
We start with an example showing how to typeset a basic table:



\begin{center}
\begin{tabular}{c c c}
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\  
 cell7 & cell8 & cell9    
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




The tabular environment is the default LaTeX method to create tables. You must specify a parameter to this environment, in this case {c c c} which advises LaTeX that there will be three columns and the text inside each one must be centred. You can also use r to right-align the text and l to left-align it. The alignment symbol & is used to demarcate individual table cells within a table row. To end a table row use the new line command \\. Our table is contained within a center environment to make it centred within the text width of the page.

Adding borders
The tabular environment supports horizontal and vertical lines (rules) as part of the table:

to add horizontal rules, above and below rows, use the \hline command
to add vertical rules, between columns, use the vertical line parameter |
In this example the argument is {|c|c|c|} which declares three (centred) columns each separated by a vertical line (rule); in addition, we use \hline to place a horizontal rule above the first row and below the final row:



\begin{center}
\begin{tabular}{|c|c|c|} 
 \hline
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\ 
 cell7 & cell8 & cell9 \\ 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Here is a further example:



\begin{center}
 \begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 \hline
 2 & 7 & 78 & 5415 \\
 \hline
 3 & 545 & 778 & 7507 \\
 \hline
 4 & 545 & 18744 & 7560 \\
 \hline
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Tip!

Creating tables in LaTeX can be time-consuming so you may want to use the TablesGenerator.com online tool to export LaTeX code for tabulars.
Captions, labels and references
You can caption and reference tables in much the same way as images. The only difference is that instead of the figure environment, you use the table environment.



Table \ref{table:data} shows how to add a table caption and reference a table.
\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{Table to test captions and labels.}
\label{table:data}
\end{table}



 Open this example in Overleaf.

This example produces the following output:





Adding a Table of Contents
Creating a table of contents is straightforward because the command \tableofcontents does almost all the work for you:



\documentclass{article}
\title{Sections and Chapters}
\author{Gubert Farnsworth}
\date{August 2022}
\begin{document}
  
\maketitle
  
\tableofcontents

\section{Introduction}
   
This is the first section.
      
Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...
       
\section*{Unnumbered Section}
\addcontentsline{toc}{section}{Unnumbered Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\section{Second Section}
       
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Sections, subsections and chapters are automatically included in the table of contents. To manually add entries, such as an unnumbered section, use the command \addcontentsline as shown in the example.

Downloading your finished document
The following brief video clip shows how to download your project’s source code or the typeset PDF file:





More information can be found in the Overleaf help article Exporting your work from Overleaf.

Finding and using LaTeX packages
LaTeX not only delivers significant typesetting capabilities but also provides a framework for extensibility through the use of add-on packages. Rather than attempting to provide commands and features that “try to do everything”, LaTeX is designed to be extensible, allowing users to load external bodies of code (packages) that provide more specialist typesetting capabilities or extend LaTeX’s built-in features—such as typesetting tables. As observed in the section Adding images, the graphicx package extends LaTeX by providing commands to import graphics files and was loaded (in the preamble) by writing




\usepackage{graphicx}




Loading packages
As noted above, packages are loaded in the document preamble via the \usepackage command but because (many) LaTeX packages provide a set of options, which can be used to configure their behaviour, the \usepackage command often looks like this:  




\usepackage[options]{somepackage}




The square brackets “[...]” inform LaTeX which set of options should be applied when it loads somepackage. Within the set of options requested by the user, individual options, or settings, are typically separated by a comma; for example, the geometry package provides many options to configure page layout in LaTeX, so a typical use of geometry  might look like this:




\usepackage[total={6.5in,8.75in},
top=1.2in, left=0.9in, includefoot]{geometry}




The geometry package is one example of a package written and contributed by members of the global LaTeX community and made available, for free, to anyone who wants to use it.
If a LaTeX package does not provide any options, or the user wants to use the default values of a package’s options, it would be loaded like this:




\usepackage{somepackage}




When you write \usepackage[...]{somepackage} LaTeX looks for a corresponding file called somepackage.sty, which it needs to load and process—to make the package commands available and execute any other code provided by that package. If LaTeX cannot find somepackage.sty it will terminate with an error, as demonstrated in the following Overleaf example:



\documentclass[12pt, letterpaper]{article}
\usepackage{somepackage}% a NON-EXISTENT package
\begin{document}
This will fail!
\end{document}



 Open this error-generating example on Overleaf

This example produces the following output:


Finding information about packages: CTAN
Packages are distributed through the Comprehensive TeX Archive Network, usually referred to as CTAN, which, at the time of writing, hosts 6287 packages from 2881 contributors. CTAN describes itself as 


... a set of Internet sites around the world that offer TEX-related material for download.


You can browse CTAN to look for useful packages; for example:

by topic
alphabetically (useful if you know the package name)
You can also use the search facility (at the top of the page).

Packages available on Overleaf: Introducing TeX Live
Once per year a (large) subset of packages hosted on CTAN, plus LaTeX-related fonts and other software, is collated and distributed as a system called TeX Live, which can be used to install your own (local) LaTeX setup. In fact, Overleaf’s servers also use TeX Live and are updated when a new version of TeX Live is released. Overleaf’s TeX Live updates are not immediate but take place a few months post-release, giving us time to perform compatibility tests of the new TeX Live version with the thousands of templates contained in our gallery. For example, here is our TeX Live 2022 upgrade announcement. 
Although TeX Live contains a (large) subset of CTAN packages it is possible to find an interesting package, such as igo for typesetting Go diagrams, which is hosted on CTAN but not included in (distributed by) TeX Live and thus unavailable on Overleaf. Some packages hosted on CTAN are not part of TeX Live due to a variety of reasons: perhaps a package is obsolete, has licensing problems, is extremely new (recently uploaded) or has platform dependencies, such as working on Windows but not Linux. 
New packages, and updates to existing ones, are uploaded to CTAN all year round but updates to TeX Live are distributed annually; consequently, packages contained in the current version of TeX Live will not be as up-to-date as those hosted on CTAN. Because Overleaf’s servers use TeX Live it is possible that packages installed on our servers—i.e., ones available to our users—might not be the very latest versions available on CTAN but, generally, this is unlikely to be problematic.

Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Using the History feature - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsUsing the History featureThe History feature lets you create and manage different versions of your project. You can view, download and compare project versions, previously deleted files can be restored, and content added by collaborators can be seen at a glance.

Contents

1 Update: A new version of History is being released

1.1 An important UI change: History actions have a new home
1.2 Accessing History actions in the new UI


2 Using the full History feature
3 How to access a project’s history

3.1 How to return to editing mode
3.2 What happens to the history if you copy a project?


4 How to label or download a version using the current (old) UI

4.1 How to label a project version in the current (old) UI
4.2 How to download a project version in the current (old) UI


5 How to label or download a version using the new UI

5.1 How to label a project version in the new UI
5.2 How to download a project version in the new UI


6 How to compare versions

6.1 Using the current (old) UI
6.2 Using the new UI


7 How to recover deleted files

7.1 Using the current (old) UI
7.2 Using the new UI


8 How to restore an old version of your project

8.1 Using the current (old) UI
8.2 Using the new UI




Update: A new version of History is being released
The History user interface (UI) has been redesigned but not yet released to all Overleaf users. For a short period of time, some users will continue with the old UI until the phased release is complete and the new UI becomes available to everyone. 

An important UI change: History actions have a new home
The new UI does not add extra features, but there is one important design change: the History actions now have a new home, as shown in the following graphic:


Accessing History actions in the new UI
Within the new UI you need to use the menu icons located on each project version:

To compare a range of versions, use the icons ,  or , located on the versions, to select the range you wish to compare.
To label or download a particular version, use the three-dot menu   which contains the options Label this version and Download this version.
Using the full History feature
Full Project History is a premium feature.  Overleaf premium features are available to participants in Overleaf Commons, members of group  subscriptions, and owners of individual subscriptions. For users on our free plan, the History panel will show edits made in the last 24 hours. If you need history from more than 24 hours ago, or if you’d like to test-drive the full History feature as well as other premium features, you can start a free trial here. 
Only the project owner needs to be on a premium subscription in order for them and any collaborators to access the full history.

How to access a project’s history
Click on History, located above the preview panel, to access the History feature. You can then select:

All history to view all available history versions.
Labels to access the list of labels you have created.
How to return to editing mode
To exit the History mode and return to normal editing mode, just click on History again.

What happens to the history if you copy a project?
A copied project starts with a completely new, fresh history—the original project’s history is not copied to the new project.

How to label or download a version using the current (old) UI
Use the action buttons located above the editor:


How to label a project version in the current (old) UI

Switch to the All history view.
Select the version you wish to label.
Choose Label this version.
Type the desired label into the popup window and select Add label.


How to download a project version in the current (old) UI

Switch to the All history view (or the Labels view).
Select the version you want to download.
Choose Download this version.
A .zip file, containing your project files, is generated and downloaded to your device.

How to label or download a version using the new UI
Switch to the All history view.
Select the three-dot menu  to access the actions Label this version and Download this version.


How to label a project version in the new UI

Switch to the All history view.Select the three-dot menu  on the version you wish to label.
Choose Label this version.
Type the desired label into the popup window and select Add label.


How to download a project version in the new UI

Switch to the All history view (or the Labels view).
Select the three-dot menu  on the version you want to download.
Choose Download this version.
A .zip file, containing your project files, is generated and downloaded to your device.

How to compare versions
The process differs slightly according to which version of the UI you are using. 

Using the current (old) UI
Select Compare to another version in the top bar of the History view to enable a viewing mode that adds  selectors (fours horizontal dots) to the currently selected history slice.
Drag the handles to choose the beginning and end point to generate a “diff” between the selected history “slices” or labels.
The view will update to identify any changed files in the file list, and also highlight changes, colored by collaborator, in the source code for each changed file.


Using the new UI
The use of drag-handles to select a range of versions to compare has been replaced by icons ,  or  which are located on the versions. Noting that project versions are listed in chronological order, with the newest at the top and older versions lower down the list, these icons perform the following actions:  

: compare up to this version
: compare from this version
: this icon appears for versions in the middle of the current comparison range. It provides a drop-down menu offering
Compare up to this version
Compare from this version
The following 45-second video demonstrates using the new UI to compare project versions.






How to recover deleted files
The History view lets you recover accidentally deleted files. Once again, the process differs slightly according to which version of the UI you are using.

Using the current (old) UI
In History view, click Compare to another version, and drag the handles to compare two versions before and after the file was deleted.
Select the deleted file from the list of project files (it will be crossed out).
Select Restore this deleted file.


Using the new UI

Switch to the All history view.
Select the project version in which the file was deleted.
Select the deleted file from the list of project files (it will be crossed out).
Select Restore file it to reinstate the file.
Overleaf restores the file and switches your project out of History mode and back to editing mode.



How to restore an old version of your project
Using the current (old) UI

Switch to the All history view (or the Labels view).
Select the version of the project you’d like to restore.
If you are seeing a differential view—one with changes between versions highlighted or crossed out—you should click View single version. 





Click Download project at this version.




Overleaf creates and downloads a zip file containing the set of files present in the selected project version.
You can now upload the zip to create a new project which recreates the version you downloaded. Note that the new project will not contain any of the original project’s history.

Using the new UI

Switch to the All history view (or the Labels view).Select the version of the project you'd like to restore.
Select the three-dot menu () to access the actions Label this version and Download this version.
Select Download this version:




Overleaf creates and downloads a zip file containing the set of files present in the selected project version.
You can now upload the zip to create a new project which recreates the version you downloaded. Note that the new project will not contain any of the original project’s history.

Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Learn LaTeX in 30 minutes - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsLearn LaTeX in 30 minutesThis introductory tutorial does not assume any prior experience of LaTeX but, hopefully, by the time you are finished, you will not only have written your first LaTeX document but also acquired sufficient knowledge and confidence to take the next steps toward LaTeX proficiency.

Contents

1 What is LaTeX?
2 Why learn LaTeX?
3 Writing your first piece of LaTeX
4 The preamble of a document
5 Including title, author and date information
6 Adding comments
7 Bold, italics and underlining
8 Adding images
9 Captions, labels and references
10 Creating lists in LaTeX

10.1 Unordered lists
10.2 Ordered lists


11 Adding math to LaTeX

11.1 Inline math mode
11.2 Display math mode
11.3 More complete examples


12 Basic document structure

12.1 Abstracts
12.2 Paragraphs and new lines
12.3 Chapters and sections


13 Creating tables

13.1 Creating a basic table in LaTeX
13.2 Adding borders
13.3 Captions, labels and references


14 Adding a Table of Contents
15 Downloading your finished document
16 Finding and using LaTeX packages

16.1 Loading packages
16.2 Finding information about packages: CTAN
16.3 Packages available on Overleaf: Introducing TeX Live




What is LaTeX?
LaTeX (pronounced “LAY-tek” or “LAH-tek”) is a tool for typesetting professional-looking documents. However, LaTeX’s mode of operation is quite different to many other document-production applications you may have used, such as Microsoft Word or LibreOffice Writer: those “WYSIWYG” tools provide users with an interactive page into which they type and edit their text and apply various forms of styling. LaTeX works very differently: instead, your document is a plain text file interspersed with LaTeX commands used to express the desired (typeset) results. To produce a visible, typeset document, your LaTeX file is processed by a piece of software called a TeX engine which uses the commands embedded in your text file to guide and control the typesetting process, converting the LaTeX commands and document text into a professionally typeset PDF file. This means you only need to focus on the content of your document and the computer, via LaTeX commands and the TeX engine, will take care of the visual appearance (formatting).

Why learn LaTeX?
Various arguments can be proposed for, or against, learning to use LaTeX instead of other document-authoring applications; but, ultimately, it is a personal choice based on preferences, affinities, and documentation requirements. 
Arguments in favour of LaTeX include:

support for typesetting extremely complex mathematics, tables and technical content for the physical sciences;
facilities for footnotes, cross-referencing and management of bibliographies;
ease of producing complicated, or tedious, document elements such as indexes, glossaries, table of contents, lists of figures;
being highly customizable for bespoke document production due to its intrinsic programmability and extensibility through thousands of free add-on packages.
Overall, LaTeX provides users with a great deal of control over the production of documents which are typeset to extremely high standards. Of course, there are types of documents or publications where LaTeX doesn’t shine, including many “free form” page designs typically found in magazine-type publications.
One important benefit of LaTeX is the separation of document content from document style: once you have written the content of your document, its appearance can be changed with ease. Similarly, you can create a LaTeX file which defines the layout/style of a particular document type and that file can be used as a template to standardise authorship/production of additional documents of that type; for example, this allows scientific publishers to create article templates, in LaTeX, which authors use to write papers for submission to journals. Overleaf has a gallery containing thousands of templates, covering an enormous range of document types—everything from scientific articles, reports and books to CVs and presentations. Because these templates define the layout and style of the document, authors need only to open them in Overleaf—creating a new project—and commence writing to add their content.

Writing your first piece of LaTeX
The first step is to create a new LaTeX project. You can do this on your own computer by creating a new .tex file; alternatively, you can start a new project in Overleaf.
Let’s start with the simplest working example, which can be opened directly in Overleaf:



\documentclass{article}
\begin{document}
First document. This is a simple example, with no 
extra parameters or packages included.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




You can see that LaTeX has automatically indented the first line of the paragraph, taking care of that formatting for you. Let’s have a closer look at what each part of our code does.
The first line of code, \documentclass{article}, declares the document type known as its class, which controls the overall appearance of the document. Different types of documents require different classes; i.e., a CV/resume will require a different class than a scientific paper which might use the standard LaTeX article class. Other types of documents you may be working on may require different classes such as book or report. To get some idea of the many LaTeX class types available,  visit the relevant page on CTAN (Comprehensive TeX Archive Network).
Having set the document class, our content, known as the body of the document, is written between the \begin{document} and \end{document} tags. After opening the example above, you can make changes to the text and, when finished, view the resulting typeset PDF by recompiling the document. To do this in Overleaf, simply hit Recompile, as demonstrated in this brief video clip:





Any Overleaf project can be configured to recompile automatically each time it is edited: click the small arrow next to the Recompile button and set Auto Compile to On, as shown in the following screengrab:

Having seen how to add content to our document, the next step is to give it a title. To do this, we must talk briefly about the preamble.

The preamble of a document
The screengrab above shows Overleaf storing a LaTeX document as a file called main.tex: the .tex file extension is, by convention, used when naming files containing your document’s LaTeX code. 
The previous example showed how document content was entered after the \begin{document} command; however, everything in your .tex file appearing before that point is called the preamble, which acts as the document’s “setup” section. Within the preamble you define the document class (type) together with specifics such as languages to be used when writing the document; loading packages you would like to use (more on this later), and it is where you’d apply other types of configuration. 
A minimal document preamble might look like this:




\documentclass[12pt, letterpaper]{article}
\usepackage{graphicx}




where \documentclass[12pt, letterpaper]{article} defines the overall class (type) of document. Additional parameters, which must be separated by commas, are included in square brackets ([...]) and used to configure this instance of the article class; i.e., settings we wish to use for this particular article-class-based document. 
In this example, the two parameters do the following: 

12pt sets the font size
letterpaper sets the paper size
Of course other font sizes, 9pt, 11pt, 12pt, can be used, but if none is specified, the default size is 10pt. As for the paper size, other possible values are a4paper and legalpaper. For further information see the article about page size and margins.
The preamble line 




\usepackage{graphicx}




is an example of loading an external package (here, graphicx) to extend LaTeX’s capabilities, enabling it to import external graphics files. LaTeX packages are discussed in the section Finding and using LaTeX packages.

Including title, author and date information
Adding a title, author and date to our document requires three more lines in the preamble (not the main body of the document). Those lines are:

\title{My first LaTeX document}: the document title
\author{Hubert Farnsworth}: here you write the name of the author(s) and, optionally, the \thanks command within the curly braces:
\thanks{Funded by the Overleaf team.}: can be added after the name of the author, inside the braces of the author command. It will add a superscript and a footnote with the text inside the braces. Useful if you need to thank an institution in your article.
\date{August 2022}: you can enter the date manually or use the command \today to typeset the current date every time the document is compiled
With these lines added, your preamble should look something like this:




\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}




To typeset the title, author and date use the \maketitle command within the body of the document:




\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}




The preamble and body can now be combined to produce a complete document which can be opened in Overleaf:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Adding comments
LaTeX is a form of “program code”, but one which specializes in document typesetting; consequently, as with code written in any other programming language, it can be very useful to include comments within your document. A LaTeX comment is a section of text that will not be typeset or affect the document in any way—often used to add “to do” notes; include explanatory notes; provide in-line explanations of tricky macros or comment-out lines/sections of LaTeX code when debugging. 
To make a comment in LaTeX, simply write a % symbol at the beginning of the line, as shown in the following code which uses the example above:



\documentclass[12pt, letterpaper]{article}
\title{My first LaTeX document}
\author{Hubert Farnsworth\thanks{Funded by the Overleaf team.}}
\date{August 2022}
\begin{document}
\maketitle
We have now added a title, author and date to our first \LaTeX{} document!

% This line here is a comment. It will not be typeset in the document.
\end{document}



 Open this example in Overleaf.

This example produces output that is identical to the previous LaTeX code which did not contain the comment.

Bold, italics and underlining
Next, we will now look at some text formatting commands:

Bold: bold text in LaTeX is typeset using the \textbf{...} command.
Italics: italicised text is produced using the \textit{...} command.
Underline: to underline text use the \underline{...} command.
The next example demonstrates these commands:



Some of the \textbf{greatest}
discoveries in \underline{science} 
were made by \textbf{\textit{accident}}.



 Open this example in Overleaf.

This example produces the following output:




Another very useful command is \emph{argument}, whose effect on its argument depends on the context. Inside normal text, the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text—see the next example:



Some of the greatest \emph{discoveries} in science 
were made by accident.

\textit{Some of the greatest \emph{discoveries} 
in science were made by accident.}

\textbf{Some of the greatest \emph{discoveries} 
in science were made by accident.}



 Open this \emph example in Overleaf.

This example produces the following output:





Note: some packages, such as Beamer, change the behaviour of the \emph command.
Adding images
In this section we will now look at how to add images to a LaTeX document—note that you need to upload images to your Overleaf project.
The following example demonstrates how to include a picture:




\documentclass{article}
\usepackage{graphicx} %LaTeX package to import graphics
\graphicspath{{images/}} %configuring the graphicx package
 
\begin{document}
The universe is immense and it seems to be homogeneous, 
on a large scale, everywhere we look.

% The \includegraphcs command is 
% provided (implemented) by the 
% graphicx package
\includegraphics{universe}  
 
There's a picture of a galaxy above.
\end{document}



 Open this image example in Overleaf.
This example produces the following output:




Importing graphics into a LaTeX document needs an add-on package which provides the commands and features required to include external graphics files. The above example loads the  graphicx package which, among many other commands, provides \includegraphics{...} to import graphics and \graphicspath{...} to advise LaTeX where the graphics are located.
To use the graphicx package, include the following line in your Overleaf document preamble:




\usepackage{graphicx}




In our example the command \graphicspath{{images/}} informs LaTeX that images are kept in a folder named images, which is contained in the current directory:

The \includegraphics{universe} command does the actual work of inserting the image in the document. Here, universe is the name of the image file but without its extension. 
Note:

Although the full file name, including its extension, is allowed in the \includegraphics command, it’s considered best practice to omit the file extension because it will prompt LaTeX to search for all the supported formats.
Generally, the graphic’s file name should not contain white spaces or multiple dots; it is also recommended to use lowercase letters for the file extension when uploading image files to Overleaf.
More information on LaTeX packages can be found at the end of this tutorial in the section Finding and using LaTeX packages. 

Captions, labels and references
Images can be captioned, labelled and referenced by means of the figure environment, as shown below:




\documentclass{article}
\usepackage{graphicx}
\graphicspath{{images/}}
 
\begin{document}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.75\textwidth]{mesh}
    \caption{A nice plot.}
    \label{fig:mesh1}
\end{figure}
 
As you can see in figure \ref{fig:mesh1}, the function grows near the origin. This example is on page \pageref{fig:mesh1}.

\end{document}



 Open this image example in Overleaf.
This example produces the following output:




There are several noteworthy commands in the example:

\includegraphics[width=0.75\textwidth]{mesh}: This form of \includegraphics instructs LaTeX to set the figure’s width to 75% of the text width—whose value is stored in the \textwidth command.
\caption{A nice plot.}: As its name suggests, this command sets the figure caption which can be placed above or below the figure. If you create a list of figures this caption will be used in that list.
\label{fig:mesh1}: To reference this image within your document you give it a label using the \label command. The label is used to generate a number for the image and, combined with the next command, will allow you to reference it.
\ref{fig:mesh1}: This code will be substituted by the number corresponding to the referenced figure.
Images incorporated in a LaTeX document should be placed inside a figure environment, or similar, so that LaTeX can automatically position the image at a suitable location in your document.
Further guidance is contained in the following Overleaf help articles:

Positioning of Figures
Inserting Images
Creating lists in LaTeX
You can create different types of list using environments, which are used to encapsulate the LaTeX code required to implement a specific typesetting feature. An environment starts with \begin{environment-name} and ends with \end{environment-name} where environment-name might be figure, tabular or one of the list types: itemize for unordered lists or enumerate for ordered lists.

Unordered lists
Unordered lists are produced by the itemize environment. Each list entry must be preceded by the \item command,  as shown below: 



\documentclass{article}
\begin{document}
\begin{itemize}
  \item The individual entries are indicated with a black dot, a so-called bullet.
  \item The text in the entries may be of any length.
\end{itemize}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





You can also open this  larger Overleaf project
 which demonstrates various types of LaTeX list.
Ordered lists
Ordered lists use the same syntax as unordered lists but are created using the enumerate environment:



\documentclass{article}
\begin{document}
\begin{enumerate}
  \item This is the first entry in our list.
  \item The list numbers increase with each entry we add.
\end{enumerate}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




As with unordered lists, each entry must be preceded by the \item command which, here, automatically generates the numeric ordered-list label value, starting at 1.

For further information you can open this  larger Overleaf project
 which demonstrates various types of LaTeX list or visit our dedicated help article on LaTeX lists, which provides many more examples and shows how to create customized lists.
Adding math to LaTeX
One of the main advantages of LaTeX is the ease with which mathematical expressions can be written. LaTeX provides two writing modes for typesetting mathematics:

inline math mode used for writing formulas that are part of a paragraph
display math mode used to write expressions that are not part of a text or paragraph and are typeset on separate lines
Inline math mode
Let’s see an example of inline math mode:



\documentclass[12pt, letterpaper]{article}
\begin{document}
In physics, the mass-energy equivalence is stated 
by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset inline-mode math you can use one of these delimiter pairs: \( ... \), $ ... $ or \begin{math} ... \end{math}, as demonstrated in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
\begin{math}
E=mc^2
\end{math} is typeset in a paragraph using inline math mode---as is $E=mc^2$, and so too is \(E=mc^2\).
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Display math mode
Equations typeset in display mode can be numbered or unnumbered, as in the following example:



\documentclass[12pt, letterpaper]{article}
\begin{document}
The mass-energy equivalence is described by the famous equation
\[ E=mc^2 \] discovered in 1905 by Albert Einstein. 

In natural units ($c = 1$), the formula expresses the identity
\begin{equation}
E=m
\end{equation}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




To typeset display-mode math you can use one of these delimiter pairs: \[ ... \], \begin{displaymath} ... \end{displaymath} or \begin{equation} ... \end{equation}. Historically, typesetting display-mode math required use of $$ characters delimiters, as in $$ ... display math here ...$$, but  this method is no longer recommended: use LaTeX’s delimiters \[ ... \] instead.

More complete examples
The following examples demonstrate a range of mathematical content typeset using LaTeX. 



\documentclass{article}
\begin{document}
Subscripts in math mode are written as $a_b$ and superscripts are written as $a^b$. These can be combined and nested to write expressions such as

\[ T^{i_1 i_2 \dots i_p}_{j_1 j_2 \dots j_q} = T(x^{i_1},\dots,x^{i_p},e_{j_1},\dots,e_{j_q}) \]
 
We write integrals using $\int$ and fractions using $\frac{a}{b}$. Limits are placed on integrals using superscripts and subscripts:

\[ \int_0^1 \frac{dx}{e^x} =  \frac{e-1}{e} \]

Lower case Greek letters are written as $\omega$ $\delta$ etc. while upper case Greek letters are written as $\Omega$ $\Delta$.

Mathematical operators are prefixed with a backslash as $\sin(\beta)$, $\cos(\alpha)$, $\log(x)$ etc.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The next example uses the equation* environment which is provided by the amsmath package, so we need to add the following line to our document preamble:




\usepackage{amsmath}% For the equation* environment




For further information on using amsmath see our help article.



\documentclass{article}
\usepackage{amsmath}% For the equation* environment
\begin{document}
\section{First example}

The well-known Pythagorean theorem \(x^2 + y^2 = z^2\) was proved to be invalid for other exponents, meaning the next equation has no integer solutions for \(n>2\):

\[ x^n + y^n = z^n \]

\section{Second example}

This is a simple math expression \(\sqrt{x^2+1}\) inside text. 
And this is also the same: 
\begin{math}
\sqrt{x^2+1}
\end{math}
but by using another command.

This is a simple math expression without numbering
\[\sqrt{x^2+1}\] 
separated from text.

This is also the same:
\begin{displaymath}
\sqrt{x^2+1}
\end{displaymath}

\ldots and this:
\begin{equation*}
\sqrt{x^2+1}
\end{equation*}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The possibilities with math in LaTeX are endless so be sure to visit our help pages for advice and examples on specific topics:

Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Fractions and Binomials
Aligning Equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Basic document structure
Next, we explore abstracts and how to partition a LaTeX document into different chapters, sections and paragraphs.

Abstracts
Scientific articles usually provide an abstract which is a brief overview/summary of their core topics, or arguments. The next example demonstrates typesetting an abstract using LaTeX’s abstract environment:



\documentclass{article}
\begin{document}
\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Paragraphs and new lines
With the abstract in place, we can begin writing our first paragraph. The next example demonstrates: 

how a new paragraph is created by pressing the "enter" key twice, ending the current line and inserting a subsequent blank line;
how to start a new line without starting a new paragraph by inserting a manual line break using the \\ command, which is a double backslash; alternatively, use the \newline command.
The third paragraph in this example demonstrates use of the commands \\ and \newline:



\documentclass{article}
\begin{document}

\begin{abstract}
This is a simple paragraph at the beginning of the 
document. A brief introduction about the main subject.
\end{abstract}

After our abstract we can begin the first paragraph, then press ``enter'' twice to start the second one.

This line will start a second paragraph.

I will start the third paragraph and then add \\ a manual line break which causes this text to start on a new line but remains part of the same paragraph. Alternatively, I can use the \verb|\newline|\newline command to start a new line, which is also part of the same paragraph.
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Note how LaTeX automatically indents paragraphs—except immediately after document headings such as section and subsection—as we will see.
New users are advised that multiple \\ or \newlines should not used to “simulate” paragraphs with larger spacing between them because this can interfere with LaTeX’s typesetting algorithms. The recommended method is to continue using blank lines for creating new paragraphs, without any \\, and load the parskip package by adding \usepackage{parskip} to the preamble.
Further information on paragraphs can be found in the following articles:

Paragraphs and new lines
How to change paragraph spacing in LaTeX
LaTeX Error: There's no line here to end provides additional advice and guidance on using \\.
Chapters and sections
Longer documents, irrespective of authoring software, are usually partitioned into parts, chapters, sections, subsections and so forth. LaTeX also provides document-structuring commands but the available commands, and their implementations (what they do), can depend on the document class being used. By way of example, documents created using the book class can be split into parts, chapters, sections, subsections and so forth but the letter class does not provide (support) any commands to do that. 
This next example demonstrates commands used to structure a document based on the book class:



\documentclass{book}
\begin{document}

\chapter{First Chapter}

\section{Introduction}

This is the first section.

Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit. Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...

\section{Second Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\subsection{First Subsection}
Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...

\section*{Unnumbered Section}
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The names of sectioning commands are mostly self-explanatory; for example, \chapter{First Chapter} creates a new chapter titled First Chapter, \section{Introduction} produces a section titled Introduction, and so forth. Sections can be further divided into \subsection{...} and even \subsubsection{...}. The numbering of sections, subsections etc. is automatic but can be disabled by using the so-called starred version of the appropriate command which has an asterisk (*) at the end, such as \section*{...} and \subsection*{...}. 
Collectively, LaTeX document classes provide the following sectioning commands, with specific classes each supporting a relevant subset:

\part{part}
\chapter{chapter}
\section{section}
\subsection{subsection}
\subsubsection{subsubsection}
\paragraph{paragraph}
\subparagraph{subparagraph}
In particular, the \part and \chapter commands are only available in the report and book document classes. 
Visit the Overleaf article article about sections and chapters for further information about document-structure commands.

Creating tables
The following examples show how to create tables in LaTeX, including the addition of lines (rules) and captions. 

Creating a basic table in LaTeX
We start with an example showing how to typeset a basic table:



\begin{center}
\begin{tabular}{c c c}
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\  
 cell7 & cell8 & cell9    
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




The tabular environment is the default LaTeX method to create tables. You must specify a parameter to this environment, in this case {c c c} which advises LaTeX that there will be three columns and the text inside each one must be centred. You can also use r to right-align the text and l to left-align it. The alignment symbol & is used to demarcate individual table cells within a table row. To end a table row use the new line command \\. Our table is contained within a center environment to make it centred within the text width of the page.

Adding borders
The tabular environment supports horizontal and vertical lines (rules) as part of the table:

to add horizontal rules, above and below rows, use the \hline command
to add vertical rules, between columns, use the vertical line parameter |
In this example the argument is {|c|c|c|} which declares three (centred) columns each separated by a vertical line (rule); in addition, we use \hline to place a horizontal rule above the first row and below the final row:



\begin{center}
\begin{tabular}{|c|c|c|} 
 \hline
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\ 
 cell7 & cell8 & cell9 \\ 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Here is a further example:



\begin{center}
 \begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 \hline
 2 & 7 & 78 & 5415 \\
 \hline
 3 & 545 & 778 & 7507 \\
 \hline
 4 & 545 & 18744 & 7560 \\
 \hline
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.

This example produces the following output:




Tip!

Creating tables in LaTeX can be time-consuming so you may want to use the TablesGenerator.com online tool to export LaTeX code for tabulars.
Captions, labels and references
You can caption and reference tables in much the same way as images. The only difference is that instead of the figure environment, you use the table environment.



Table \ref{table:data} shows how to add a table caption and reference a table.
\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{Table to test captions and labels.}
\label{table:data}
\end{table}



 Open this example in Overleaf.

This example produces the following output:





Adding a Table of Contents
Creating a table of contents is straightforward because the command \tableofcontents does almost all the work for you:



\documentclass{article}
\title{Sections and Chapters}
\author{Gubert Farnsworth}
\date{August 2022}
\begin{document}
  
\maketitle
  
\tableofcontents

\section{Introduction}
   
This is the first section.
      
Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  
elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et 
neque pharetra sollicitudin.  Praesent imperdietmi nec ante. 
Donec ullamcorper, felis non sodales...
       
\section*{Unnumbered Section}
\addcontentsline{toc}{section}{Unnumbered Section}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...

\section{Second Section}
       
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  
Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra 
sollicitudin.  Praesent imperdiet mi necante...
\end{document}



 Open this example in Overleaf.

This example produces the following output:




Sections, subsections and chapters are automatically included in the table of contents. To manually add entries, such as an unnumbered section, use the command \addcontentsline as shown in the example.

Downloading your finished document
The following brief video clip shows how to download your project’s source code or the typeset PDF file:





More information can be found in the Overleaf help article Exporting your work from Overleaf.

Finding and using LaTeX packages
LaTeX not only delivers significant typesetting capabilities but also provides a framework for extensibility through the use of add-on packages. Rather than attempting to provide commands and features that “try to do everything”, LaTeX is designed to be extensible, allowing users to load external bodies of code (packages) that provide more specialist typesetting capabilities or extend LaTeX’s built-in features—such as typesetting tables. As observed in the section Adding images, the graphicx package extends LaTeX by providing commands to import graphics files and was loaded (in the preamble) by writing




\usepackage{graphicx}




Loading packages
As noted above, packages are loaded in the document preamble via the \usepackage command but because (many) LaTeX packages provide a set of options, which can be used to configure their behaviour, the \usepackage command often looks like this:  




\usepackage[options]{somepackage}




The square brackets “[...]” inform LaTeX which set of options should be applied when it loads somepackage. Within the set of options requested by the user, individual options, or settings, are typically separated by a comma; for example, the geometry package provides many options to configure page layout in LaTeX, so a typical use of geometry  might look like this:




\usepackage[total={6.5in,8.75in},
top=1.2in, left=0.9in, includefoot]{geometry}




The geometry package is one example of a package written and contributed by members of the global LaTeX community and made available, for free, to anyone who wants to use it.
If a LaTeX package does not provide any options, or the user wants to use the default values of a package’s options, it would be loaded like this:




\usepackage{somepackage}




When you write \usepackage[...]{somepackage} LaTeX looks for a corresponding file called somepackage.sty, which it needs to load and process—to make the package commands available and execute any other code provided by that package. If LaTeX cannot find somepackage.sty it will terminate with an error, as demonstrated in the following Overleaf example:



\documentclass[12pt, letterpaper]{article}
\usepackage{somepackage}% a NON-EXISTENT package
\begin{document}
This will fail!
\end{document}



 Open this error-generating example on Overleaf

This example produces the following output:


Finding information about packages: CTAN
Packages are distributed through the Comprehensive TeX Archive Network, usually referred to as CTAN, which, at the time of writing, hosts 6287 packages from 2881 contributors. CTAN describes itself as 


... a set of Internet sites around the world that offer TEX-related material for download.


You can browse CTAN to look for useful packages; for example:

by topic
alphabetically (useful if you know the package name)
You can also use the search facility (at the top of the page).

Packages available on Overleaf: Introducing TeX Live
Once per year a (large) subset of packages hosted on CTAN, plus LaTeX-related fonts and other software, is collated and distributed as a system called TeX Live, which can be used to install your own (local) LaTeX setup. In fact, Overleaf’s servers also use TeX Live and are updated when a new version of TeX Live is released. Overleaf’s TeX Live updates are not immediate but take place a few months post-release, giving us time to perform compatibility tests of the new TeX Live version with the thousands of templates contained in our gallery. For example, here is our TeX Live 2022 upgrade announcement. 
Although TeX Live contains a (large) subset of CTAN packages it is possible to find an interesting package, such as igo for typesetting Go diagrams, which is hosted on CTAN but not included in (distributed by) TeX Live and thus unavailable on Overleaf. Some packages hosted on CTAN are not part of TeX Live due to a variety of reasons: perhaps a package is obsolete, has licensing problems, is extremely new (recently uploaded) or has platform dependencies, such as working on Windows but not Linux. 
New packages, and updates to existing ones, are uploaded to CTAN all year round but updates to TeX Live are distributed annually; consequently, packages contained in the current version of TeX Live will not be as up-to-date as those hosted on CTAN. Because Overleaf’s servers use TeX Live it is possible that packages installed on our servers—i.e., ones available to our users—might not be the very latest versions available on CTAN but, generally, this is unlikely to be problematic.

Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Choosing a LaTeX Compiler - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsChoosing a LaTeX CompilerThe styles, contents and layout in a LaTeX document are defined by means of tags or commands in a plain .tex file, this file can be used to generate several types of "human-readable" versions of the document. The easiest way to generate this final output is to use Overleaf. Overleaf has a ready-to-use LaTeX distribution and final documents can be generated by simply clicking the "Recompile" button; if this is your case you can skip this article. Otherwise, if you need to learn how to compile documents in your computer, this article describes how to generate PS, DVI and PDF output from a LaTeX file. 

Contents

1 Introduction
2 TeX distributions
3 LaTeX editors
4 Output formats
5 Other compilers
6 Compiling documents with cross-references
7 Reference guide
8 Further reading


Introduction
LaTeX documents are plain documents with a .tex extension (see the Creating a document in LaTeX article for examples), this plain text file has some markup commands that are meant to format the document but, how do you actually generate the final output?. It depends on the type of document you want to generate. 
Suppose you saved your document and named the file "mydocument.tex". To create a .PDF file just run this command in the system terminal.
pdflatex mydocument.tex
And a file named "mydocument.pdf" will appear.

TeX distributions
The set of programs that make possible to compile TeX and LaTeX documents is called a TeX typesetting or a TeX distribution. There are many TeX distributions available for different operating systems: 

MiKTeX for Windows
TeX Live for Linux and other UNIX-like systems
MacTeX redistribution of TeX Live for macOS
teTeX for Linux and other UNIX-like systems; it is no longer actively maintained now
proTeXt is based on MiKTeX
Of course, if you don't want to go through the process of installing a TeX distribution, you can use an on-line ready to use option like Overleaf.

LaTeX editors
There are many advanced text editors specifically dedicated to LaTeX for the most popular operating systems, some of them can be downloaded for free while others are proprietary software:

Open source: AUCTEX, GNU TeXmacs, Gummi, Kile, LaTeXila, MeWa, TeXShop, TeXnicCenter, Texmaker, TeXstudio, TeXworks
Freeware: LEd, WinShell
Proprietary/Shareware: Inlage, Scientific WorkPlace, WinEdt
There are also general-purpose editors that add LaTeX-friendly options by means of plugins. For example the well known editors emacs and vim have both a LaTeX extension, as do Atom, VS Code and Sublime Text.
It's worth to mention that the editor in Overleaf can be customized to emulate the emacs or vim behaviour. It is also themeable, so you can choose the same syntax highlighting of some of the aforementioned editors. You can find these settings by clicking on the Overleaf menu icon, above the file list panel in your Overleaf project.

Output formats
There are three output formats available in all TeX distributions. To generate a specific output the document has to be compiled by running a command in a terminal (Linux and macOS) or the command prompt (windows).
For example, if you want to compile a file named "mydocument.tex" you can use one of the next commands:

latex mydocument.tex
This will create "mydocument.dvi", a DVI document
pdflatex mydocument.tex
This will generate "mydocument.pdf", a PDF document
There are some additional commands that allow conversion between formats, PS images are also supported. See the reference guide for a schematic description of commands and output formats.
A description of each output format is provided below:

(DVI) Device independent file format consists of binary data describing the visual layout of a document in a manner not reliant on any specific image format, display hardware or printer.
(PS)  PostScript file format describes text and graphics on page and it is based on vector graphics. PostScript is, until now, a standard in desktop publishing areas.
(PDF) Portable Document Format is a file format, based on PostScript, used to represent documents in a manner independent of application software, hardware, and operating systems. It is now widely used as a file format for printing and for distribution on the Web.
Note: Most of the editors nowadays include quick-access icons to compile to different output formats so you don't have to actually run the commands in a system prompt.
On Overleaf, the final compiled output is always a PDF document. If you are required to produce a DVI file from your Overleaf project, here's what you can do:

Make sure you're using only .eps and .ps images in your project.
Click on the Overleaf menu icon above the file list panel, and set the Compiler setting to 'LaTeX'.
Recompile your project.
Click on the "Logs and output files" button next to the Recompile button.
Scroll right to the bottom, and click on "Other logs and output files".
You should then able to download the generated .dvi file.



Other compilers
The other possible compiler settings are pdfLaTeX (the default), XeLaTeX and LuaLaTeX. You can usually go with pdfLaTeX, but choosing a compiler depends on each project's needs.

LaTeX supports only .eps and .ps image formats for use with \includegraphics. If all the images in your project are .eps files, then this compiler setting is recommended.
pdfLaTeX supports .png, .jpg, .pdf image formats. It will convert .eps images to .pdf on-the-fly during compilation, which may prolong the compilation time required. (pdfLaTeX may not be able to handle pstricks well on Overleaf.)
XeLaTeX and LuaLaTeX both supports UTF-8 robustly out of the box, as well as Truetype and OpenType. They are therefore recommended if you need to typeset non-Latin scripts on Overleaf, in conjunction with the polyglossia pacakge. They also support all of the .png, .jpg, .pdf and .eps image formats.
XeLaTeX supports pstricks; but LuaLaTeX doesn't.
You can extend LuaLaTeX's capabilities by embedding Lua code directly in your document.
Compiling documents with cross-references
In some cases, when your document includes cross-references, you must compile the source twice. It is necessary to include the correct numbers in the table of contents, list of images, reference numbers to theorems and so on.
During the first compilation the LaTeX compiler writes the .aux file for informations about different numbering and during the second one the compiler reads these informations in order to properly generate a table of contents, bibliography, etc.
This process can be automatized by the command latexmk. For example, to create a pdf out of the "mydocument.tex" file, run
latexmk -pdf mydocument.tex
only once, even if the document has referenced images and bibliography. You can change -pdf to -dvi to set a different file type.

Reference guide
LaTeX compilation file flow


Further reading
Creating a document in LaTeX
Creating a document in Overleaf
Debugging Compilation timeout errors
Multi-file LaTeX projects
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Paragraphs and new lines - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsParagraphs and new linesContents

1 Introduction
2 A first example
3 Starting a new paragraph
4 Paragraph alignment

4.1 flushleft and flushright environments
4.2 \raggedright and \raggedleft


5 Paragraph indentation

5.1 Notes on indentation-related commands


6 Further Reading


Introduction
This article introduces basic LaTeX paragraph formatting, including how to change text alignment. More detailed information, and further examples, can be found in the articles Text alignment and Paragraph formatting.

A first example
Let's start with an example which typesets two centred paragraphs by writing them inside a center environment. Note how a new paragraph is started by inserting a blank line between them—although that's a commonly-used method, it's not the only way to start a new paragraph.



\begin{center}
Example 1: The following paragraph (given in quotes) is an 
example of centred alignment using the center environment. 

``La\TeX{} is a document preparation system and document markup 
language. \LaTeX{} uses the \TeX{} typesetting program for formatting 
its output, and is itself written in the \TeX{} macro language. 
\LaTeX{} is not the name of a particular (executable) typesetting program, but 
refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents."
\end{center}



 Open this example in Overleaf

This example produces the following output:


Starting a new paragraph
As noted above, one way to start a new paragraph is by inserting a blank line but the following code snippet shows an alternative solution which uses the \par command: 



This is text contained in the first paragraph. 
This is text contained in the first paragraph. 
This is text contained in the first paragraph.\par
This is text contained in the second paragraph. 
This is text contained in the second paragraph.
This is text contained in the second paragraph.



 Open this example in Overleaf

This example produces the following output:


Paragraph alignment
By default paragraphs in LaTeX are fully justified, i.e. flush with both the left and right margins. If you would like to typeset an unjustified paragraph you can use the flushleft or flushright environments.

flushleft and flushright environments
The next example demonstrates typesetting a paragraph within the flushleft and flushright environments—for an example of the center environment see the section A first example.



\section*{A paragraph typeset flush left}

\begin{flushleft}
La\TeX{} is a document preparation system and document markup 
language. \LaTeX{} uses the \TeX{} typesetting program for formatting 
its output, and is itself written in the \TeX{} macro language. 
\LaTeX{} is not the name of a particular (executable) typesetting program, but 
refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.
\end{flushleft}

\section*{A paragraph typeset flush right}

\begin{flushright}
La\TeX{} is a document preparation system and document markup 
language. \LaTeX{} uses the \TeX{} typesetting program for formatting 
its output, and is itself written in the \TeX{} macro language. 
\LaTeX{} is not the name of a particular (executable) typesetting program, but 
refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.
\end{flushright}



 Open this example in Overleaf

This example produces the following output:


\raggedright and \raggedleft
An alternative to using environments such as flushleft, flushright or center are the so-called "switch" commands: 

\raggedright, an alternative to using the flushleft environment
\raggedleft, an alternative to using the flushright environment
\centering, an alternative to using the center environment
These switch commands change text alignment from the point they are inserted down to the end of the document—unless their effect(s) are restricted to a group or changed by another switch command. 
In the following example, the effects of \raggedright, \raggedleft and \centering are localized because they are used within the group created by \begingroup ... \endgroup. In addition, note that in each case the paragraph text is followed by a blank line, before the \endgroup command, which triggers LaTeX to typeset the paragraph whilst the settings applied by \raggedright, \raggedleft and \centering are still active.



\section*{A fully justified  typeset paragraph} 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\section*{A paragraph typeset using \texttt{\string\raggedright}}

\begingroup
\raggedright 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\endgroup

\section*{A paragraph typeset using \texttt{\string\raggedleft}}

\begingroup
\raggedleft 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\endgroup

\section*{A paragraph typeset using \texttt{\string\centering}}

\begingroup
\centering 
\LaTeX{} is not the name of a particular (executable) typesetting program, but refers to the suite of commands (\TeX{} macros) which form the markup 
conventions used to typeset \LaTeX{} documents.

\endgroup



 Open this example in Overleaf

This example produces the following output:

For more detailed information and examples of text alignment see the Overleaf article on text alignment  which also discusses using the ragged2e LaTeX package to typeset ragged text and configure hyphenation.

Paragraph indentation
By default new paragraphs are usually indented by an amount controlled by a parameter called \parindent whose value can be set using the command \setlength; for example:



\setlength{\parindent}{20pt}



sets \parindent to 20pt. You can avoid indentation by setting \parindent to 0pt (or 0mm, 0cm etc) or using the command \noindent at the beginning of the paragraph. By default LaTeX does not indent the first paragraph contained in a document section as demonstrated in the following example:



\setlength{\parindent}{20pt}

\section*{This is a section}
\textbf{First paragraph} of a section which, as you can see, is not indented. This is more text in the paragraph. This is more text in the paragraph.

\textbf{Second paragraph}. As you can see it is indented. This is more text in the paragraph. This is more text in the paragraph. 

\noindent\textbf{Third paragraph}. This too is not indented due to use of \texttt{\string\noindent}. This is more text in the paragraph. This is more text in the paragraph.  The current value of \verb|\parindent| is \the\parindent. This is more text in the paragraph.



 Open this example in Overleaf

This example produces the following output:


Notes on indentation-related commands
Paragraph indentation is controlled or influenced by three commands:

\parindent: a parameter which stores the current size of the paragraph indent
\indent: the effect of this command depends where it is used:
in a horizontal mode (inside a paragraph or an \hbox) or math mode it inserts a space (an empty box) of width \parindent
in a vertical mode (between paragraphs or in a \vbox) it triggers the start a new indented paragraph
\noindent: the effect of this command also depends where it is used:
in a vertical mode (between paragraphs or in a \vbox) it also triggers a new non-indented paragraph
in a horizontal mode (inside a paragraph or an \hbox) or math mode it has no effect: it is ignored
The following example demonstrates \indent:



\documentclass{article}
% Using the geometry package with a small
% page size to create the article graphic
\usepackage[paperheight=6in,
   paperwidth=5in,
   top=10mm,
   bottom=20mm,
   left=10mm,
   right=10mm]{geometry}
\begin{document}
\noindent A new paragraph with some text, then an \verb|\indent|\indent command. Next, some inline math which also has an indent $y\indent x$. \verb|\indent| also works when used in an \verb|\hbox| such as \verb|\hbox{A\indent B}| which produces \hbox{A\indent B}.
\end{document}



 Open this example in Overleaf

This example produces the following output:


Further Reading
For more information check 

Paragraph formatting
Text alignment
Lengths in LaTeX
Line breaks and blank spaces
Lists
Bold, italics and underlining
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Bold, italics and underlining - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBold, italics and underliningContents

1 Introduction
2 Italicized text
3 Bold text
4 Underlined text
5 Emphasising text
6 Full set of examples
7 Further reading


Introduction
Simple text formatting helps to highlight important concepts within a document and make it more readable. Using italics, bold or underlined words can change the perception of the reader.
In this article three basic text formatting tools will be explained: italics, bold and underline. Let's begin with an example:



Some of the \textbf{greatest} 
discoveries in \underline{science} 
were made by \textbf{\textit{accident}}.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:

As you can see, there are three basic commands and they can be nested to get combined effects.
Note: The original text-formatting commands from plain TeX, \it (italicize) and \bf (bold face) will still work in a LaTeX document but their use is discouraged and not recommended because they don't preserve previous styles. For example, when using those old commands you can't apply both italics and bold at the same time.

Italicized text
To make a text italic is straightforward, use the \textit (\emph) command:



Some of the greatest 
discoveries in science 
were made by \textit{accident}.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:


Bold text
To make a text bold use \textbf command:



Some of the \textbf{greatest} 
discoveries in science 
were made by accident.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:


Underlined text
To underline text use the \underline command:



Some of the greatest 
discoveries in \underline{science} 
were made by accident.



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:


Emphasising text
Text can be emphasized using the \emph command. Sometimes the \emph command behaves just as \textit, but is not exactly the same:



Some of the greatest \emph{discoveries} 
in science 
were made by accident.

\textit{Some of the greatest \emph{discoveries} 
in science 
were made by accident.}

\textbf{Some of the greatest \emph{discoveries} 
in science 
were made by accident.}



 Open this LaTeX fragment in Overleaf.

The following graphic shows the output of this LaTeX code—the document preamble is added automatically by the Overleaf link:

What the \emph command actually does with its argument depends on the context—inside normal text the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text—see example above. Moreover, some packages, e.g. Beamer, change the behaviour of the \emph command.

Full set of examples
The following example collects the various code fragments contained in this article so that you can open them all together in Overleaf.



First example, bold, italics and underline:

Some of the \textbf{greatest} discoveries in \underline{science} were made by \textbf{\emph{accident}}.

\vspace{1.5cm}

Example of italicized text: 

Some of the greatest discoveries in science were made by \emph{accident}.

\vspace{1.5cm}

Example of boldface text:

Some of the \textbf{greatest} discoveries in science were made by accident.

\vspace{1.5cm}

Example of underlined text:

Some of the greatest discoveries in \underline{science} were made by accident.

\vspace{1.5cm}

Example of emphasized text in different contexts:

Some of the greatest \emph{discoveries} in science were made by accident.

\textit{Some of the greatest \emph{discoveries} in science were made by accident.}

\textbf{Some of the greatest \emph{discoveries} in science were made by accident.}



 Open this LaTeX code in Overleaf.



Further reading
For more information see

Paragraphs and new lines
Lists
Paragraph formatting
Line breaks and blank spaces
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Lists - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsListsContents

1 Introduction
2 Examples of basic lists

2.1 The itemize environment for bulleted (unordered) lists
2.2 The enumerate environment for numbered (ordered) lists
2.3 The description environment


3 Changing the label of individual entries
4 Nested lists

4.1 Nested lists: label style

4.1.1 Nested enumerate lists: number format
4.1.2 Nested itemize lists: bullet style




5 Customizing lists

5.1 Customizing lists: changing labels

5.1.1 Standard label-generation commands
5.1.2 Counter variables for enumerate
5.1.3 Examples: customizing labels of enumerate lists

5.1.3.1 Practical example
5.1.3.2 Printing counter variables
5.1.3.3 Non-practical (fun) example




5.2 Customizing lists: changing the layout

5.2.1 LaTeX list parameters
5.2.2 Creating a custom list using the list environment


5.3 Using the enumitem package to modify and create lists

5.3.1 enumitem package option shortlabels
5.3.2 Modifying a standard list
5.3.3 Creating a new list with enumitem

5.3.3.1 Using \setlist to configure a custom list created with enumitem


5.3.4 Lists for lawyers: nesting lists to an arbitrary depth
5.3.5 Custom bullets using the enumitem package and MetaPost

5.3.5.1 Example 1: auto-sizing bullet points
5.3.5.2 Example 2: funky custom bullets






6 Other features of the enumitem package


Introduction
This article provides an introduction to typesetting, and customizing, various types of list in LaTeX:

the itemize environment for creating a bulleted (unordered) list
the enumerate environment for creating a numbered (ordered) list
the description environment for creating a list of descriptions
Typesetting lists is a large topic because LaTeX lists are extremely configurable, enabling creation of an enormous variety of list types and structures. We’ll survey and demonstrate some methods you can use to configure and customize your lists.

Examples of basic lists
The itemize environment for bulleted (unordered) lists
Unordered (bulleted) lists are produced by the itemize environment, where each list entry starts by using the \item command, which also generates the bullet symbol. 



Lists are easy to create:
\begin{itemize}
  \item List entries start with the \verb|\item| command.
  \item Individual entries are indicated with a black dot, a so-called bullet.
  \item The text in the entries may be of any length.
\end{itemize}



 Open this example in Overleaf.

This example produces the following output:


The enumerate environment for numbered (ordered) lists
Numbered (ordered) lists have the same syntax but use the enumerate environment: each entry must be preceded by the control sequence \item, which will automatically generate  numbers to label the item. These numbers start at 1 with every use of the enumerate environment—note that this, default, LaTeX numbering behaviour can be changed/controlled via the enumitem package. 



Numbered (ordered) lists are easy to create:
\begin{enumerate}
  \item Items are numbered automatically.
  \item The numbers start at 1 with each use of the \texttt{enumerate} environment.
  \item Another entry in the list
\end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


The description environment
The following example demonstrates the description environment. The (optional) label for each entry is enclosed in square brackets after the \item command:



\item[label text] Text of your description goes here...



We also use the blindtext package to generate some dummy English text in the third entry. To obtain English we need to use the babel package with the language option [english]:



\usepackage[english]{babel}



Here is the example:



\documentclass{article}
\usepackage[english]{babel} % To obtain English text with the blindtext package
\usepackage{blindtext}
\begin{document}

\begin{description}
   \item This is an entry \textit{without} a label.
   \item[Something short] A short one-line description.
   \item[Something long] A much longer description. \blindtext[1]
\end{description}
\end{document}



 Open this example in Overleaf.

This example produces the following output:


Changing the label of individual entries
As shown in the description environment example, the \item command takes an optional parameter, in square brackets. You can use this feature within itemize and enumerate environments to change the default label of individual entries in your list:



\item[label text] Text of your entry goes here...



The label text will be used to produce the label for this entry.



Change the labels using \verb|\item[label text]| in an \texttt{itemize} environment
\begin{itemize}
  \item This is my first point
  \item Another point I want to make 
  \item[!] A point to exclaim something!
  \item[$\blacksquare$] Make the point fair and square.
  \item[NOTE] This entry has no bullet
  \item[] A blank label?
\end{itemize}

\vspace{10pt}

Change the labels using \verb|\item[label text]| in an \texttt{enumerate} environment
\begin{enumerate}
  \item This is my first point
  \item Another point I want to make 
  \item[!] A point to exclaim something!
  \item[$\blacksquare$] Make the point fair and square.
  \item[NOTE] This entry has no bullet
  \item[] A blank label?
\end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


Nested lists
In LaTeX you can insert a list inside another list. The above list types may be included within one another, either mixed or of one type, to a depth of 4 levels.



\begin{enumerate}
   \item The labels consists of sequential numbers
   \begin{itemize}
     \item The individual entries are indicated with a black dot, a so-called bullet
     \item The text in the entries may be of any length
     \begin{description}
     \item[Note:] I would like to describe something here
     \item[Caveat!] And give a warning here
     \end{description}
   \end{itemize}
   \item The numbers starts at 1 with each use of the \texttt{enumerate} environment
\end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


Nested lists: label style
The label style of nested list entries changes according to its depth in the list. For nested itemize lists the bullet type changes; for enumerate lists the number format changes with increasing depth of entry. Both are limited to a depth of 4 levels.

Nested enumerate lists: number format


\begin{enumerate}
   \item First level item
   \item First level item
   \begin{enumerate}
     \item Second level item
     \item Second level item
     \begin{enumerate}
       \item Third level item
       \item Third level item
       \begin{enumerate}
         \item Fourth level item
         \item Fourth level item
       \end{enumerate}
     \end{enumerate}
   \end{enumerate}
 \end{enumerate}



 Open this example in Overleaf.

This example produces the following output:


Nested itemize lists: bullet style
The bullet style changes depending on the depth of the nested lists:



\begin{itemize}
   \item First level item
   \item First level item
   \begin{itemize}
     \item Second level item
     \item Second level item
     \begin{itemize}
       \item Third level item
       \item Third level item
       \begin{itemize}
         \item Fourth level item
         \item Fourth level item
       \end{itemize}
     \end{itemize}
   \end{itemize}
 \end{itemize}



 Open this example in Overleaf.

This example produces the following output:


Customizing lists
LaTeX’s lists are highly configurable, providing plenty of scope for the creation of many different types of customized list. You can either make direct modifications to LaTeX’s standard list types or, preferably, use the highly versatile enumitem package to do it for you. 
CTAN hosts a number of list-related packages which may be worth investigating if you have particular customization requirements. In addition, tex.stackexchange provides a wealth of list-related questions with answers that provide useful insights and great examples!
We’ll start with some examples which modify list labels then move on to customization of list layouts.

Customizing lists: changing labels
Firstly, we show how to change list labelling without using the enumitem package. 

Standard label-generation commands
Custom lists can be produced by using the enumitem package or direct modification of the standard lists. Here, we’ll give a summary of some standard LaTeX commands, counter variables and list parameters that you may need to be aware of.
The following table shows the LaTeX commands used for label-generation at each level of the itemize and enumerate list environments:










Level
enumerate label commands
itemize label commands


Level 1
\labelenumi
\labelitemi


Level 2
\labelenumii
\labelitemii


Level 3
\labelenumiii
\labelitemiii


Level 4
\labelenumiv
\labelitemiv





Counter variables for enumerate
The enumerate list environment also uses four counter variables which keep track of the current label value for each level:





Level
enumerate counter variable


Level 1
enumi


Level 2
enumii


Level 3
enumiii


Level 4
enumiv





Examples: customizing labels of enumerate lists
You can configure LaTeX’s standard labelling by using \renewcommand to redefine the label-generating commands and, for the enumerate environment, you can also use the appropriate counter variable. 
Here are some examples which do this without using the enumitem package.

Practical example


\documentclass{article}
\begin{document}
\renewcommand{\labelenumii}{\arabic{enumi}.\arabic{enumii}}
\renewcommand{\labelenumiii}{\arabic{enumi}.\arabic{enumii}.\arabic{enumiii}}
\renewcommand{\labelenumiv}{\arabic{enumi}.\arabic{enumii}.\arabic{enumiii}.\arabic{enumiv}}

\begin{enumerate}
\item One
\item Two
\item Three
\begin{enumerate}
    \item Three point one
    \begin{enumerate}
    \item Three point one, point one
        \begin{enumerate}
        \item Three point one, point one, point one
        \item Three point one, point one, point two
        \end{enumerate}
    \end{enumerate}
\end{enumerate}
\item Four
\item Five
\end{enumerate}

\end{document}



 Open this example in Overleaf.

This example produces the following output:


Printing counter variables
In the previous example, the command \arabic was used to typeset the current value of various label counter variables. Note that “Arabic numerals”, and use of the command \arabic, refers to the digits 0 to 9: see this Arabic numerals article on Wikipedia for further background.
In general, a counter variable can be printed in various formats by using one of the following 5 commands:

\arabic{counter variable}
\roman{counter variable}
\Roman{counter variable}
\Alph{counter variable}
\alph{counter variable}
For example:



\documentclass{article}
\begin{document}
\begin{verbatim}
\newcounter{foo}
\setcounter{foo}{5}    
\end{verbatim}
\newcounter{foo}
\setcounter{foo}{5} 

\begin{itemize}
\item \verb|\arabic{foo}| produces \arabic{foo}
\item \verb|\roman{foo}| produces \roman{foo} 
\item \verb|\Roman{foo}| produces \Roman{foo}
\item \verb|\Alph{foo}| produces \Alph{foo}
\item \verb|\alph{foo}| produces \alph{foo}
\end{itemize}

\end{document}



 Open this example in Overleaf.

This example produces the following output:


Non-practical (fun) example
This example typesets emoji using an OpenType colour font so it will only work in LuaLaTeX. See the Overleaf article An overview of technologies supporting the use of colour emoji fonts in LaTeX for more information on typesetting emoji.
Although this a just a fun example, using LuaLaTeX, it demonstrates customizing all four label-generation commands, and using the label-counter variables, to create some unusual labelling... Click the “Open in Overleaf” link to see the full code.



\renewcommand{\labelenumi}{\duck{enumi}}
\renewcommand{\labelenumii}{\duck{enumi}.\duckegg{enumii}}
\renewcommand{\labelenumiii}{\duck{enumi}.\duckegg{enumii}.\duckegg{enumiii}}
\renewcommand{\labelenumiv}{\duck{enumi}.\duckegg{enumii}.\duckegg{enumiii}.\duckchick{enumiv}} 

\begin{enumerate}
\item A duck
\item More ducks
\item A flurry of ducks
\begin{enumerate}
    \item Ducks and eggs
    \begin{enumerate}
    \item Do I see... 
    \item Ducks and pre-ducks 
       \begin{enumerate}
       \item Awww...
       \item So cute!
       \end{enumerate}
    \end{enumerate}
\end{enumerate}
\item Back to ducks
\item Again
\end{enumerate}



 To see the full code, open this LuaLaTeX example in Overleaf.

This example produces the following output 


Customizing lists: changing the layout
In addition to customizing labels, it is possible to modify list spacing and layout, but first we need to know the various LaTeX parameters which determine typesetting and layout of lists. 

LaTeX list parameters
You can use the layouts package to generate a diagram which displays the LaTeX list parameters:



\documentclass{article}
\usepackage{layouts}
\begin{document}
\begin{figure}
\listdiagram
\caption{The \LaTeX{} parameters which define typesetting and layout of lists.} 
\end{figure}
\end{document}



 Open this example in Overleaf.

This example produces the following output:




The meaning of these parameters is described in the list section of the LaTeX2e unofficial reference manual so we won’t reproduce it here.

Creating a custom list using the list environment
LaTeX provides the generic list environment which provides a framework for creating your own list type(s). Using the information contained in the diagram above, the following example is a slightly modified version of one contained in the  list section of the LaTeX2e unofficial reference manual



\documentclass{article}
\begin{document}
\newcounter{boxlblcounter}  
\newcommand{\makeboxlabel}[1]{\fbox{#1.}\hfill}% \hfill fills the label box
\newenvironment{boxlabel}
  {\begin{list}
    {\arabic{boxlblcounter}}
    {\usecounter{boxlblcounter}
     \setlength{\labelwidth}{3em}
     \setlength{\labelsep}{0em}
     \setlength{\itemsep}{2pt}
     \setlength{\leftmargin}{1.5cm}
     \setlength{\rightmargin}{2cm}
     \setlength{\itemindent}{0em} 
     \let\makelabel=\makeboxlabel
    }
  }
{\end{list}}

\newcommand{\randomtext}{Hello, here is some text without a meaning. Hello, here is some text without a meaning. Hello, here is some text without a meaning.}

\noindent\randomtext

\begin{boxlabel}
\item \randomtext
\item \randomtext
\item \randomtext
\end{boxlabel}
\end{document}



 Open this example in Overleaf.

This example produces the following output:


Using the enumitem package to modify and create lists
The enumitem package is the recommended method for modifying standard LaTeX lists or creating your own custom list formats. enumitem provides a wealth of features so we can’t cover all of them but we can provide a few basic examples to help get you get started. Anyone wishing to explore this versatile package in more depth is strongly encouraged to browse tex.stackexchange for questions, answers (and examples) relating to the enumitem package, and to read the package documentation.

enumitem package option shortlabels
The enumitem provides an optional configuration parameter called shortlabels which you use via



\usepackage[shortlabels]{enumitem}



The shortlabels option mimics the behaviour of the enumerate package, providing a concise method for defining the numbering scheme of enumerate environments. See the enumerate package documentation for further information.

Modifying a standard list
With reference to the LaTeX parameters diagram we can use enumitem to easily customize a standard LaTeX list, such as itemize:



\documentclass{article}
\usepackage{enumitem}

\begin{document}

\newcommand{\randomtext}{Hello, here is some text without a meaning. Hello, here is some text without a meaning.}

\section*{Using LaTeX's default settings for \texttt{itemize}}

\randomtext

\begin{itemize}
\item \randomtext
   \begin{itemize}
      \item \randomtext
        \begin{itemize}
        \item \randomtext
        \end{itemize}
   \item \randomtext
   \end{itemize}
\item \randomtext
\end{itemize}

\section*{Using a custom \texttt{itemize} via \texttt{enumitem}}

\subsection*{Note the effect of left and right margin settings}

\randomtext

\begin{itemize}[leftmargin=30pt, rightmargin=2cm]
\item \randomtext
   \begin{itemize}
      \item \randomtext
        \begin{itemize}
        \item \randomtext
        \end{itemize}
   \item \randomtext
   \end{itemize}
\item \randomtext
\end{itemize}

\end{document}



 Open this enumitem example in Overleaf.

This example produces the following output:


Creating a new list with enumitem
To create a new list type with enumitem you use the \newlist command which requires 3 arguments:



\newlist{name}{list-type}{max-depth}




name: the name of your list, to be used as an environment:
\begin{name}
...
\end{name}


list-type this has to be one of the standard LaTeX list types:

enumerate
itemize
description

max-depth: the maximum depth to which this list will be nested. NOTE for lists which exceed LaTeX’s default nesting limit of 4, you must also issue the command \setlistdepth{integer} where integer is the maximum nesting depth you intend to use. See the Lists for lawyers example for a demonstration of that.

After you have created the new list you can configure it with the \setlist command.

Using \setlist to configure a custom list created with enumitem
In this example we’ll create a new list called myitems which is based on enumerate. We’ll set max-depth to 3: 



\newlist{myitems}{enumerate}{3}



A minimum requirement is using the \setlist command to define labels for this custom list. One way to do that, for enumerate-based lists, is to use the counter variables created by the enumitem package—those counter variables use the name of your list: myitems in our example.
Here is how we use the corresponding counter variables within our label configuration:

myitemsi for the level 1 entries
myitemsii for the level 2 entries
myitemsiii for the level 3 entries
If we had more than 3 levels, the corresponding counter variables would be called myitemsiv (level 4), myitemsv (level 5) and so forth, continuing the use of lower-case Roman numerals.
In addition to the labels, we’ll also set some values for leftmargin and rightmargin (see the LaTeX parameters diagram).



\documentclass{article}
\usepackage{enumitem}
\begin{document}

\newcommand{\randomtext}{Hello, here is some text without a meaning. Hello, here is some text without a meaning.}

\newcommand{\shortrandomtext}{Hello, here is some text.}
% Create a custom list based on enumerate
% It is called "myitems"
% We'll create a list that is 3 levels deep
\newlist{myitems}{enumerate}{3}

% Configure the behaviour of level 1 entries
% NOTE: we use the list counter "myitemsi"
\setlist[myitems, 1]
{label=\arabic{myitemsi}., %1., 2., 3., ...
leftmargin=\parindent,
rightmargin=10pt
}

% Configure the behaviour of level 2 entries
% NOTE: we use the list counter "myitemsii"
\setlist[myitems, 2]
{label=\arabic{myitemsi}.\arabic{myitemsii}, %1.1, 1.2, 1.3...
leftmargin=15pt,
rightmargin=15pt}

% Configure the behaviour of level 3 entries
% NOTE: we use the list counter "myitemsiii"
\setlist[myitems, 3]
% Use a label of 1.1:<kern>(a), 1.1:<kern>(b) etc  
{label=\arabic{myitemsi}.\arabic{myitemsii}:\kern1.5pt(\alph{myitemsiii}),
leftmargin=30pt,
rightmargin=30pt}

\randomtext
\begin{myitems}
\item \randomtext
    \begin{myitems}
    \item \randomtext
        \begin{myitems}
        \item \randomtext
        \item \randomtext
        \end{myitems}
    \item \shortrandomtext
    \item \shortrandomtext
    \end{myitems}
\item \randomtext
\end{myitems}
\end{document}



 Open this enumitem example in Overleaf.

This example produces the following output:


Lists for lawyers: nesting lists to an arbitrary depth
The enumitem package lets you create lists which can be nested to an arbitrary depth, removing LaTeX’s limit of 4. Anyone preparing contracts with complex (deeply nested) clause structures might benefit from this, although the nested code does look a little intimidating...



\documentclass{article}
\usepackage{enumitem}

\begin{document}

\newlist{contract}{enumerate}{10}
\setlist[contract]{label*=\arabic*.}
\setlistdepth{10} 

\section*{Custom list nested to 10 levels deep!}

\begin{contract}
\item Level 1
 \begin{contract}
 \item Level 2
   \begin{contract}
   \item Level 3
     \begin{contract}
     \item Level 4
       \begin{contract}
       \item Level 5
        \begin{contract}
        \item Level 6
         \begin{contract}
         \item Level 7
          \begin{contract}
          \item Level 8
           \begin{contract}
           \item Level 9
            \begin{contract}
            \item Level 10
          \end{contract}
         \end{contract}
        \end{contract}
       \end{contract}
      \end{contract}
     \end{contract}
    \end{contract}
   \end{contract}
  \end{contract}
 \end{contract}
\end{document}



 Open this enumitem example in Overleaf.

This example produces the following output:


Custom bullets using the enumitem package and MetaPost
The following examples only work with LuaLaTeX and are designed to give a suggestion of some possibilities—of course, substitute MetaPost with your preferred drawing application/tool! 
These examples use the luamplib package and also demonstrate expandable commands, such as \the and \directlua,  can be used within the MetaPost code.

Example 1: auto-sizing bullet points
This example produces bullet points that reduce in size as the list depth increases. Click on the “Open in Overleaf” link to run the example and view the full code.



% Declare a new itemize-based list via enumitem
\newlist{myEnumerate}{itemize}{6}

% The nosep option removes all vertical spacing
% the label=\protect\mpbullet causes all bullets to be 
% drawn by a macro that uses MetaPost code. \protect
% is required as noted in the enumitem manual 

\setlist[myEnumerate]{nosep,label=\protect\mpbullet}
\setlistdepth{6}

\begin{myEnumerate}
\item Level 1
  \begin{myEnumerate}
   \item Level 2
    \begin{myEnumerate}
     \item Level 3
      \begin{myEnumerate}
       \item Level 4
        \begin{myEnumerate}
         \item Level 5
          \begin{myEnumerate}
           \item Level 6
           \end{myEnumerate}
        \end{myEnumerate}
       \end{myEnumerate}
    \end{myEnumerate}
   \end{myEnumerate}
\end{myEnumerate}



 To see the full code, open this LuaLaTeX example in Overleaf.

This example produces the following output:


Example 2: funky custom bullets
This example was inspired by an example on tex.stackexchange which Overleaf has modified to create custom bullets using MetaPost code. Click on the “Open in Overleaf” link to run the example and view the full code.



\newlist{todolist}{itemize}{2}

\begin{itemize}
  \item Start thinking about what we hope to achieve
  \begin{todolist}
  \item[\mpdot] Identify objectives
  \item[\mpyingyang] Balance environmental impact 
  \item[\mpsquare{0}{5}{0}] Implement plans
    \begin{todolist}
    \item[\mpsquare{-0.5}{4}{0}] Stage 1 plans
    \item[\mpsquare{-0.5}{4}{-20}] Stage 2 plans
    \item[\mpsquare{-0.5}{4}{-40}] Stage 3 plans
    \item[\mpsquare{-0.5}{4}{-60}] Stage 4 plans
    \end{todolist}
  \end{todolist}
\end{itemize}



 To see the full code, open this LuaLaTeX example in Overleaf.

This example produces the following output:


Other features of the enumitem package
As noted, the enumitem package is extremely versatile and provides numerous features for using and customizing lists. For example, features we have not covered include:

referencing list entries: for example, see this tex.stackexchane question and example
controlling enumerate list numbering:
set the starting number of the first item
continue numbering of different enumerate lists
And many more! Browse tex.stackexchange to find many great examples of what you can do via enumitem—and, of course, read the package documentation.

Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Errors - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsErrorsContents

1 Alignment
2 Double subscript
3 Missing Math mode characters
4 References
5 Labeling
6 Float specifiers
7 Undefined control sequences
8 File not found
9 Missing number/illegal units of measure
10 Environment undefined (missing package)
11 Underfull and overfull boxes
12 Other


LaTeX error messages can sometimes be tricky to understand and fix. We've put together a list of common errors below, along with more information about what they mean and how to solve them.

Alignment
Misplaced alignment tab character &
Extra alignment tab has been changed to \cr.
Double subscript
Double subscript
Missing Math mode characters
Display math should end with $$
Missing $ inserted
References
There were undefined references
Reference XXX on page XXX undefined on input line XXX
Labeling
There were multiply-defined labels.
Label XXX multiply defined.
Float specifiers
`!h' float specifier changed to `!ht'.
`h' float specifier changed to `ht'."
No positions in optional float specifier."
Undefined control sequences
Undefined control sequence.
File not found
File XXX not found on input line XXX."
LaTeX Error: File XXX not found."
Package pdftex.def Error: File XXX not found."
Missing number/illegal units of measure
Missing number, treated as zero
Illegal unit of measure (pt inserted)
Environment undefined (missing package)
LaTeX Error: Environment tikzpicture undefined
LaTeX Error: Environment theorem undefined
LaTeX Error: Environment split undefined
LaTeX Error: Environment minipage* undefined
LaTeX Error: Environment maplelatex undefined
LaTeX Error: Environment mapleinput undefined
LaTeX Error: Environment maplegroup undefined
LaTeX Error: Environment flalign undefined
LaTeX Error: Environment figure* undefined
LaTeX Error: Environment comment undefined
LaTeX Error: Environment biblio_lat undefined
LaTeX Error: Environment align* undefined
LaTeX Error: Environment align undefined
LaTeX Error: Environment algorithm undefined
LaTeX Error: Environment adjustbox undefined
Underfull and overfull boxes
Although these warnings are not errors we list them here for convenience:

Understanding underfull and overfull box warning
Other
LaTeX Error: Can be used only in preamble
LaTeX Error: Missing \begindocument
LaTeX Error: \verb ended by end of line
No \author given
Misplaced \noalign
LaTeX Error: Something's wrong--perhaps a missing \item
There's no line here to end
Unknown graphics extension: .XXX
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Mathematical expressions - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsMathematical expressionsContents

1 Introduction
2 Mathematical modes

2.1 Inline math mode
2.2 Display math mode


3 Another example
4 Reference guide
5 Further reading


Introduction
LaTeX's features for typesetting mathematics make it a compelling choice for writing technical documents. This article shows the most basic commands needed to get started with writing maths using LaTeX.
Writing basic equations in LaTeX is straightforward, for example:



\documentclass{article}
\begin{document}

The well known Pythagorean theorem \(x^2 + y^2 = z^2\) was 
proved to be invalid for other exponents. 
Meaning the next equation has no integer solutions:

\[ x^n + y^n = z^n \]

\end{document}



 Open this example in Overleaf



As you see, the way the equations are displayed depends on the delimiter, in this case \[...\] and \(...\).

Mathematical modes
LaTeX allows two writing modes for mathematical expressions: the inline math mode and display math mode:

inline math mode is used to write formulas that are part of a paragraph
display math mode is used to write expressions that are not part of a paragraph, and are therefore put on separate lines
Inline math mode
You can use any of these "delimiters" to typeset your math in inline mode:

\(...\)
$...$
\begin{math}...\end{math}
They all work and the choice is a matter of taste, so let's see some examples.



\documentclass{article}
\begin{document}

\noindent Standard \LaTeX{} practice is to write inline math by enclosing it between \verb|\(...\)|:

\begin{quote}
In physics, the mass-energy equivalence is stated 
by the equation \(E=mc^2\), discovered in 1905 by Albert Einstein.
\end{quote}

\noindent Instead if writing (enclosing) inline math between \verb|\(...\)| you can use \texttt{\$...\$} to achieve the same result:

\begin{quote}
In physics, the mass-energy equivalence is stated 
by the equation $E=mc^2$, discovered in 1905 by Albert Einstein.
\end{quote}

\noindent Or, you can use \verb|\begin{math}...\end{math}|:

\begin{quote}
In physics, the mass-energy equivalence is stated 
by the equation \begin{math}E=mc^2\end{math}, discovered in 1905 by Albert Einstein.
\end{quote}
\end{document}



 Open this example in Overleaf




Display math mode
Use one of these constructions to typeset maths in display mode:

\[...\]
\begin{displaymath}...\end{displaymath}
\begin{equation}...\end{equation}
Display math mode has two versions which produce numbered or unnumbered equations. Let's look at a basic example:



\documentclass{article}
\begin{document}
The mass-energy equivalence is described by the famous equation

\[E=mc^2\]

discovered in 1905 by Albert Einstein. 
In natural units ($c$ = 1), the formula expresses the identity

\begin{equation}
E=m
\end{equation}
\end{document}



 Open this example in Overleaf




Another example
The following example uses the equation* environment which is provided by the amsmath package—see the  amsmath article for more information.



\documentclass{article}
\usepackage{amsmath} % for the equation* environment
\begin{document}

This is a simple math expression \(\sqrt{x^2+1}\) inside text. 
And this is also the same: 
\begin{math}
\sqrt{x^2+1}
\end{math}
but by using another command.

This is a simple math expression without numbering
\[\sqrt{x^2+1}\] 
separated from text.

This is also the same:
\begin{displaymath}
\sqrt{x^2+1}
\end{displaymath}

\ldots and this:
\begin{equation*}
\sqrt{x^2+1}
\end{equation*}

\end{document}



 Open this example in Overleaf



Reference guide
Below is a table with some common maths symbols. For a more complete list see the   List of Greek letters and math symbols:



description
code
examples


Greek letters
\alpha \beta \gamma \rho \sigma \delta \epsilon
$$ \alpha \ \beta \ \gamma \ \rho \ \sigma \ \delta \ \epsilon $$


Binary operators
\times \otimes \oplus \cup \cap




×


{\displaystyle \times }

 



⊗


{\displaystyle \otimes }

 



⊕


{\displaystyle \oplus }

 



∪


{\displaystyle \cup }

 



∩


{\displaystyle \cap }




Relation operators
< > \subset \supset \subseteq \supseteq




<
 
>⊂
 
⊃
 
⊆
 
⊇


{\displaystyle <\ >\subset \ \supset \ \subseteq \ \supseteq }




Others
\int \oint \sum \prod




∫
 
∮
 
∑
 
∏


{\displaystyle \int \ \oint \ \sum \ \prod }



Different classes of mathematical symbols are characterized by different formatting (for example, variables are italicized, but operators are not) and different spacing.

Further reading
The mathematics mode in LaTeX is very flexible and powerful, there is much more that can be done with it:

Subscripts and superscripts
Brackets and Parentheses
Fractions and Binomials
Aligning Equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Subscripts and superscripts - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsSubscripts and superscriptsContents

1 Introduction
2 More detailed examples
3 Operators using subscripts and superscripts
4 Open all code fragments in Overleaf
5 Reference guide

5.1 Further reading




Introduction
The use of superscripts and subscripts is very common in mathematical expressions involving exponents, indexes, and in some special operators. This article explains how to write superscripts and subscripts in simple expressions, integrals, summations and so forth.
Definite integrals are some of the most common mathematical expressions, so let's see an example:



\[ \int\limits_0^1 x^2 + y^2 \ dx \]



 Open this example in Overleaf.


This LaTeX code produces:
\[ \int\limits_0^1 x^2 + y^2 \ dx \]
By convention, superscripts and subscripts in LaTeX are created using the characters ^ and _ respectively; for example, the exponents applied to \(x\) and \(y\) in the code fragment above. Those characters can also be used with mathematical symbols, such as the  integral (\int) included in the example above where _ is used to set the lower limit and the ^ for the upper limit. 
The command \limits changes the way the limits are displayed in the integral, if not present the limits would be next to the integral symbol instead of being on top and bottom:



\[ \int_0^1 x^2 + y^2 \ dx \]



 Open this example in Overleaf.


This LaTeX code produces:
\[ \int_0^1 x^2 + y^2 \ dx \]

More detailed examples
The symbols _ and ^ can also be combined in the same expression, for example: 



\[ a_1^2 + a_2^2 = a_3^2 \]



 Open this example in Overleaf.


This LaTeX code produces:
\[ a_1^2 + a_2^2 = a_3^2 \]
If the expression contains long superscripts or subscripts, these need to be collected in braces, as LaTeX normally applies the mathematical commands ^ and _ only to the following character:



\[ x^{2 \alpha} - 1 = y_{ij} + y_{ij}  \]



 Open this example in Overleaf.

This LaTeX code produces:
\[ x^{2 \alpha} - 1 = y_{ij} + y_{ij}  \]
Subscripts and superscripts can be nested and combined in various ways. When nesting subscripts/superscripts, however, remember that each command must refer to a single element; this can be a single letter or number, as in the examples above, or a more complex mathematical expression collected in braces or brackets. For example:



\[ (a^n)^{r+s} = a^{nr+ns}  \]



 Open this example in Overleaf.

This LaTeX code produces:
\[ (a^n)^{r+s} = a^{nr+ns}  \]

Operators using subscripts and superscripts
Some mathematical operators may require subscripts and superscripts. The most frequent cases are those of the integral \int (check the  introduction) and the summation (\sum) operators, whose bounds are typeset precisely with subscripts and superscripts.



\[ \sum_{i=1}^{\infty} \frac{1}{n^s} 
= \prod_p \frac{1}{1 - p^{-s}} \]



 Open this example in Overleaf.


This LaTeX code produces:
\[ \sum_{i=1}^{\infty} \frac{1}{n^s} 
= \prod_p \frac{1}{1 - p^{-s}} \]
For other frequently used operators that require subscripts/superscripts check the reference guide.

Open all code fragments in Overleaf
Use the link provided below to open all the examples above as a single Overleaf project: 



Here are some examples of simple usage of subscripts and superscripts:

\[ \int\limits_0^1 x^2 + y^2 \ dx \]

\vspace{1cm}

Using superscript and subscripts in the same expression

\[ a_1^2 + a_2^2 = a_3^2 \]

\vspace{1cm}

Longer subscripts and superscripts:

\[ x^{2 \alpha} - 1 = y_{ij} + y_{ij}  \]

\vspace{1cm}

Nested subscripts and superscripts

\[ (a^n)^{r+s} = a^{nr+ns} \]

\vspace{1cm}

Example of a mathematical equation with subscripts and superscripts

\[ \sum_{i=1}^{\infty} \frac{1}{n^s} = \prod_p \frac{1}{1 - p^{-s}} \]

\vspace{1cm}

Squared root usage

\[ \sqrt[4]{4ac} = \sqrt{4ac}\sqrt{4ac} \]



 Open all the examples above as a single Overleaf project.



Reference guide
Additional examples and operators



LaTeX markup

Renders as


a_{n_i}






a


n

i






{\displaystyle a_{n_{i}}}




\int_{i=1}^n






∫

i
=
1


n




{\displaystyle \int _{i=1}^{n}}




\sum_{i=1}^{\infty}






∑

i
=
1


∞




{\displaystyle \sum _{i=1}^{\infty }}




\prod_{i=1}^n






∏

i
=
1


n




{\displaystyle \prod _{i=1}^{n}}




\cup_{i=1}^n






∪

i
=
1


n




{\displaystyle \cup _{i=1}^{n}}




\cap_{i=1}^n






∩

i
=
1


n




{\displaystyle \cap _{i=1}^{n}}




\oint_{i=1}^n






∮

i
=
1


n




{\displaystyle \oint _{i=1}^{n}}




\coprod_{i=1}^n






∐

i
=
1


n




{\displaystyle \coprod _{i=1}^{n}}



There are also bigcup and bigcap commands similar to cup and cap but those are used for larger expressions.

Further reading
For more information see

List of Greek letters and math symbols
Operators
Integrals, sums and limits
Mathematical fonts
Brackets and Parentheses
The Great, Big list of LaTeX Symbols (a full list of available mathematical symbols in the amssymb package)
The not so short introduction to LaTeX2ε
Aligning equations with amsmath
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Brackets and Parentheses - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBrackets and ParenthesesContents

1 Introduction
2 Some examples
3 Controlling types and sizes
4 Reference guide
5 Further reading


Introduction
Parentheses and brackets are very common in mathematical formulas. You can easily control the size and style of brackets in LaTeX; this article explains how.
Here's an table of listing some common math braces and parentheses used in LaTeX:



Type

LaTeX markup

Renders as


Parentheses; round brackets

(x+y)

\((x+y)\)


Brackets; square brackets

[x+y]

\([x+y]\)


Braces; curly brackets

\{ x+y \}

\(\{ x+y \}\)


Angle brackets

\langle x+y \rangle

\(\langle x+y\rangle\)


Pipes; vertical bars

|x+y|

\(\displaystyle| x+y |\)


Double pipes

\|x+y\|

\(\| x+y \|\)

Some examples
The size of brackets and parentheses can be manually set, or they can be resized dynamically in your document, as shown in the next example:



\[ 
F = G \left( \frac{m_1 m_2}{r^2} \right)
\]



 Open this LaTeX fragment in Overleaf

The above example produces the following output:
\[ 
F = G \left( \frac{m_1 m_2}{r^2} \right)
\]
Notice that to insert the parentheses or brackets, the \left and \right commands are used. Even if you are using only one bracket, both commands are mandatory. \left and \right can dynamically adjust the size, as shown by the next example:



\[ 
 \left[  \frac{ N } { \left( \frac{L}{p} \right)  - (m+n) }  \right]
\]



 Open this LaTeX fragment in Overleaf

The above example produces the following output:
\[\left[  \frac{ N } { \left( \frac{L}{p} \right)  - (m+n) }  \right]\]
When writing multi-line equations with the align, align* or aligned environments, the \left and \right commands must be balanced on each line and on the same side of  &. Therefore the following code snippet will fail with errors: 



\begin{align*}
y  = 1 + & \left(  \frac{1}{x} + \frac{1}{x^2} + \frac{1}{x^3} + \ldots  \\
  & \quad  + \frac{1}{x^{n-1}} + \frac{1}{x^n} \right)
\end{align*}



 Open this LaTeX fragment in Overleaf (with errors)

The solution is to use "invisible" brackets to balance things out, i.e. adding a \right. at the end of the first line, and a \left. at the start of the second line after &:



\begin{align*}
y  = 1 + & \left(  \frac{1}{x} + \frac{1}{x^2} + \frac{1}{x^3} + \ldots \right. \\
  &\left. \quad + \frac{1}{x^{n-1}} + \frac{1}{x^n} \right)
\end{align*}



 Open this LaTeX fragment in Overleaf

The above example produces the following output:


Controlling types and sizes
The size of the brackets can be controlled explicitly, as shown in this LaTeX code fragment:



\[
 \Biggl \langle 3x+7 \biggr \rangle
\]



 Open this LaTeX fragment in Overleaf

The above example produces the following output:
\[\Biggl \langle 3x+7 \biggr \rangle\]
The commands \Biggl and \biggr establish the size of the delimiters  <  and  >  respectively, with the l or r indicating whether it's the left or the right parenthesis. For a complete list of parentheses and sizes see the reference guide.

Reference guide


LaTeX markup

Renders as


\bigl( \Bigl( \biggl( \Biggl(







(




(




(




(




{\displaystyle {\big (}{\Big (}{\bigg (}{\Bigg (}}




\bigr] \Bigr] \biggr] \Biggr]







]




]




]




]




{\displaystyle {\big ]}{\Big ]}{\bigg ]}{\Bigg ]}}




\bigl\{ \Bigl\{ \biggl\{ \Biggl\{







{




{




{




{




{\displaystyle {\big \{}{\Big \{}{\bigg \{}{\Bigg \{}}




\bigl \langle \Bigl \langle \biggl \langle \Biggl \langle 







⟨




⟨




⟨




⟨




{\displaystyle {\big \langle }{\Big \langle }{\bigg \langle }{\Bigg \langle }}




\bigr \rangle \Bigr \rangle \biggr \rangle \Biggr \rangle 







⟩




⟩




⟩




⟩




{\displaystyle {\big \rangle }{\Big \rangle }{\bigg \rangle }{\Bigg \rangle }}




\big| \Big| \bigg| \Bigg|

\(\displaystyle\big| \; \Big| \; \bigg| \; \Bigg|\)


\big\| \Big\| \bigg\| \Bigg\|

\(\displaystyle\big\| \; \Big\| \; \bigg\| \; \Bigg\|\)


\bigl \lceil \Bigl \lceil \biggl \lceil \Biggl \lceil 

\(\displaystyle\big \lceil \Big \lceil \bigg \lceil \Bigg \lceil\)


\bigr \rceil \Bigr \rceil \biggr \rceil \Biggr \rceil 

\(\displaystyle\big \rceil \Big \rceil \bigg \rceil \Bigg \rceil\)


\bigl \lfloor \Bigl \lfloor \biggl \lfloor \Biggl \lfloor 

\(\displaystyle\big \lfloor \Big \lfloor \bigg \lfloor \Bigg \lfloor\)


\bigr \rfloor \Bigr \rfloor \biggr \rfloor \Biggr \rfloor 

\(\displaystyle\big \rfloor \Big \rfloor \bigg \rfloor \Bigg \rfloor\)

Further reading
Mathematical expressions
Subscripts and superscripts
Aligning equations with amsmath
Display style in math mode
Operators
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Matrices - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsMatricesContents

1 amsmath matrix environments
2 Inline matrices
3 Further reading


amsmath matrix environments
The amsmath package provides commands to typeset matrices with different delimiters. Once you have loaded \usepackage{amsmath} in your preamble, you can use the following environments in your math environments:



Type

LaTeX markup

Renders as


Plain

\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}

\(\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}\)


Parentheses;round brackets

\begin{pmatrix}1 & 2 & 3\\a & b & c\end{pmatrix}

\(\begin{pmatrix}1 & 2 & 3\\a & b & c\end{pmatrix}\)


Brackets;square brackets

\begin{bmatrix}1 & 2 & 3\\a & b & c\end{bmatrix}

\(\begin{bmatrix}1 & 2 & 3\\a & b & c\end{bmatrix}\)


Braces;curly brackets

\begin{Bmatrix}1 & 2 & 3\\a & b & c\end{Bmatrix}

\(\begin{Bmatrix}1 & 2 & 3\\a & b & c\end{Bmatrix}\)


Pipes

\begin{vmatrix}1 & 2 & 3\\a & b & c\end{vmatrix}

\(\begin{vmatrix}1 & 2 & 3\\a & b & c\end{vmatrix}\)


Double pipes

\begin{Vmatrix}1 & 2 & 3\\a & b & c\end{Vmatrix}

\(\begin{Vmatrix}1 & 2 & 3\\a & b & c\end{Vmatrix}\)

If you need to create matrices with different delimiters, you can add them manually to a plain matrix. For example:



LaTeX markup

Renders as


\left\lceil\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}\right\rceil

\(\left\lceil\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}\right\rceil\)


\left\langle\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}\right\rvert

\(\left\langle\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}\right\rvert\)


\left\langle\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}\right\rangle

\(\left\langle\begin{matrix}1 & 2 & 3\\a & b & c\end{matrix}\right\rangle\)

Inline matrices
When typesetting inline math, the usual matrix environments above may look too big. It may be better to use smallmatrix in such situations, although you will need to provide your own delimiters.



\documentclass{article}
\usepackage{amsmath}
\begin{document}
\noindent Trying to typeset an inline matrix here:
 $\begin{pmatrix}
  a & b\\ 
  c & d
\end{pmatrix}$,  
but it looks too big, so let's try 
$\big(\begin{smallmatrix}
  a & b\\
  c & d
\end{smallmatrix}\big)$ 
instead.
\end{document}



 Open this smallmatrix example in Overleaf

The following image shows the output produced by the example above:

The mathtools package provides psmallmatrix, bsmallmatrix etc environments for convenience.

Further reading
Mathematical expressions
Brackets_and_Parentheses
Aligning equations with amsmath
Display style in math mode
The not so short introduction to LaTeX2ε
amsmath package documentation
mathtools package documentation
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Fractions and Binomials - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsFractions and BinomialsContents

1 Introduction
2 Displaying fractions
3 Text-style fractions
4 Size and spacing within typeset mathematics
5 Continued fractions
6 A final example
7 Further reading


Introduction
This article explains how to typeset fractions and binomial coefficients, starting with the following example which uses the amsmath package:



\documentclass{article}
\usepackage{amsmath}
\begin{document}
The binomial coefficient, \(\binom{n}{k}\), is defined by the expression:
\[
    \binom{n}{k} = \frac{n!}{k!(n-k)!}
\]
\end{document}



 Open this example in Overleaf.

The amsmath package is loaded by adding the following line to the document preamble:




\usepackage{amsmath}




Here is the output produced:





Displaying fractions
The visual appearance of fractions will change depending on whether they appear inline, as part of a paragraph, or typeset as standalone material displayed on their own line. The next example demonstrates those changes to visual appearance:   



\documentclass{article}
% Using the geometry package to reduce
% the width of help article graphics
\usepackage[textwidth=8cm]{geometry}
\begin{document}
Fractions can be used inline within the paragraph text, for 
example \(\frac{1}{2}\), or displayed on their own line, 
such as this:
\[\frac{1}{2}\]
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Note: More information on inline and display versions of mathematics can be found in the Overleaf article Display style in math mode.
Our example fraction is typeset using the \frac command (\frac{1}{2}) which has the general form \frac{numerator}{denominator}.

Text-style fractions
The following example demonstrates typesetting text-only fractions by using the \text{...} command provided by the amsmath package. The \text{...} command is used to prevent LaTeX typesetting the text as regular mathematical content.



\documentclass{article}
% Using the geometry package to reduce
% the width of help article graphics
\usepackage[textwidth=8cm]{geometry}
\usepackage{amsmath}% For the \text{...} command
\begin{document}
We use the \texttt{amsmath} package command
\verb|\text{...}| to create text-only fractions
like this:

\[\frac{\text{numerator}}{\text{denominator}}\]

Without the \verb|\text{...}| command the result 
looks like this:

\[\frac{numerator}{denominator}\]
\end{document}



 Open this example in Overleaf.

This example produces the following output:





Size and spacing within typeset mathematics
The size and spacing of mathematical material typeset by LaTeX is determined by algorithms which apply size and positioning data contained inside the fonts used to typeset mathematics. 
Occasionally, it may be necessary, or desirable, to override the default mathematical styles—size and spacing of math elements—chosen by LaTeX, a topic discussed in the Overleaf help article Display style in math mode.
To summarize, the default style(s) used to typeset mathematics can be changed by the following commands:

\textstyle: apply the style used for mathematics typeset in paragraphs;
\displaystyle: apply the style used for mathematics typeset on lines by themselves;
\scriptstyle: apply the style used for subscripts or superscripts;
\scriptscriptstyle: apply the style used for second-order subscripts or superscripts;
which are demonstrated in the next example.



\documentclass{article}
% Using the geometry package to reduce
% the width of help article graphics
\usepackage[textwidth=9.5cm]{geometry}
\begin{document}

Fractions typeset within a paragraph typically look like this: \(\frac{3x}{2}\). You can force \LaTeX{} to use the larger display style, such as \( \displaystyle \frac{3x}{2} \), which also has an effect on line spacing. The size of maths in a paragraph can also be reduced: \(\scriptstyle \frac{3x}{2}\) or \(\scriptscriptstyle \frac{3x}{2}\). For the \verb|\scriptscriptstyle| example note the reduction in spacing: characters are moved closer to the \textit{vinculum} (the line separating numerator and denominator).

Equally, you can change the style of mathematics normally typeset in display style:

\[f(x)=\frac{P(x)}{Q(x)}\quad \textrm{and}\quad \textstyle f(x)=\frac{P(x)}{Q(x)}\quad \textrm{and}\quad \scriptstyle f(x)=\frac{P(x)}{Q(x)}\]
\end{document}



 Open this example in Overleaf

This example produces the following output:





Continued fractions
Fractions can be nested to obtain more complex expressions. The second pair of fractions displayed in the following example both use the \cfrac command, designed specifically to produce continued fractions. To use \cfrac you must load the amsmath package in the document preamble.



\documentclass{article}
% Using the geometry package to reduce
% the width of help article graphics
\usepackage[textwidth=9.5cm]{geometry}
% Load amsmath to access the \cfrac{...}{...} command
\usepackage{amsmath}
\begin{document}
Fractions can be nested but, in this example, note how the default math styles, as used in the denominator, don't produce ideal results...

\[ \frac{1+\frac{a}{b}}{1+\frac{1}{1+\frac{1}{a}}} \]

\noindent ...so we use \verb|\displaystyle| to improve typesetting:

\[ \frac{1+\frac{a}{b}} {\displaystyle 1+\frac{1}{1+\frac{1}{a}}} \]

Here is an example which uses the \texttt{amsmath} \verb|\cfrac| command:

\[
  a_0+\cfrac{1}{a_1+\cfrac{1}{a_2+\cfrac{1}{a_3+\cdots}}}
\]

Here is another example, derived from the \texttt{amsmath} documentation, which demonstrates left
and right placement of the numerator using \verb|\cfrac[l]| and \verb|\cfrac[r]| respectively:
\[
\cfrac[l]{1}{\sqrt{2}+
\cfrac[r]{1}{\sqrt{2}+
\cfrac{1}{\sqrt{2}+\dotsb}}}
\]
\end{document}



 Open this example in Overleaf.

This example produces the following output:





A final example
This example demonstrates a more complex continued fraction:



\documentclass{article}
\usepackage{amsmath}
\begin{document}
\newcommand*{\contfrac}[2]{%
{
  \rlap{$\dfrac{1}{\phantom{#1}}$}%
  \genfrac{}{}{0pt}{0}{}{#1+#2}%
}
}
\[
  a_0 +
  \contfrac{a_1}{
  \contfrac{a_2}{
  \contfrac{a_3}{
  \genfrac{}{}{0pt}{0}{}{\ddots}
  }}}
\]

\end{document}



 Open this example in Overleaf.

This example produces the following output:





Further reading
For more information see:

Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Aligning equations with amsmath
Operators
Mathematical fonts
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Aligning equations with amsmath - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsAligning equations with amsmathContents

1 Introduction
2 Writing a single equation
3 Displaying long equations
4 Splitting and aligning an equation
5 Aligning several equations
6 Grouping and centering equations
7 Further reading


Introduction
The amsmath package provides a handful of options for displaying equations. You can choose the layout that better suits your document, even if the equations are really long, or if you have to include several equations in the same line. 
The standard LaTeX tools for equations may lack some flexibility, causing overlapping or even trimming part of the equation when it's too long. We can surpass such difficulties by using the amsmath package, which can be added to preamble of your document using  \usepackage{amsmath}. 
Let's start with a basic example:



\begin{equation} \label{eq1}
\begin{split}
A & = \frac{\pi r^2}{2} \\
 & = \frac{1}{2} \pi r^2
\end{split}
\end{equation}



 Open this amsmath fragment in Overleaf

The following graphic shows the output produced by the LaTeX code:

You have to wrap your equation in the equation environment if you want it to be numbered, use equation* (with an asterisk) otherwise. Inside the equation environment, use the split environment to split the equations into smaller pieces, these smaller pieces will be aligned accordingly. The double backslash works as a newline character. Use the ampersand character &, to set the points where the equations are vertically aligned.

Writing a single equation
To display a single equation, as mentioned in the introduction, you have to use the equation* or equation environment, depending on whether you want the equation to be numbered or not. Additionally, you might add a label for future reference within the document.



\begin{equation} \label{eu_eqn}
e^{\pi i} + 1 = 0
\end{equation}

The beautiful equation \ref{eu_eqn} is known as the Euler equation.



 Open this amsmath fragment in Overleaf

The following graphic shows the output produced by the LaTeX code:

You can also  open a more complete example of the amsmath package in Overleaf.


Displaying long equations
For equations longer than a line use the multline environment. Insert a double backslash to set a point for the equation to be broken. The first part will be aligned to the left and the second part will be displayed in the next line and aligned to the right.
Again, the use of an asterisk * in the environment name determines whether the equation is numbered or not.



\begin{multline*}
p(x) = 3x^6 + 14x^5y + 590x^4y^2 + 19x^3y^3\\ 
- 12x^2y^4 - 12xy^5 + 2y^6 - a^3b^3
\end{multline*}



 Open this multiline equation amsmath fragment in Overleaf

The following graphic shows the output produced by the LaTeX code:

You can also  open a more complete example of the amsmath package in Overleaf.


Splitting and aligning an equation
Split is very similar to multline. Use the split environment to break an equation and to align it in columns, just as if the parts of the equation were in a table. This environment must be used inside an equation environment. For an example check the introduction of this document.

Aligning several equations
If there are several equations that you need to align vertically, the align environment will do it:



\begin{align*} 
2x - 5y &=  8 \\ 
3x + 9y &=  -12
\end{align*}



 Open this amsmath fragment in Overleaf

The following graphic shows the output produced by the LaTeX code:

Usually the binary operators (>, < and =) are the ones aligned for a nice-looking document. 
As mentioned before, the ampersand character & determines where the equations align. Let's check a more complex example:



\begin{align*}
x&=y           &  w &=z              &  a&=b+c\\
2x&=-y         &  3w&=\frac{1}{2}z   &  a&=b\\
-4 + 5x&=2+y   &  w+2&=-1+w          &  ab&=cb
\end{align*}



 Open this amsmath fragment in Overleaf

The following graphic shows the output produced by the LaTeX code:

Here we arrange the equations in three columns. LaTeX assumes that each equation consists of two parts separated by an & and that each equation is separated from the one before by an &.
Again, use * to toggle the equation numbering. When numbering is allowed, you can label each row individually.

Grouping and centering equations
If you just need to display a set of consecutive equations, centered and with no alignment whatsoever, use the gather environment. The asterisk trick to set/unset the numbering of equations also works here.



\begin{gather*} 
2x - 5y =  8 \\ 
3x^2 + 9y =  3a + c
\end{gather*}



 Open this amsmath fragment in Overleaf

The following graphic shows the output produced by the LaTeX code:


Further reading
For more information see

Mathematical expressions
Brackets and Parentheses
Subscripts and superscripts
Spacing in math mode
Display style in math mode
Mathematical fonts
List of Greek letters and math symbols
Operators
Fractions and Binomials
amsmath package documentation
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Operators - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsOperatorsCharacters in mathematical mode are usually shown in italics, but sometimes certain function names require different formatting which can be accomplished by using operators defined in LaTeX.

Contents

1 Introduction
2 Operators in different contexts
3 Defining your own operators
4 Reference guide
5 Further reading


Introduction
Trigonometrical functions, logarithms, and others can be written in a document by means of some special commands, as demonstrated in the following example:



Examples of mathematical operators:
\[
    \sin(a + b) = \sin a \cos b + \cos b \sin a
.\]



 Open this example in Overleaf

This example produces the following output:

The commands will print the name of the function in upright (Roman) text instead of italics.

Operators in different contexts
Some operators can take parameters that are handled in a special way, for instance, limits.



\documentclass{article}
\usepackage{amsmath}
\begin{document}
Testing notation for limits
\[
    \lim_{h \to 0 } \frac{f(x+h)-f(x)}{h}
.\]
This operator changes when used alongside 
text \( \lim_{h \to 0} (x-h) \).
\end{document}



 Open this example in Overleaf

This example produces the following output:

The package amsmath is needed for the macro \to; without this package, \rightarrow has to be used.
Notice how the limit declaration can include a subscript. See the reference guide for a complete list of available operators.
Some languages may add or change some commands, check the main page for language-specific articles.

Defining your own operators
If you need to add a personalized operator to be displayed in Roman font instead of italics use \DeclareMathOperator



\documentclass{article}
\usepackage{amsmath}
\DeclareMathOperator{\arctg}{arctg}
\begin{document}
User-defined operator for arctangent:
\[
    \arctg \frac{\pi}{3} = \sqrt{3}
.\]
\end{document}



 Open this example in Overleaf

This example produces the following output:

The command \DeclareMathOperator takes two parameters, the first one is the name of the new operator and the second one is the text to be displayed. For this command to work you have to import the package amsmath in the preamble with

\usepackage{amsmath}

The command can be slightly modified if you need that your defined operator uses subscripts, as the \lim operator, in such case use \DeclareMathOperator*.

Reference guide
Complete list of mathematical operators



Operator

Renders as


\cos




cos


{\displaystyle \cos }




\csc




csc


{\displaystyle \csc }




\exp




exp


{\displaystyle \exp }




\ker




ker


{\displaystyle \ker }




\limsup




lim sup


{\displaystyle \limsup }




\min




min


{\displaystyle \min }




\sinh




sinh


{\displaystyle \sinh }




\arcsin




arcsin


{\displaystyle \arcsin }




\cosh




cosh


{\displaystyle \cosh }




\deg




deg


{\displaystyle \deg }




\gcd




gcd


{\displaystyle \gcd }




\lg




lg


{\displaystyle \lg }




\ln




ln


{\displaystyle \ln }




\Pr




Pr


{\displaystyle \Pr }




\sup
sup


\arctan




arctan


{\displaystyle \arctan }




\cot
cot


\det




det


{\displaystyle \det }




\hom




hom


{\displaystyle \hom }




\lim
lim


\log




log


{\displaystyle \log }




\sec
sec


\tan




tan


{\displaystyle \tan }




\arg




arg


{\displaystyle \arg }




\coth




coth


{\displaystyle \coth }




\dim




dim


{\displaystyle \dim }




\liminf




lim inf


{\displaystyle \liminf }




\max




max


{\displaystyle \max }




\sin




sin


{\displaystyle \sin }




\tanh




tanh


{\displaystyle \tanh }



Further reading
For more information see

Mathematical expressions
Subscripts and superscripts
Fractions and Binomials
Spacing in math mode
Integrals, sums and limits
Display style in math mode
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Spacing in math mode - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsSpacing in math modeThis article explains how to insert spaces of different widths in math mode.

Contents

1 Introduction
2 Spaces
3 Operators spacing
4 User-defined binary and relational operators
5 Reference guide
6 Further reading


Introduction
Adjusting (La)TeX's default math mode spacing can be useful in certain  situations; let's see an example:



\documentclass{article}
\usepackage{amssymb}
\begin{document}
Assume we have the next sets
\[
S = \{ z \in \mathbb{C}\, |\, |z| < 1 \} \quad \textrm{and} \quad S_2=\partial{S}
\]
\end{document}



 Open this example in Overleaf

This example produces the following output:

As you see in this example, a mathematical text can be explicitly spaced by means of some special commands.

Spaces
The example below contains a complete list of spaces inserted using various commands and demonstrates their effect on the typeset math.



\documentclass{article}
\usepackage{amsmath}
\begin{document}
Spaces in mathematical mode.

\begin{align*}
f(x) &= x^2\! +3x\! +2 \\
f(x) &= x^2+3x+2 \\
f(x) &= x^2\, +3x\, +2 \\
f(x) &= x^2\: +3x\: +2 \\
f(x) &= x^2\; +3x\; +2 \\
f(x) &= x^2\ +3x\ +2 \\
f(x) &= x^2\quad +3x\quad +2 \\
f(x) &= x^2\qquad +3x\qquad +2
\end{align*}
\end{document}



 Open this example in Overleaf

This example produces the following output:

Check the reference guide for a description of the commands.
Note: to see a description of the align* environment see Aligning equations with amsmath

Operators spacing
Spacing around operators and relations in math mode are governed by specific skip widths:

\thinmuskip (by default it is equal to 3 mu)
\medmuskip (by default it is equal to 4 mu)
\thickmuskip (by default it is equal to 5 mu)


\begin{align*}
3ax+4by=5cz\\
3ax<4by+5cz
\end{align*}



 Open this example in Overleaf

This example produces the following output:

For relational operators, such as \(<\), \(>\) and \(=\), LaTeX establishes \thickmuskip space. But for binary operators such as \(+\), \(-\) and \(\times\), the \medmuskip space is set. The difference is almost unnoticeable.

User-defined binary and relational operators
You can force the spacing used in binary or relational operators, so you can define your own.



\begin{align*}
34x^2a \mathbin{\#} 13bc \\
34x^2a \mathrel{\#} 13bc
\end{align*}



 Open this example in Overleaf

This example produces the following output:

The previous example sets a particular spacing before and after # by using \mathrel (relational) and \mathbin (binary) commands.

Reference guide
Description of spacing commands



LaTeX code
Description


\quad
space equal to the current font size (= 18 mu)


\,
3/18 of \quad (= 3 mu)


\:
4/18 of \quad (= 4 mu)


\;
5/18 of \quad (= 5 mu)


\!
-3/18 of \quad (= -3 mu)


\  (space after backslash!)
equivalent of space in normal text


\qquad
twice of \quad (= 36 mu)


Further reading
For more information see

Mathematical expressions
Brackets and Parentheses
Aligning equations with amsmath
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Integrals, sums and limits - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsIntegrals, sums and limitsContents

1 Integrals
2 Multiple integrals
3 Sums and  products
4 Limits
5 Examples
6 Further reading


Integrals
Integral expression can be added using the \int_{lower}^{upper}
command. 
Note, that integral expression may seems a little different in inline and display math mode.



LaTeX code
Output


Integral \(\int_{a}^{b} x^2 \,dx\) inside text



\[ \int_{a}^{b} x^2 \,dx \]


Multiple integrals
To obtain double/triple/multiple integrals and cyclic integrals you must use amsmath and esint (for cyclic integrals) packages.



LaTeX code
Output


\begin{gather*}
    \iint_V \mu(u,v) \,du\,dv
\\
    \iiint_V \mu(u,v,w) \,du\,dv\,dw
\\
    \iiiint_V \mu(t,u,v,w) \,dt\,du\,dv\,dw
\\
    \idotsint_V \mu(u_1,\dots,u_k) \,du_1 \dots du_k
\end{gather*}





\[
    \oint_V f(s) \,ds
\]




Sums and  products
Like integral, sum expression can be added using the \sum_{lower}^{upper} command. 



LaTeX code
Output


Sum $\sum_{n=1}^{\infty} 2^{-n} = 1$ inside text



\[ \sum_{n=1}^{\infty} 2^{-n} = 1 \]


In similar way you can obtain expression with product of a sequence of factors using the \prod_{lower}^{upper} command.



LaTeX code
Output


Product $\prod_{i=a}^{b} f(i)$ inside text



\[ \prod_{i=a}^{b} f(i) \]


Limits
Limit expression can be added using the \lim_{lower} command. 



LaTeX code
Output


Limit $\lim_{x\to\infty} f(x)$ inside text



\[ \lim_{x\to\infty} f(x) \]


Examples
Here is an example LaTeX document:



\documentclass{article}
\title{Integrals, Sums and Limits}
\author{Overleaf}
\date{}
\usepackage{amsmath}

\begin{document}

\maketitle

\section{Integrals}

Integral \(\int_{a}^{b} x^2 dx\) inside text.

\medskip

The same integral on display:
\[
    \int_{a}^{b} x^2 \,dx
\]
and multiple integrals:
\begin{gather*}
    \iint_V \mu(u,v) \,du\,dv
\\
    \iiint_V \mu(u,v,w) \,du\,dv\,dw
\\
    \iiiint_V \mu(t,u,v,w) \,dt\,du\,dv\,dw
\\
    \idotsint_V \mu(u_1,\dots,u_k) \,du_1 \dots du_k
\\
    \oint_V f(s) \,ds
\end{gather*}

\section{Sums and products}

Sum \(\sum_{n=1}^{\infty} 2^{-n} = 1\) inside text.

The same sum on display:
\[
    \sum_{n=1}^{\infty} 2^{-n} = 1
\]

Product \(\prod_{i=a}^{b} f(i)\) inside text.

The same product on display:
\[
    \prod_{i=a}^{b} f(i)
\]

\section{Limits}

Limit \(\lim_{x\to\infty} f(x)\) inside text.

The same limit on display:
\[
    \lim_{x\to\infty} f(x)
\]

\end{document}



 Open this example in Overleaf



Further reading
For more information see

Mathematical expressions
Subscripts and superscripts
Fractions and Binomials
Display style in math mode
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Display style in math mode - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsDisplay style in math modeContents

1 Introduction
2 Overriding default mathematical styles
3 Further reading


Introduction
This article explains how to manually adjust the style of typeset mathematics—but we’ll start with a quick reminder of the visible differences between inline and display style math. 
Typeset mathematics contained inline (within) with the text of a paragraph needs to take less space than the same math typeset outside the paragraph text as standalone, display-style, material. To see this in practice, let’s explain that the equation \( f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \) may diverge or converge depending on the value of \(x\). We can also typeset \(f(x)\) outside the paragraph in display style:
\[ f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \]
Even a cursory glance at the previous example reveals changes in the size and formatting of math symbols, such as \(\sum\) and the placement of its limits, together with variations in size/positioning of superscripts, subscripts and fractions. 
These mathematical typography issues are an interplay of typesetting algorithms built into TeX engines together with certain spacing parameters contained in math fonts. Those font parameters help fine-tune math typesetting according to the design characteristics of the math font(s) being used.

Overriding default mathematical styles
Occasionally you may want to change the default style used to typeset a piece of mathematics. For example, you might want to change inline math, such as \(f(x) = \frac{1}{1+x}\), and include it in the paragraph but typeset in display style: \(\displaystyle f(x) = \frac{1}{1+x}\), although it does impact heavily on the line spacing. 
TeX engines provide several commands which can be used to override the default style in which a piece of math is typeset:

\textstyle: apply the style used for mathematics typeset in paragraphs
\displaystyle: apply the style used for mathematics typeset on lines by themselves
\scriptstyle: apply the style used for subscripts or superscripts
\scriptscriptstyle: apply the style used for second-order subscripts or superscripts
The canonical example is taken from page 142 of the TeXBook, although we've replaced $$ by LaTeX's preferred \[ and \]:

\[
a_0+{1\over a_1+
      {1\over a_2+
        {1 \over a_3 + 
           {1 \over a_4}}}}
\]

By default, this is typeset as:
\[a_0+{1\over a_1+{1\over a_2 +{1 \over a_3 + {1 \over a_4}}}}\]
The default typesetting style can be amended by using the \displaystyle command:

\[
a_0+{1\over\displaystyle a_1+
      {1\over\displaystyle a_2+
        {1 \over\displaystyle a_3 + 
           {1 \over\displaystyle a_4}}}}
\]

yielding 
\[a_0+{1\over\displaystyle a_1+{1\over\displaystyle a_2+{1 \over\displaystyle a_3 +{1 \over\displaystyle a_4}}}}\]
Here’s another example which demonstrates the effect of \textstyle, \scriptstyle and \scriptscriptstyle:

\[
\begin{eqnarray*}
f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\textstyle f(x) = \textstyle \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\scriptstyle f(x) = \scriptstyle \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\scriptscriptstyle f(x) = \scriptscriptstyle \sum_{i=0}^{n} \frac{a_i}{1+x}
\end{eqnarray*}
\]

which renders as 
\[
\begin{eqnarray*}
f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\textstyle f(x) = \textstyle \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\scriptstyle f(x) = \scriptstyle \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\scriptscriptstyle f(x) = \scriptscriptstyle \sum_{i=0}^{n} \frac{a_i}{1+x}
\end{eqnarray*}
\]
Here’s an example you can open in Overleaf:



\documentclass{article}
\usepackage{amsmath}
\title{Exploring math display styles}
\author{Overleaf team}
\begin{document}
\maketitle
Depending on the value of \(x\) the equation \( f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \) may diverge or converge.

\[ f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \]

\vspace{1cm}

Inline maths elements can be set with a different style: \(f(x) = \displaystyle \frac{1}{1+x}\). The same is true for display math material:

\begin{eqnarray*}
f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\textstyle f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\scriptstyle f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x} \\
\scriptscriptstyle f(x) = \sum_{i=0}^{n} \frac{a_i}{1+x}
\end{eqnarray*}
\end{document}



 Open this example in Overleaf



Further reading
For more information see

Mathematical expressions
Subscripts and superscripts
Aligning equations with amsmath
Spacing in math mode
Integrals, sums and limits
Mathematical fonts
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

List of Greek letters and math symbols - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsList of Greek letters and math symbols


Did you know? Overleaf has a symbol palette for users with premium accounts. Read more here. 
Note that some of the symbols require loading of the amssymb package, and this information is shown when you hover on the symbol.






Contents

1 Greek letters
2 Arrows
3 Miscellaneous symbols
4 Binary Operation/Relation Symbols
5 Further reading


Greek letters






α
A


{\displaystyle \alpha A}


\alpha A




ν
N


{\displaystyle \nu N}


\nu N






β
B


{\displaystyle \beta B}


\beta B




ξ
Ξ


{\displaystyle \xi \Xi }


\xi \Xi






γ
Γ


{\displaystyle \gamma \Gamma }


\gamma \Gamma




o
O



{\displaystyle oO\;}


o O






δ
Δ


{\displaystyle \delta \Delta }


\delta \Delta




π
Π


{\displaystyle \pi \Pi }


\pi \Pi






ϵ
ε
E



{\displaystyle \epsilon \varepsilon E\;}


\epsilon \varepsilon E




ρ
ϱ
P



{\displaystyle \rho \varrho P\;}


\rho \varrho P






ζ
Z


{\displaystyle \zeta Z}


\zeta Z




σ


Σ



{\displaystyle \sigma \,\!\Sigma \;}


\sigma \Sigma






η
H


{\displaystyle \eta H}


\eta H




τ
T


{\displaystyle \tau T}


\tau T






θ
ϑ
Θ


{\displaystyle \theta \vartheta \Theta }


\theta \vartheta \Theta




υ
Υ


{\displaystyle \upsilon \Upsilon }


\upsilon \Upsilon






ι
I


{\displaystyle \iota I}


\iota I




ϕ
φ
Φ


{\displaystyle \phi \varphi \Phi }


\phi \varphi \Phi






κ
K


{\displaystyle \kappa K}


\kappa K




χ
X


{\displaystyle \chi X}


\chi X






λ
Λ



{\displaystyle \lambda \Lambda \;}


\lambda \Lambda




ψ
Ψ


{\displaystyle \psi \Psi }


\psi \Psi






μ
M


{\displaystyle \mu M}


\mu M




ω
Ω


{\displaystyle \omega \Omega }


\omega \Omega 

Arrows






←


{\displaystyle \leftarrow }


\leftarrow




⇐


{\displaystyle \Leftarrow }


\Leftarrow






→


{\displaystyle \rightarrow }


\rightarrow




⇒



{\displaystyle \Rightarrow \;}


\Rightarrow






↔


{\displaystyle \leftrightarrow }


\leftrightarrow




⇌


{\displaystyle \rightleftharpoons }


\rightleftharpoons






↑


{\displaystyle \uparrow }


\uparrow




↓


{\displaystyle \downarrow }


\downarrow






⇑



{\displaystyle \Uparrow \;}


\Uparrow




⇓


{\displaystyle \Downarrow }


\Downarrow






⇔



{\displaystyle \Leftrightarrow \;}


\Leftrightarrow 




⇕


{\displaystyle \Updownarrow }


\Updownarrow






↦


{\displaystyle \mapsto }


\mapsto




⟼



{\displaystyle \longmapsto \;}


\longmapsto






↗


{\displaystyle \nearrow }


\nearrow




↘


{\displaystyle \searrow }


\searrow






↙


{\displaystyle \swarrow }


\swarrow 




↖


{\displaystyle \nwarrow }


\nwarrow






↼


{\displaystyle \leftharpoonup }


\leftharpoonup  




⇀


{\displaystyle \rightharpoonup }


\rightharpoonup






↽


{\displaystyle \leftharpoondown }


\leftharpoondown 




⇁


{\displaystyle \rightharpoondown }


\rightharpoondown





Miscellaneous symbols






∞




{\displaystyle \infty \;\;}


\infty




∀



{\displaystyle \forall \;}


\forall






ℜ


{\displaystyle \Re }


\Re




ℑ


{\displaystyle \Im }


\Im






∇


{\displaystyle \nabla }


\nabla




∃


{\displaystyle \exists }


\exists






∂


{\displaystyle \partial }


\partial




∄


{\displaystyle \nexists }


\nexists






∅


{\displaystyle \emptyset }


\emptyset




∅



{\displaystyle \varnothing \;}


\varnothing






℘


{\displaystyle \wp }


\wp




∁


{\displaystyle \complement }


\complement






¬


{\displaystyle \neg }


\neg




⋯


{\displaystyle \cdots }


\cdots






◻


{\displaystyle \square }


\square




√


{\displaystyle \surd }


\surd 






◼


{\displaystyle \blacksquare }


\blacksquare




△


{\displaystyle \triangle }


\triangle

Binary Operation/Relation Symbols






×


{\displaystyle \times }


\times




⋅


{\displaystyle \cdot }


\cdot






÷


{\displaystyle \div }


\div




∩


{\displaystyle \cap }


\cap






∪


{\displaystyle \cup }


\cup




≠



{\displaystyle \neq \;}


\neq






≤


{\displaystyle \leq }


\leq




≥


{\displaystyle \geq }


\geq 






∈


{\displaystyle \in }


\in




⊥



{\displaystyle \perp \;}


\perp






∉


{\displaystyle \notin }


\notin




⊂


{\displaystyle \subset }


\subset






≃


{\displaystyle \simeq }


\simeq




≈


{\displaystyle \approx }


\approx






∧


{\displaystyle \wedge }


\wedge




∨


{\displaystyle \vee }


\vee






⊕



{\displaystyle \oplus \;}


\oplus




⊗


{\displaystyle \otimes }


\otimes






◻


{\displaystyle \Box }


\Box




⊠


{\displaystyle \boxtimes }


\boxtimes






≡


{\displaystyle \equiv }


\equiv




≅


{\displaystyle \cong }


\cong

Further reading
For more information see:

The great, big list of LaTeX symbols
Mathematical expressions
Brackets and Parentheses
Integrals, sums and limits
Mathematical fonts
Spacing in math mode
Aligning equations


Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Mathematical fonts - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsMathematical fontsContents

1 Introduction
2 Capital letters-only font typefaces
3 Other mathematical fonts
4 Further reading


Introduction
Some mathematical elements need to be typeset using fonts containing characters/symbols of a certain style; for example, it is customary to represent real numbers with a blackboard bold font (such as \(\mathbb{R}\)), or topological spaces with calligraphic font (such as (\(\mathcal{T}\)). This article shows how to use different font styles when typesetting mathematics, starting with the following example:



Let \( \mathcal{T} \) be a topological space, a basis is defined as
\[
 \mathcal{B} = \{B_{\alpha} \in \mathcal{T}\, |\,  U = \bigcup B_{\alpha} \forall U \in \mathcal{T} \}
\]



 Open this example in Overleaf

This example produces the following output:

Use of some math font styles requires the line \usepackage{amssymb} to be added to the document preamble: see the amsfonts package for further information.

Capital letters-only font typefaces
There are some font typefaces which support only a limited number of characters; these fonts usually denote some special sets. For instance, to display the R in blackboard bold typeface you can use \(\mathbb{R}\) to produce \(\mathbb{R}\). The following example shows calligraphic, fraktur and blackboard bold typefaces:



\documentclass{article}
\usepackage{amsmath}
\usepackage{amssymb}
\begin{document}
\begin{align*}
RQSZ \\
\mathcal{RQSZ} \\
\mathfrak{RQSZ} \\
\mathbb{RQSZ}
\end{align*}
\end{document}



 Open this example in Overleaf

This example produces the following output:


Other mathematical fonts
It is possible to set a different font family for a complete mathematical expression:



\begin{align*}
3x^2 \in R \subset Q \\
\mathnormal{3x^2 \in R \subset Q} \\
\mathrm{3x^2 \in R \subset Q} \\
\mathit{3x^2 \in R \subset Q} \\
\mathbf{3x^2 \in R \subset Q} \\
\mathsf{3x^2 \in R \subset Q} \\
\mathtt{3x^2 \in R \subset Q}
\end{align*}



 Open this example in Overleaf

This example produces the following output:

In this case, not only letters but all characters change their appearance; for example, $\mathit{3x^2}$ italicises the entire expression to produce \(\mathit{3x^2}\).

Further reading
For more information see

amsfonts package documentation
Mathematical expressions
Subscripts and superscripts
Bold, italics and underlining
Font sizes, families, and styles
Font typefaces
Text alignment
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Inserting Images - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsInserting ImagesImages are essential elements in most of the scientific documents. LaTeX provides several options to handle images and make them look exactly what you need. In this article we explain how to include images in the most common formats, how to shrink, enlarge and rotate them, and how to reference them within your document.

Contents

1 Introduction
2 The folder path to images
3 Changing the image size and rotating the picture
4 Positioning

4.1 Wrapping text around figures


5 Captioning, labelling and referencing

5.1 Captions
5.2 Labels and cross-references


6 Generating high-res and low-res images
7 Reference guide
8 Further reading


Introduction
Below is an example on how to import a picture.




\documentclass{article}
\usepackage{graphicx}
\graphicspath{ {./images/} }

\begin{document}
The universe is immense and it seems to be homogeneous, 
in a large scale, everywhere we look at.

\includegraphics{universe}

There's a picture of a galaxy above
\end{document}








Latex can not manage images by itself, so we need to use the graphicx package. To use it, we include the following line in the preamble: \usepackage{graphicx}.
The command \graphicspath{ {./images/} } tells LaTeX that the images are kept in a folder named images under the directory of the main document. 
The \includegraphics{universe} command is the one that actually included the image in the document. Here universe is the name of the file containing the image without the extension, then universe.PNG becomes universe. The file name of the image should not contain white spaces nor multiple dots. 
Note: The file extension is allowed to be included, but it's a good idea to omit it. If the file extension is omitted it will prompt LaTeX to search for all the supported formats. For more details see the section about generating high resolution and low resolution images.
 Open an images example in Overleaf


The folder path to images
When working on a document which includes several images it's possible to keep those images in one or more separated folders so that your project is more organised.
The command \graphicspath{ {images/} } tells LaTeX to look in the images folder. The path is relative to the current working directory—so, the compiler will look for the file in the same folder as the code where the image is included. The path to the folder is relative by default, if there is no initial directory specified, for instance 




%Path relative to the .tex file containing the \includegraphics command
\graphicspath{ {images/} }




This is a typically straightforward way to reach the graphics folder within a file tree, but can leads to complications when .tex files within folders are included in the main .tex file. Then, the compiler may end up looking for the images folder in the wrong place. Thus, it is best practice to specify the graphics path to be relative to the main .tex file, denoting the main .tex file directory as   ./ , for instance: 




%Path relative to the main .tex file 
\graphicspath{ {./images/} }




as in the introduction.
The path can also be absolute, if the exact location of the file on your system is specified. For example, if you were working on a local LaTeX installation on your own computer: 




%Path in Windows format:
\graphicspath{ {c:/user/images/} }

%Path in Unix-like (Linux, Mac OS) format
\graphicspath{ {/home/user/images/} }




Notice that this command requires a trailing slash  /  and that the path is in between double braces.
You can also set multiple paths if the images are saved in more than one folder. For instance, if there are two folders named images1 and images2, use the command




\graphicspath{ {./images1/}{./images2/} }




 Open an images example in Overleaf


Changing the image size and rotating the picture
If we want to further specify how LaTeX should include our image in the document (length, height, etc), we can pass those settings in the following format:




\begin{document}

Overleaf is a great professional tool to edit online documents, 
share and backup your \LaTeX{} projects. Also offers a 
rather large help documentation.

\includegraphics[scale=1.5]{overleaf-logo}








The command \includegraphics[scale=1.5]{overleaf-logo} will include the image overleaf-logo in the document, the extra parameter scale=1.5 will do exactly that, scale the image 1.5 of its real size.
You can also scale the image to a some specific width and height.




\begin{document}

Overleaf is a great professional tool to edit online documents, 
share and backup your \LaTeX{} projects. Also offers a 
rather large help documentation.

\includegraphics[width=5cm, height=4cm]{overleaf-logo}








As you probably have guessed, the parameters inside the brackets [width=3cm, height=4cm] define the width and the height of the picture. You can use different units for these parameters. If only the width parameter is passed, the height will be scaled to keep the aspect ratio.
The length units can also be relative to some elements in document. If you want, for instance, make a picture the same width as the text:




\begin{document}

The universe is immense and it seems to be homogeneous, 
in a large scale, everywhere we look at.

\includegraphics[width=\textwidth]{universe}








Instead of \textwidth you can use any other default LaTeX length: \columnsep, \linewidth, \textheight, \paperheight, etc. See the  reference guide for a further description of these units.
There is another common option when including a picture within your document, to rotate it. This can easily accomplished in LaTeX:




\begin{document}

Overleaf is a great professional tool to edit online, 
share and backup your \LaTeX{} projects. Also offers a 
rather large base of help documentation.

\includegraphics[scale=1.2, angle=45]{overleaf-logo}








The parameter angle=45 rotates the picture 45 degrees counter-clockwise. To rotate the picture clockwise use a negative number.

Positioning
In the previous section was explained how to include images in your document, but the combination of text and images may not look as we expected. To change this we need to introduce a new environment.




In the next example the figure will be positioned 
right below this sentence.

\begin{figure}[h]
\includegraphics[width=8cm]{Plot}
\end{figure}








The figure environment is used to  display pictures as floating elements within the document. This means you include the picture inside the figure environment and you don't have to worry about it's placement, LaTeX will position it in a such way that it fits the flow of the document.
Anyway, sometimes we need to have more control on the way the figures are displayed. An additional parameter can be passed to determine the figure positioning. In the example, begin{figure}[h], the parameter inside the brackets set the position of the figure to here. Below a table to list the possible positioning values.



Parameter

Position


h

Place the float here, i.e., approximately at the same point it occurs in the source text (however, not exactly at the spot)


t

Position at the top of the page.


b

Position at the bottom of the page.


p

Put on a special page for floats only.


!

Override internal parameters LaTeX uses for determining "good" float positions.


H

Places the float at precisely the location in the LaTeX code. Requires the float package, though may cause problems occasionally. This is somewhat equivalent to h!.

In the next example you can see a picture at the top of the document, despite being declared below the text.




In this picture you can see a bar graph that shows
the results of a survey which involved some important
data studied as time passed.

\begin{figure}[t]
\includegraphics[width=8cm]{Plot}
\centering
\end{figure}








The additional command \centering will centre the picture. The default alignment is left.

Wrapping text around figures
It's also possible to wrap the text around a figure. When the document contains small pictures this makes it look better.




\begin{wrapfigure}{r}{0.25\textwidth} %this figure will be at the right
    \centering
    \includegraphics[width=0.25\textwidth]{mesh}
\end{wrapfigure}

There are several ways to plot a function of two variables, 
depending on the information you are interested in. For 
instance, if you want to see the mesh of a function so it 
easier to see the derivative you can use a plot like the 
one on the left.


\begin{wrapfigure}{l}{0.25\textwidth}
    \centering
    \includegraphics[width=0.25\textwidth]{contour}
\end{wrapfigure}

On the other side, if you are only interested on
certain values you can use the contour plot, you 
can use the contour plot, you can use the contour 
plot, you can use the contour plot, you can use 
the contour plot, you can use the contour plot, 
you can use the contour plot, like the one on the left.

On the other side, if you are only interested on 
certain values you can use the contour plot, you 
can use the contour plot, you can use the contour 
plot, you can use the contour plot, you can use the 
contour plot, you can use the contour plot, 
you can use the contour plot, 
like the one on the left.








For the commands in the example to work, you have to import the wrapfig package. To use wrapfig, include the following line in the document preamble: 

\usepackage{wrapfig}

This makes the wrapfigure environment available and we can place an \includegraphics command inside it to create a figure around which text will be wrapped. Here is how we can specify a wrapfigure environment:

\begin{wrapfigure}[lineheight]{position}{width}
  ...
\end{wrapfigure}

The position parameter has eight possible values:



r

R

right side of the text


l

L

left side of the text


i

I

inside edge–near the binding (in a twoside document)


o

O

outside edge–far from the binding

The uppercase version allows the figure to float. The lowercase version means exactly here.
Now you can define the wrapfigure environment by means of the commands \begin{wrapfigure}{l}{0.25\textwidth} \end{wrapfigure}. Notice that the environment has two additional parameters enclosed in braces. Below the code is explained with more detail:

{l}
This defines the alignment of the figure. Set l for left and r for right. Furthermore, if you are using a book or any similar format, use instead o for the outer edge and i for the inner edge of the page.
{0.25\textwidth}
This is the width of figure box. It's not the width of the image itself, that must be set in the \includegraphics command. Notice that the length is relative to the text width, but normal units can also be used (cm, in, mm, etc). See the reference guide for a list of units.
\centering
This was already explained, but in this example the image will be centred by using its container as reference, instead of the whole text.
For a more complete article about image positioning see Positioning images and tables
 Open an images example in Overleaf


Captioning, labelling and referencing
Captioning images to add a brief description and labelling them for further reference are two important tools when working on a lengthy text. 

Captions
Let's start with a caption example:




\begin{figure}[h]
\caption{Example of a parametric plot ($\sin (x), \cos(x), x$)}
\centering
\includegraphics[width=0.5\textwidth]{spiral}
\end{figure}








It's really easy, just add the \caption{Some caption} and inside the braces write the text to be shown. The placement of the caption depends on where you place the command; if it's above the \includegraphics then the caption will be on top of it, if it's below then the caption will also be set below the figure.
Captions can also be placed right after the figures. The sidecap package uses similar code to the one in the previous example to accomplish this.




\documentclass{article}
\usepackage[rightcaption]{sidecap}

\usepackage{graphicx} %package to manage images
\graphicspath{ {images/} }

\begin{SCfigure}[0.5][h]
\caption{Using again the picture of the universe.
This caption will be on the right}
\includegraphics[width=0.6\textwidth]{universe}
\end{SCfigure}








There are two new commands

\usepackage[rightcaption]{sidecap}
As you may expect this line will import a package named sidecap, but there is an additional parameter: rightcaption. This parameter establishes the placement of the caption at the right of the picture, you can also use leftcaption. In book-like documents outercaption and innercaption are also available. The names of these are self-descriptive.
\begin{SCfigure}[0.5][h] \end{SCfigure}
Defines an environment similar to figure. The first parameter is the width of the caption relative to the size of the image, as declared in \includegraphics. The second parameter h works exactly as in the figure environment. See the placement section for more information.
You can do a more advanced management of the caption formatting. Check the further reading section for references.

Labels and cross-references
Figures, just as many other elements in a LaTeX document (equations, tables, plots, etc) can be referenced within the text. This is very easy, just add a \label to the figure or SCfigure environment, then later use that label to refer the picture.




\begin{figure}[h]
    \centering
    \includegraphics[width=0.25\textwidth]{mesh}
    \caption{a nice plot}
    \label{fig:mesh1}
\end{figure}

As you can see in the figure \ref{fig:mesh1}, the 
function grows near 0. Also, in the page \pageref{fig:mesh1} 
is the same example.








There are three commands that generate cross-references in this example.

\label{fig:mesh1}
This will set a label for this figure. Since labels can be used in several types of elements within the document, it's a good practice to use a prefix, such as fig: in the example.
\ref{fig:mesh1}
This command will insert the number assigned to the figure. It's automatically generated and will be updated if insert some other figure before the referenced one.
\pageref{fig:mesh1}
This prints out the page number where the referenced image appears.
The \caption is mandatory to reference a figure.
Another great characteristic in a LaTeX document is the ability to automatically generate a list of figures. This is straightforward.




\listoffigures








This command only works on captioned figures, since it uses the caption in the table. The example above lists the images in this article.
Important Note: When using cross-references your LaTeX project must be compiled twice, otherwise the references, the page references and the table of figures won't work—Overleaf takes care of that for you.

Generating high-res and low-res images
So far while specifying the image file name in the \includegraphics command we have omitted file extensions. However, that is not necessary, though it is often useful. If the file extension is omitted, LaTeX will search for any supported image format in that directory, and will search for various extensions in the default order (which can be modified).
This is useful in switching between development and production environments. In a development environment (when the article/report/book is still in progress), it is desirable to use low-resolution versions of images (typically in .png format) for fast compilation of the preview. In the production environment (when the final version of the article/report/book is produced), it is desirable to include the high-resolution version of the images.
This is accomplished by

Not specifying the file extension in the \includegraphics command, and
Specifying the desired extension in the preamble.
Thus, if we have two versions of an image, venndiagram.pdf (high-resolution) and venndiagram.png (low-resolution), then we can include the following line in the preamble to use the .png version while developing the report - 




  \DeclareGraphicsExtensions{.png,.pdf}




The command above will ensure that if two files are encountered with the same base name but different extensions (for example venndiagram.pdf and venndiagram.png), then the .png version will be used first, and in its absence the .pdf version will be used, this is also a good ideas if some low-resolution versions are not available.
Once the report has been developed, to use the high-resolution .pdf version, we can change the line in the preamble specifying the extension search order to




  \DeclareGraphicsExtensions{.pdf,.png}




Improving on the technique described in the previous paragraphs, we can also instruct LaTeX to generate low-resolution .png versions of images on the fly while compiling the document if there is a PDF that has not been converted to PNG yet. To achieve that, we can include the following in the preamble after \usepackage{graphicx}




  \usepackage{epstopdf}
  \epstopdfDeclareGraphicsRule{.pdf}{png}{.png}{convert #1 \OutputFile}
  \DeclareGraphicsExtensions{.png,.pdf}




If venndiagram2.pdf exists but not venndiagram2.png, the file venndiagram2-pdf-converted-to.png will be created and loaded in its place. The command convert #1 is responsible for the conversion and additional parameters may be passed between convert and #1. For example - convert -density 100 #1.
There are some important things to have in mind though:

For the automatic conversion to work, we need to call pdflatex with the --shell-escape option.
For the final production version, we must comment out the \epstopdfDeclareGraphicsRule, so that only high-resolution PDF files are loaded. We'll also need to change the order of precedence.
 Open an images example in Overleaf


Reference guide
LaTeX units and legths



Abbreviation

Definition


pt

A point, is the default length unit. About 0.3515mm


mm

a millimetre


cm

a centimetre


in

an inch


ex

the height of an x in the current font


em

the width of an m in the current font


\columnsep

distance between columns


\columnwidth

width of the column


\linewidth

width of the line in the current environment


\paperwidth

width of the page


\paperheight

height of the page


\textwidth

width of the text


\textheight

height of the text


\unitlength

units of length in the picture environment.


About image types in LaTeX

latex
When compiling with latex, we can only use EPS images, which is a vector format.
pdflatex
If we are compiling using "pdflatex" to produce a PDF, then we can use a number of image formats -
   JPG: Best choice if we want to insert photos
   PNG: Best choice if we want to insert diagrams (if a vector version could not be generated) and screenshots
   PDF: Even though we are used to seeing PDF documents, a PDF can also store images 
   EPS: EPS images can be included using the epstopdf package (we just need to install the package, we 
        don't need to use \usepackage{} to include it in our document.)

Vector format or bitmap format?
Images can be of either vector format of bitmap format. Generally we don't need to worry about it, but if we do happen to know the format the image is in, we can use that information to choose an appropriate image format to include in our LaTeX document. If we have an image in vector format, we should go for PDF or EPS. If we have it in bitmap format, we should go for JPG or PNG, as storing bitmap pictures in PDF or EPS takes a lot of disk space.
 Open an images example in Overleaf


Further reading
For more information see

Positioning images and tables
Lists of tables and figures
Single sided and double sided documents
Lengths in LaTeX
floatrow package for advanced caption managing of floating elements (tables and figures)
sidecap package documentation, for side-figure captions
epstopdf package documentation (EPS to PDF conversion)
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Tables - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsTablesThere are three ways you can insert tables in Overleaf:

Using the Insert table button in the editor toolbar.
Copying and pasting a table from another document while using Visual Editor.
Writing the LaTeX code for the table in Code Editor.
If you’re new to LaTeX, using the toolbar in Visual Editor (option 1) is a great way to get started. And you can switch between Visual Editor and Code Editor to see the code behind the table. This page focuses on option 3.

Contents

1 Creating a simple table in LaTeX
2 Tables with a fixed width
3 Combining rows and columns
4 Multi-page tables
5 Positioning tables
6 Captions, labels and references
7 List of tables
8 Changing the appearance of a table

8.1 Line width and cell padding
8.2 Colour alternating rows
8.3 Colouring a table (cells, rows, columns and lines)


9 Reference guide
10 Further reading


Creating a simple table in LaTeX
We can start with one of the simplest examples of a table:



\begin{center}
\begin{tabular}{ c c c }
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\  
 cell7 & cell8 & cell9    
\end{tabular}
\end{center}



 Open this example in Overleaf.


The tabular environment is the default LaTeX method to create tables. You must specify a parameter to this environment; here we use {c c c} which tells LaTeX there are three columns and the text inside each one of them must be centred. 
The tabular environment provides additional flexibility; for example, you can put separator lines in between each column:



\begin{center}
\begin{tabular}{ |c|c|c| } 
 \hline
 cell1 & cell2 & cell3 \\ 
 cell4 & cell5 & cell6 \\ 
 cell7 & cell8 & cell9 \\ 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.


Here is a description of the constructions used in the example above:

{ |c|c|c| }
This declares that three columns, separated by a vertical line, are going to be used in the table. Each c means that the contents of the column will be centred. You can also use r to align the text to the right and l for left alignment.
\hline
This will insert  a horizontal line on top of the table and at the bottom too. There is no restriction on the number of times you can use \hline.
cell1 & cell2 & cell3 \\
Each & is a cell separator and the double-backslash \\ sets the end of this row.
Below you can see a second example which uses various vertical and horizontal lines (often called "rules"):



\begin{center}
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 \hline
 2 & 7 & 78 & 5415 \\
 \hline
 3 & 545 & 778 & 7507 \\
 \hline
 4 & 545 & 18744 & 7560 \\
 \hline
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\end{center}



 Open this example in Overleaf.



Tables with a fixed width
When formatting a table you might require a fixed width, either for each column or for the entire table. The following example adds the array package to document preamble: 

\usepackage{array}

and uses it to set fixed column widths:



\documentclass{article}
\usepackage{array}
\begin{document}
\begin{center}
\begin{tabular}{ | m{5em} | m{1cm}| m{1cm} | } 
  \hline
  cell1 dummy text dummy text dummy text& cell2 & cell3 \\ 
  \hline
  cell1 dummy text dummy text dummy text & cell5 & cell6 \\ 
  \hline
  cell7 & cell8 & cell9 \\ 
  \hline
\end{tabular}
\end{center}
\end{document}



 Open this example in Overleaf.


In the tabular environment, the parameter m{5em} sets a width of 5em for the first column (1cm for the other two) and centres the text in the middle of the cell. The aligning options are m for middle, p for top and b for bottom. When using these parameters the text is automatically formatted to fit inside each cell.
If you don't need to control the width of each cell, but of the entire table and then evenly distribute the space within, use the tabularx package. See the example below:



\documentclass{article}
\usepackage{tabularx}
\begin{document}
\begin{tabularx}{0.8\textwidth} { 
  | >{\raggedright\arraybackslash}X 
  | >{\centering\arraybackslash}X 
  | >{\raggedleft\arraybackslash}X | }
 \hline
 item 11 & item 12 & item 13 \\
 \hline
 item 21  & item 22  & item 23  \\
\hline
\end{tabularx}
\end{document}



 Open this example in Overleaf.


The environment tabularx is similar to tabular but more flexible. To use it, add the line \usepackage{tabularx} to the document preamble. Notice that the environment opening statement is different, in the example the table width is set to 0.8\textwidth, which is 80% of the document's text width. You can use any of the LaTeX units to set that value.
The prefix inside braces | >{\raggedright\arraybackslash}X | >{\centering\arraybackslash}X | >{\raggedleft\arraybackslash}X | sets the alignment of each column: the first one to left, the second one to center and the third one to right.

Combining rows and columns
Rows and columns can be merged to create larger table cells. The following example uses the \multicolumn command to merge several columns:



\documentclass{article}
\usepackage{multirow}
\begin{document}
\begin{tabular}{ |p{3cm}||p{3cm}|p{3cm}|p{3cm}|  }
 \hline
 \multicolumn{4}{|c|}{Country List} \\
 \hline
 Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 Code&ISO numeric Code\\
 \hline
 Afghanistan   & AF    &AFG&   004\\
 Aland Islands&   AX  & ALA   &248\\
 Albania &AL & ALB&  008\\
 Algeria    &DZ & DZA&  012\\
 American Samoa&   AS  & ASM&016\\
 Andorra& AD  & AND   &020\\
 Angola& AO  & AGO&024\\
 \hline
\end{tabular}
\end{document}



 Open this example in Overleaf.


Let's review each component of the command \multicolumn{4}{|c|}{Country List} \\:

{4}
The number of columns to be combined: 4 in this case.
{|c|}
Delimiters and alignment of the resulting cell: in this case the text will be centred and a vertical line will be drawn at each side of the cell.
{Country List}
Text to be displayed inside the cell.
To combine rows you need to add the multirow package to your document preamble:

\usepackage{multirow}

You can then use the \multirow command in your document:



\documentclass{article}
\usepackage{multirow}
\begin{document}
\begin{center}
\begin{tabular}{ |c|c|c|c| } 
\hline
col1 & col2 & col3 \\
\hline
\multirow{3}{4em}{Multiple row} & cell2 & cell3 \\ 
& cell5 & cell6 \\ 
& cell8 & cell9 \\ 
\hline
\end{tabular}
\end{center}
\end{document}



 Open this example in Overleaf.


The multirow command takes three parameters; our example uses the following settings:

the number of rows to be combined: 3
the width of the column: 4em
the content of the cell: Multiple row
Multi-page tables
If you have to insert a very long table, which takes up two or more pages in your document, use the longtable package. First, add the following line to your document preamble:

\usepackage{longtable}

You can then use the longtable environment, as shown in the following example:




\documentclass{article}
\usepackage{longtable}

\begin{document}
 
 \begin{longtable}[c]{| c | c |}
 \caption{Long table caption.\label{long}}\\

 \hline
 \multicolumn{2}{| c |}{Begin of Table}\\
 \hline
 Something & something else\\
 \hline
 \endfirsthead

 \hline
 \multicolumn{2}{|c|}{Continuation of Table \ref{long}}\\
 \hline
 Something & something else\\
 \hline
 \endhead

 \hline
 \endfoot

 \hline
 \multicolumn{2}{| c |}{End of Table}\\
 \hline\hline
 \endlastfoot

 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 Lots of lines & like this\\
 ...
 Lots of lines & like this\\
 \end{longtable}








 Open a longtable example in Overleaf

The behaviour of longtable is similar to the default tabular, but generates tables that can be broken by the standard LaTeX page-breaking algorithm. There are four longtable-specific elements:

\endfirsthead
Everything above this command will appear at the beginning of the table, in the first page.
\endhead
Whatever you put before this command and below \endfirsthead will be displayed at the top of the table in every page except the first one.
\endfoot
Similar to \endhead, what you put after \endhead and before this command will appear at the bottom of the table in every page except the last one.
\endlastfoot
Similar to \endfirsthead. The elements after \endfoot and before this command will be displayed at the bottom of the table but only in the last page where the table appears.
Positioning tables
Positioning a table is easy if they're inside a float table environment.



\documentclass{article}
\begin{document}
Below is a table positioned exactly here:
\begin{table}[h!]
\centering
 \begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
 \end{tabular}
\end{table}
\end{document}



 Open this example in Overleaf.


The parameter h! passed to the table environment declaration establishes that this table must be placed here, and override LaTeX defaults. The positioning parameters that can be passed-in include:

h
Will place the table here approximately.
t
Position the table at the top of the page.
b
Position the table at the bottom of the page.
p
Put the table in a special page, for tables only.
!
Override internal LaTeX parameters.
H
Place the table at this precise location, pretty much like h!.
For further examples on table positioning see the Positioning images and tables article.
In this example there are a few more commands:

\centering
Centres the table relative to the float container element.
\[1ex]
This adds extra space to the cell.
Captions, labels and references
Tables can be captioned, labelled and referenced by means of the table environment.



\documentclass{article}
\begin{document}
Table \ref{table:1} is an example of a referenced \LaTeX{} element.

\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{Table to test captions and labels.}
\label{table:1}
\end{table}
\end{document}



 Open this example in Overleaf.


There are three important commands in the example:

\caption{Table to test captions and labels}
As you may expect this command sets the caption for the table. If you create a list of tables this caption will be used there. You can place it above or below the table.
\label{table:1}
If you need to reference the table within your document, set a label with this command. The label will number the table and, when combined with the \ref command, will allow you to reference it.
\ref{table:1}
This code will be substituted by the number corresponding to the referenced table.
List of tables
To create a list of tables use the \listoftables command. The caption of each table will be used to generate this list. For languages supported by the babel package, the title "List of tables" will be translated accordingly. See the article about International language support for more info.



\documentclass{article}
\begin{document}
\listoftables
\vspace{5pt}
The table \ref{table:1} is an example of referenced \LaTeX{} elements.

\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
 1 & 6 & 87837 & 787 \\ 
 2 & 7 & 78 & 5415 \\
 3 & 545 & 778 & 7507 \\
 4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{This is the caption for the first table.}
\label{table:1}
\end{table}

\begin{table}[h!]
\centering
\begin{tabular}{||c c c c||} 
 \hline
 Col1 & Col2 & Col2 & Col3 \\ [0.5ex] 
 \hline\hline
  4 & 545 & 18744 & 7560 \\
 5 & 88 & 788 & 6344 \\ [1ex] 
 \hline
\end{tabular}
\caption{This is the caption for the second table.}
\label{table:2}
\end{table}
\end{document}



 Open this example in Overleaf.



Changing the appearance of a table
Several table elements can be modified to suit the needs of your document. Below you will learn how to modify the line thickness, the line colour and the background colour of the cells in your table.

Line width and cell padding
The legibility of a table can sometimes be improved by incrementing the column spacing and row stretch.



\documentclass{article}
\setlength{\arrayrulewidth}{0.5mm}
\setlength{\tabcolsep}{18pt}
\renewcommand{\arraystretch}{1.5}
\begin{document}
\begin{tabular}{ |p{3cm}|p{3cm}|p{3cm}|  }
\hline
\multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
Aland Islands & AX   & ALA \\
Albania &AL & ALB \\
Algeria    &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & AND   \\
Angola & AO & AGO \\
\hline
\end{tabular}
\end{document}



 Open this example in Overleaf.


A description of the commands is provided below:

\setlength{\arrayrulewidth}{0.5mm}
This sets the thickness of the borders of the table. In the example is 0.5mm but you can use other units—see the article Lengths in LaTeX for a complete list.
\setlength{\tabcolsep}{18pt}
The space between the text and the left/right border of its containing cell is set to 18pt with this command. Again, you may use other units if needed.
\renewcommand{\arraystretch}{1.5}
The height of each row is set to 1.5 relative to its default height.
Colour alternating rows
You can apply alternating colours to the rows of your table by using the xcolor package with the table option, as demonstrated in the following example:



\documentclass{article}
\usepackage[table]{xcolor}
\setlength{\arrayrulewidth}{0.5mm}
\setlength{\tabcolsep}{18pt}
\renewcommand{\arraystretch}{2.5}
\begin{document}
{\rowcolors{3}{green!80!yellow!50}{green!70!yellow!40}
\begin{tabular}{ |p{3cm}|p{3cm}|p{3cm}|  }
\hline
\multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
Aland Islands & AX   & ALA \\
Albania &AL & ALB \\
Algeria    &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & AND   \\
Angola & AO & AGO \\
\hline
\end{tabular}}
\end{document}



 Open this example in Overleaf.


Notice the braces right before the command 

\rowcolors{3}{green!80!yellow!50}{green!70!yellow!40}

and after the tabular environment. The command \rowcolors takes three parameters each passed inside braces: 

the row to start,
the colour for odd rows and
the colour for even rows.
See the xcolor package documentation (at the further reading section) for a list of available colours and how to create your own. In the example the colours green and yellow are mixed in different proportions.
For the command to work make sure to add

\usepackage[table]{xcolor}

to the preamble of your LaTeX file.

Colouring a table (cells, rows, columns and lines)
All elements in a table can be customized to use a specific colour. Again, this functionality is provided by xcolor so you must add

\usepackage[table]{xcolor}

to the preamble. Below you can see an example.



\documentclass{article}
\usepackage[table]{xcolor}
\setlength{\arrayrulewidth}{1mm}
\setlength{\tabcolsep}{18pt}
\renewcommand{\arraystretch}{2.5}
\newcolumntype{s}{>{\columncolor[HTML]{AAACED}} p{3cm}}
\arrayrulecolor[HTML]{DB5800}
\begin{document}
\begin{tabular}{ |s|p{3cm}|p{3cm}| }
\hline
\rowcolor{lightgray} \multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
\rowcolor{gray}
Aland Islands & AX & ALA \\
Albania   &AL & ALB \\
Algeria  &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & \cellcolor[HTML]{AA0044} AND    \\
Angola & AO & AGO \\
\hline
\end{tabular}
\end{document}



 Open this example in Overleaf.


Below is a description about how to change the colour of each element in the table:

Colour of the lines. The command \arrayrulecolor is used for this. In the example an HTML format is used, but other formats are available too, see the xcolor documentation for a complete list (link provided at the further reading section).
Background colour of a cell. Use the command \cellcolor. You can either enter the name directly inside the braces (red, gray, green and so on) or pass a format parameter inside brackets (HTML in the example) and then set the desired colour inside the braces using the established format.
Background colour of a row. In this case \rowcolor will accomplish that. The same observations about colour selection mentioned in the two previous commands are valid for this one.
Background colour of a column. This one is a bit tricky, but the easiest way is to define a new column type. The command \newcolumntype{s}{>{\columncolor[HTML]{AAACED}} p{3cm}}
 define a column type called s whose alignment is p, the column width is 3cm and the colour is set with HTML format to AAACED. This new column type is used in the tabular environment.
Reference guide
A brief description of parameters in the tabular environment.
Tables can be created using tabular environment.

\begin{tabular}[pos]{cols}
 table content
\end{tabular}

where options can be:

pos : Vertical position. It can assume the following values:


t
the line at the top is aligned with the text baseline


b
the line at the bottom is aligned with the text baseline


c or none
the table is centred to the text baseline

cols : Defines the alignment and the borders of each column. It can have the following values:


l
left-justified column


c
centred column


r
right-justified column


p{'width'}
paragraph column with text vertically aligned at the top


m{'width'}
paragraph column with text vertically aligned in the middle (requires array package)


b{'width'}
paragraph column with text vertically aligned at the bottom (requires array package)


|
vertical line


||
double vertical line


*{num}{form}
the format form is repeated num times; for example *{3}{|l}| is equal to |l|l|l|

To separate between cells and introducing new lines use the following commands:



&
column separator


\\
start new row (additional space may be specified after \\ using square brackets, such as \\[6pt])


\hline
horizontal line between rows


\newline
start a new line within a cell (in a paragraph column)


\cline{i-j}
partial horizontal line beginning in column i and ending in column j

Further reading
For more information see

How to insert tables in Overleaf
Positioning images and tables
Lists of tables and figures
Lengths in LaTeX
Using colours in LaTeX
xcolor package manual
tabularx package manual
tabu package manual
longtable package manual
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Positioning images and tables - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsPositioning images and tablesLaTeX is an editing tool that takes care of the format so you only have to worry about the contents of your document; nevertheless, better control of floating elements is sometimes necessary. This article explains how to position images and tables in a LaTeX document.

Contents

1 Introduction
2 Positioning images

2.1 Basic positioning
2.2 The figure environment
2.3 Multiple images in one figure
2.4 Wrapping text around a figure


3 Positioning tables

3.1 Basic positioning
3.2 The table environment
3.3 Wrapping text around a table


4 Reference guide
5 Further reading


Introduction
The default alignment for images and tables is set to left




Lorem ipsum dolor sit amet, consectetuer adipiscing elit. 
Etiam lobortis facilisis sem. Nullam nec mi et neque pharetra
sollicitudin.

\includegraphics[width=0.5\textwidth]{overleaf-logo}

Praesent imperdiet mi nec
ante. Donec ullamcorper, felis non sodales commodo, lectus velit
ultrices augue, a dignissim nibh lectus placerat pede.
 Vivamus nunc nunc, molestie ut, ultricies
vel, semper in, velit. Ut porttitor.








This is a simple example, for a description of this and other ways to include images in your LaTeX file see the article Inserting Images.
 Open an example in Overleaf


Positioning images
Basic positioning
To change the default alignment of an image from left or right, an easy option is to add

\usepackage[export]{adjustbox}

to the preamble of your file and then use an additional option in your image-importing statement




Lorem ipsum dolor sit amet, consectetuer adipiscing elit. 
Etiam lobortis facilisis sem. Nullam nec mi et neque 
pharetra sollicitudin.

\includegraphics[width=0.5\textwidth, right]{overleaf-logo}

Praesent imperdiet mi necante. Donec ullamcorper, felis 
non sodales commodo, lectus velit ultrices augue,
a dignissim nibh lectus placerat pede. Vivamus nunc nunc, 
molestie ut, ultriciesvel, semper in, velit. Ut porttitor.








The package adjustbox enables an additional option in the \includegraphics command, in the example the picture is aligned to right. The available values are: left, right, center, outer and inner, the last two are intended for two-sided documents.
 Open an example in Overleaf


The figure environment
The figure environment (see Inserting Images) is intended to provide automatic positioning.




Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer adipiscing 
elit. Duis fringilla tristique neque. Sed interdum libero ut metus. 
Pellentesque placerat. Nam rutrum augue a leo. Morbi sed elit sit amet 
ante lobortis sollicitudin.

\begin{figure}[h]
\includegraphics[width=0.5\textwidth, inner]{overleaf-logo}
\caption{Caption}
\label{fig:figure2}
\end{figure}








This environment uses a positioning parameter passed inside brackets, it can take the next values:



Parameter

Position


h

Place the float here, i.e., approximately at the same point it occurs in the source text (however, not exactly at the spot)


t

Position at the top of the page.


b

Position at the bottom of the page.


p

Put on a special page for floats only.


!

Override internal parameters LaTeX uses for determining "good" float positions.


H

Places the float at precisely the location in the LaTeX code. Requires the float package. This is somewhat equivalent to h!.

You can put more than one value in the parameter, for instance, if you write [ht] LaTeX will try to position the figure here, but if it's not possible (the space may be insufficient) then the figure will appear at the top of the page. It is recommended to use more than one positioning parameter to prevent unexpected results.
 Open an example in Overleaf


Multiple images in one figure
It is possible to insert several images in one figure, each one with its own reference and label




Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Duis fringilla tristique neque...

\begin{figure}[h]

\begin{subfigure}{0.5\textwidth}
\includegraphics[width=0.9\linewidth, height=6cm]{overleaf-logo} 
\caption{Caption1}
\label{fig:subim1}
\end{subfigure}
\begin{subfigure}{0.5\textwidth}
\includegraphics[width=0.9\linewidth, height=6cm]{mesh}
\caption{Caption 2}
\label{fig:subim2}
\end{subfigure}

\caption{Caption for this figure with two images}
\label{fig:image2}
\end{figure}

Praesent blandit blandit mauris. Praesent lectus tellus, aliquet aliquam, luctus a, egestas a, turpis. Mauris lacinia lorem sit amet ipsum. Nunc quis urna dictum turpis accumsan semper.








First, you must import the package subcaption by adding to the preamble

\usepackage{subcaption}

then you can use the environment  \subfigure that takes one parameter, the width of the figure. This environment must be used inside a figure environment, captions and labels can be set to each subfigure.
 Open an example in Overleaf


Wrapping text around a figure
The package wrapfig provides a useful feature, text can be floated around the images.




Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer 
adipiscing elit. Duis fringilla tristique neque. Sed interdum 
libero ut metus. Pellentesque placerat.

\begin{wrapfigure}{l}{0.25\textwidth}
\includegraphics[width=0.9\linewidth]{overleaf-logo} 
\caption{Caption1}
\label{fig:wrapfig}
\end{wrapfigure}

Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer 
adipiscing elit. Duis fringilla tristique neque. Sed interdum








First import the package wrapfig by adding

\usepackage{wrapfig}

to the preamble.
After that you can use the environment wrapfig, it takes two parameters that are passed inside braces: the alignement that can be l, r, c, i or o; this letters stand for left, right, centre, inner and outer (the last two intended for two-sided documents). The second parameter is the width of the figure, in the example is 0.25 the width of the text. See the reference guide for a list of possible length units.
 Open an example in Overleaf


Positioning tables
Options for table positioning are similar to those available for figures.

Basic positioning
Default position of the tabular environment is centre.



Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Duis fringilla tristique neque. 
Sed interdum libero ut metus. Pellentesque placerat. Nam rutrum augue a leo. Morbi sed elit sit amet 
ante lobortis sollicitudin.

\arrayrulecolor[HTML]{DB5800}
\begin{tabular}{ |s|p{2cm}|p{2cm}|  }
\hline
\rowcolor{lightgray} \multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
\rowcolor{gray}
Aland Islands & AX  & ALA \\
Albania    &AL & ALB \\
Algeria   &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & \cellcolor[HTML]{AA0044} AND \\
Angola & AO & AGO \\
\hline
\end{tabular}

Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer adipiscing 
elit. Duis fringilla tristique neque. Sed interdum libero ut metus. 
Pellentesque placerat. Nam rutrum augue a leo. Morbi sed elit sit 
amet ante lobortis sollicitudin.



 Open this code fragment in Overleaf


The following graphic shows the result of the code fragment above:


You can also  open a complete  project example project in Overleaf.

To learn about how to create tables see the Tables article.

The table environment
The table environment is intended to automatically position tables so they fit nicely in the flow of your document.



Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer 
adipiscing elit. Duis fringilla tristique neque. Sed interdum 
libero ut metus. Pellentesque placerat. Nam rutrum augue a leo.
Morbi sed elit sit amet ante lobortis sollicitudin.

\begin{table}[ht]
\arrayrulecolor[HTML]{DB5800}
\centering
\begin{tabular}{ |s|p{2cm}|p{2cm}|  }
\hline
\rowcolor{lightgray} \multicolumn{3}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code &ISO ALPHA 3 \\
\hline
Afghanistan & AF &AFG \\
\rowcolor{gray}
Aland Islands & AX  & ALA \\
Albania    &AL & ALB \\
Algeria   &DZ & DZA \\
American Samoa & AS & ASM \\
Andorra & AD & \cellcolor[HTML]{AA0044} AND \\
Angola & AO & AGO \\
\hline
\end{tabular}
\caption{Table inside a floating element}
\label{table:ta}
\end{table}

Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer 
adipiscing elit. Duis fringilla tristique neque. Sed interdum 
libero ut metus. Pellentesque placerat. Nam rutrum augue a leo. 
Morbi sed elit sit amet ante lobortis sollicitudin.



 Open this code fragment in Overleaf


The following graphic shows the output produced by the Overleaf link:


A position parameter, inside brackets, can be passed to the table environment. This parameter can take the next values:



Parameter

Position


h

Place the float here, i.e., approximately at the same point it occurs in the source text (however, not exactly at the spot)


t

Position at the top of the page.


b

Position at the bottom of the page.


p

Put on a special page for floats only.


!

Override internal parameters LaTeX uses for determining "good" float positions.


H

Places the float at precisely the location in the LaTeX code. Requires the float package. This is somewhat equivalent to h!.

You can set more than one value in the parameter, for instance, if you write [ht] LaTeX will try to position the table here, but if it's not possible (the space may be insufficient) then the table will appear at the top of the page. It is recommended to use more than one positioning parameter to prevent unexpected results.
Notice also the command \centering. This changes the alignment of the table within its container to centre instead of the default left.
 Open an example in Overleaf


Wrapping text around a table
If your table don't take all available space and you want to put text next or before it, is possible with the package wrapfig. 
First, import the package

\usepackage{wrapfig}

then you can use the environment wraptable which takes two parameters: The first one is the alignment that can be l, r, c, i or o for left, right, centre, inner and outer respectively. The second one is the width of the table container, keep in mind that this latter parameter must be the same as the width of the table, otherwise things may not be properly aligned.



Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer 
adipiscing elit. Duis fringilla tristique neque. Sed interdum 
libero ut metus. Pellentesque placerat. Nam rutrum augue a leo. 
Morbi sed elit sit amet ante lobortis sollicitudin.

\begin{wraptable}{r}{8cm}
\arrayrulecolor[HTML]{DB5800}
\centering
\begin{tabular}{ |s|p{2cm}|  }
\hline
\rowcolor{lightgray} \multicolumn{2}{|c|}{Country List} \\
\hline
Country Name or Area Name& ISO ALPHA 2 Code \\
\hline
Afghanistan & AF \\
\rowcolor{gray}
Aland Islands & AX \\
Albania    &AL  \\
Algeria   &DZ \\
American Samoa & AS \\
Andorra & \cellcolor[HTML]{AA0044} AD   \\
Angola & AO \\
\hline
\end{tabular}
\caption{Table inside a wraptable}
\label{table:ta2}
\end{wraptable}

Praesent in sapien. Lorem ipsum dolor sit amet, consectetuer 
adipiscing elit. Duis fringilla tristique neque. Sed interdum 
libero ut metus. Pellentesque placerat. Nam rutrum augue a leo. 
Morbi sed elit sit amet ante lobortis sollicitudin...



 Open this wrapfig code fragment in Overleaf


The following graphic shows the output produced by the Overleaf link:


Reference guide
LaTeX units and lengths



Abbreviation

Definition


pt

A point, is the default length unit. About 0.3515mm


mm

a millimetre


cm

a centimetre


in

an inch


ex

the height of an x in the current font


em

the width of an m in the current font


\columnsep

distance between columns


\columnwidth

width of the column


\linewidth

width of the line in the current environment


\paperwidth

width of the page


\paperheight

height of the page


\textwidth

width of the text


\textheight

height of the text


\unitlength

units of length in the picture environment.


Further reading
For more information see:

Tables
Inserting Images
Lists of tables and figures
Lengths in LaTeX
floatrow package for advanced caption managing of floating elements (tables and figures)
sidecap package documentation, for side-figure captions
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Lists of tables and figures - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsLists of tables and figuresContents

1 Introduction
2 Changing the names
3 Further reading


Introduction
A list of the tables and figures keep the information organized and provide easy access to a specific element. This article explains how to create a list of figures, a list of tables and how to change the default title in both of them.
Let's start with a basic example:




\documentclass{article}
\usepackage{graphicx}
\graphicspath{ {figures/} }
\usepackage{array}

\begin{document}

\thispagestyle{empty}
\listoffigures
\listoftables
\newpage
\pagenumbering{arabic}

Lorem ipsum dolor sit amet, consectetuer adipiscing 
elit.  Etiam lobortisfacilisis...
\end{document}








 Open an example on Overleaf

The commands \listoffigures and \listoftables are self explanatory, the first one generates the list of figures and the second one the list of tables. In this example there are two more relevant commands:

\thispagestyle{empty}
Removes the page numbering.
\pagenumbering{arabic}
Re-start the page numbering with Arabic-style numerals.
Changing the names
As shown in the following example, the default titles, "List of Tables" and "List of Figures", can be changed to any other text:




\documentclass{article}
\usepackage{graphicx}
\usepackage{array}
\graphicspath{ {figures/} }

\renewcommand{\listfigurename}{List of plots}
\renewcommand{\listtablename}{Tables}

\begin{document}

\thispagestyle{empty}
\listoffigures
\listoftables
\clearpage
\pagenumbering{arabic}

Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Etiam lobortisfacilisis...
\end{document}








 Open an example on Overleaf
The commands that re-write the titles are:

\renewcommand{\listfigurename}{List of plots} will write "List of plots" instead of "List of Figures".
\renewcommand{\listtablename}{Tables} will write "Tables" instead of "List of Tables".
If you use the babel package in your document and you need to use any of the previous commands, put it inside the braces of  \addto\captionsenglish{ }. Instead of  english in \captionenglish write the name of the language you set in babel.
Note: your document may need to be compiled twice for the lists to be generated properly.

Further reading
For more information see:

Inserting Images
Tables
Positioning images and tables
Sections and chapters
Table of contents
Indices
Glossaries
Page numbering
Management in a large project
Multi-file LaTeX projects
Counters
The not so short introduction to LaTeX2ε
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Picture environment - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsPicture environmentContents

1 Introduction
2 Creating a new picture

2.1 Define the size of the drawing units
2.2 Define the size of your picture

2.2.1 Understanding the picture dimensions


2.3 Drawing graphics
2.4 Understanding the offset and origin

2.4.1 Example 1: Using the default origin
2.4.2 Example 2: Shifting the origin by (1,1)




3 Examples of the picture environment

3.1 Examples from the LaTeX2e unofficial reference manual

3.1.1 Example 1: the \vector command
3.1.2 Example 2: the \qbezier, \line, \vector, \thinlines and \thicklines commands
3.1.3 Example 3: the \multiput and \linethickness commands


3.2 Other examples

3.2.1 A basic Bézier curve
3.2.2 Ovals, lines and circles
3.2.3 Combining lines, circles and text
3.2.4 Using arrows




4 Further reading


Introduction
LaTeX’s built-in picture environment can be used to create diagrams/figures—you don’t need to load any external packages to use it, but packages such as pict2e and picture have been written to enhance or improve its features. 
This article provides a concise introduction to the picture environment and all examples use the pict2e package. More extensive documentation and a range of helpful examples are readily available within the following resources:

LaTeX2e unofficial reference manual
The Not So Short Introduction to LaTeX2ε (see Chapter 5)
Wikibooks
questions tagged picture-mode on tex.stackexchange
pict2e package documentation
When compared to powerful and sophisticated graphics tools such as TikZ/PGF, MetaPost, PSTricks or Asymptote the picture environment may seem quite limited but, from time-to-time, it might be sufficient for what you need to do.

Creating a new picture
Creating a new picture usually involves the following steps:

define the size of the drawing units you wish to use;
declare a picture environment which defines the picture size;
draw the individual graphic components using the \put, \multiput or \qbezier commands.
Define the size of the drawing units
To create a picture you normally start by setting the drawing units via the command \unitlength, which must be used outside a picture environment. For example, if you write



\setlength{\unitlength}{1cm}



the drawing units would be interpreted as multiples of 1cm. The default unit is 1pt.

Define the size of your picture
The general form of the picture environment is as follows



\begin{picture}(width, height)(Xoffset, Yoffset)
 ...
\end{picture}



where 

width and height are values, in units of \unitlength, which define the size of the picture. LaTeX uses these values to create a box whose dimensions are
box (picture) width = width × \unitlength
box (picture) height = height × \unitlength
(Xoffset, Yoffset) is an optional coordinate which sets the origin (bottom-left corner) of the picture, expressed as an offset relative to the default location. Xoffset and Yoffset are also expressed in units determined by the current value of \unitlength.
Note that Xoffset and Yoffset do not affect the amount of space that LaTeX reserves; i.e., the box dimensions.

Understanding the picture dimensions
We’ll create two pictures, both using \setlength{\unitlength}{1cm} and each with a width and height of 3 units. 
The first picture uses the default origin of (0,0):



\begin{picture}(3,3)
...
\end{picture}



the second picture offsets (shifts) the origin by (1,1):



\begin{picture}(3,3)(1,1)
...
\end{picture}



Drawing graphics
Graphics are created using a sequence of \put, \multiput, or \qbezier commands which produce the individual “components” (or “objects”) from which the picture or illustration is constructed:

\put(x, y){component} draws the component at location (x,  y).
\multiput(x, y)(dx, dy){n}{component} draws the component n times: starting at location (x, y) and repeatedly translating by (dx, dy) to redraw the component.
\qbezier[n](x1, y1)(x, y)(x2, y2): draws a quadratic Bézier curve where:
n an optional integer which determines the number of points used plot/produce the curve
(x1, y1) is the curve’s start point
(x2, y2) is the curve’s end point
(x, y) denotes the (quadratic) Bézier curve control point
A component is a graphical element usually produced using graphics primitives such as \line, \oval, \circle, \vector and so forth—see the LaTeX2e unofficial reference manual or The Not So Short Introduction to LaTeX2ε (Chapter 5) for details of the available primitives.
Note: The pict2e package extends the original picture environment to provide several commands for drawing Bézier curves: \bezier, \qbezier, \cbezier and \qbeziermax.

Understanding the offset and origin
In the following examples the \put command is used to draw coloured dots which indicate key coordinates (positions) in the graphic. Both examples use LaTeX’s \fbox command to draw a border around the box LaTeX created to contain our picture, showing the bounding box of the graphic.

Example 1: Using the default origin


\documentclass{article}
\usepackage[pdftex]{pict2e}
\usepackage[dvipsnames]{xcolor}
\begin{document}
\setlength{\unitlength}{1cm}
\setlength{\fboxsep}{0pt}

This is my picture\fbox{%
\begin{picture}(3,3)
\put(0,0){{\color{blue}\circle*{0.25}}\hbox{\kern3pt \texttt{(0,0)}}}
\put(3,3){{\color{red}\circle*{0.25}}\hbox{\kern3pt \texttt{(3,3)}}}
\end{picture}}
\end{document}



 Open this example in Overleaf

This example produces the following output:

The \fbox command draws a border around the bounding box of the graphic, showing the space (area) reserved by LaTeX: 

picture width = width × \unitlength = 3 × 1cm = 3cm.
picture height = height × \unitlength = 3 × 1cm = 3cm.
The first example shows that the origin, (0,0), is at the point the \begin{picture} command was executed, immediately after the text “This is my picture”. In addition, the top-right corner is at position (3,3), the (width,height) values provided to \begin{picture}(3,3).

Example 2: Shifting the origin by (1,1)


\documentclass{article}
\usepackage[pdftex]{pict2e}
\usepackage[dvipsnames]{xcolor}
\begin{document}
\setlength{\unitlength}{1cm}
\setlength{\fboxsep}{0pt}

This is my picture\fbox{%
\begin{picture}(3,3)(1,1)
\put(0,0){{\color{blue}\circle*{0.25}}\hbox{\kern3pt\texttt{(0,0)}}}
\put(1,1){{\color{orange}\circle*{0.25}}\hbox{\kern3pt\texttt{(1,1)}}}
\put(3,3){{\color{red}\circle*{0.25}}\hbox{\kern3pt\texttt{(3,3)}}}
\put(4,4){{\color{black}\circle*{0.25}}\hbox{\kern3pt\texttt{(4,4)}}}
\end{picture}}
\end{document}



 Open this example in Overleaf

This example produces the following output:

The second example shows the effects of shifting the origin and highlights some key points:

the border created by \fbox shows that the bounding box of the graphic, the width and height of the box created by LaTeX, is unaffected by shifting the origin: it is still determined by the (width,height) values provided to \begin{picture}(3,3)(1,1)
picture width = width × \unitlength = 3 × 1cm = 3cm
picture height = height × \unitlength = 3 × 1cm = 3cm
the drawing elements are not restricted (clipped) to the area (bounding box dimensions) created by LaTeX. For example, the blue dot and (0,0) coordinate are drawn outside the boundary line produced by \fbox, which indicates the bounding box.
It is up to the user to ensure the drawing elements stay within the bounding box and do not overlay any surrounding text.
the origin, (0,0), is no longer located immediately after the text “This is my picture”, at the point the \begin{picture} command was executed: the origin is now shifted 1 unit to the left and 1 unit downwards
the top-right corner is now at position (4,4)
Examples of the picture environment
Examples from the LaTeX2e unofficial reference manual
The LaTeX2e unofficial reference manual contains a number of picture environment examples, some of which are reproduced here together with links which open them in Overleaf, allowing you to edit and explore the code.

Example 1: the \vector command


\documentclass{article}
\usepackage[pdftex]{pict2e}
\begin{document}
\setlength{\unitlength}{1cm}
\begin{picture}(6,6)      % picture box will be 6cm wide by 6cm tall
  \put(0,0){\vector(2,1){4}}  % for every 2 over this vector goes 1 up
    \put(2,1){\makebox(0,0)[l]{\ first leg}}
  \put(4,2){\vector(1,2){2}}
    \put(5,4){\makebox(0,0)[l]{\ second leg}}  
  \put(0,0){\vector(1,1){6}}
    \put(3,3){\makebox(0,0)[r]{sum\ }}  
\end{picture}
\end{document}



 Open this example in Overleaf


This example produces the following output:


Example 2: the \qbezier, \line, \vector, \thinlines and \thicklines commands
Note how the \qbezier command is not used within \put{...} whereas other primitive commands, such as \line, \vector are used within \put{...}.  



\documentclass{article}
\usepackage[pdftex]{pict2e}
\begin{document}
\setlength{\unitlength}{1cm}
\begin{picture}(8,4)
  \thinlines % Start with thin lines
  \put(0,0){\vector(1,0){8}}  % x axis
  \put(0,0){\vector(0,1){4}}  % y axis
  \put(2,0){\line(0,1){3}}    % left side
  \put(4,0){\line(0,1){3.5}}  % right side
  \thicklines % Use thicker lines for the \qbezier commands
  \qbezier(2,3)(2.5,2.9)(3,3.25)
  \qbezier(3,3.25)(3.5,3.6)(4,3.5)
  \thinlines % Back to using thin lines
  \put(2,3){\line(4,1){2}}
  \put(4.5,2.5){\framebox{Trapezoidal Rule}}
\end{picture}
\end{document}



 Open this example in Overleaf

This example produces the following output:


Example 3: the \multiput and \linethickness commands


\documentclass{article}
\usepackage[pdftex]{pict2e}
\begin{document}
\setlength{\unitlength}{1cm}
\thicklines
\begin{picture}(10,10)
  \linethickness{0.05mm}
  \multiput(0,0)(1,0){10}{\line(0,1){10}} 
  \multiput(0,0)(0,1){10}{\line(1,0){10}}
  \linethickness{0.5mm}
  \multiput(0,0)(5,0){3}{\line(0,1){10}}
  \multiput(0,0)(0,5){3}{\line(1,0){10}}
\end{picture}
\end{document}



 Open this example in Overleaf

This example produces the following output:


Other examples
A basic Bézier curve
The following example uses the \qbezier command to draw a Bézier curve:



\qbezier(1,1)(5,5)(9,0.5)



Note the following: 

the \qbezier command is not used within a \put command
the Bézier curve start point is (1,1)
the Bézier curve end point is (9,0.5)
the Bézier curve control point is (5,5)
we do not use the optional integer which determines the number of points used plot/produce the Bézier curve


\documentclass{article}
\usepackage[pdftex]{pict2e}
\begin{document}
\setlength{\unitlength}{0.8cm}
\begin{picture}(10,5)
\thicklines
\qbezier(1,1)(5,5)(9,0.5)
\put(2,1){{Bézier curve}}
\end{picture}
\end{document}



 Open this example in Overleaf

This example produces the following output:


Ovals, lines and circles
The following example demonstrates the \line, \circle and \oval commands and—note how they are all used within the \put{...} command:



\documentclass{article}
\usepackage[pdftex]{pict2e}
\begin{document}
\setlength{\unitlength}{1cm}
\thicklines
\begin{picture}(10,6)
\put(2,2.2){\line(1,0){6}}
\put(2,2.2){\circle{2}}
\put(6,2.2){\oval(4,2)[r]}
\end{picture}
\end{document}



 Open this example in Overleaf

This example produces the following output:

Below is a description of the commands:

\put(2,2.2){\line(1,0){6}}: draws a line 6 units long using the “direction vector” (1,0)
\put(6,2.2){\oval(4,2)[r]}: draws an oval centred in the point (4,2). The parameter [r] is optional, you can use r, l, t and b to show the right, left, top or bottom part of the oval.
\put(2,2.2){\circle{2}}: draws a circle centred at the point (2,2.2) and whose diameter is 2.
Combining lines, circles and text
Different basic elements can be combined to create more complex pictures. In this example several lines and circles are combined to create a picture, together with text to label the points:



\documentclass{article}
\usepackage[pdftex]{pict2e}
\begin{document}
\setlength{\unitlength}{0.8cm}
\begin{picture}(12,4)
\thicklines
\put(8,3.3){{\footnotesize $3$-simplex}}
\put(9,3){\circle*{0.1}}
\put(8.3,2.9){$a_2$}
\put(8,1){\circle*{0.1}}
\put(7.7,0.5){$a_0$}
\put(10,1){\circle*{0.1}}
\put(9.7,0.5){$a_1$}
\put(11,1.66){\circle*{0.1}}
\put(11.1,1.5){$a_3$}
\put(9,3){\line(3,-2){2}}
\put(10,1){\line(3,2){1}}
\put(8,1){\line(1,0){2}}
\put(8,1){\line(1,2){1}}
\put(10,1){\line(-1,2){1}}
\end{picture}
\end{document}



 Open this example in Overleaf

This example produces the following output:

Here is a summary of some commands used:

\thicklines: this increases the thickness of the lines. The \thinlines command has the opposite effect.
\put(8,3.3){{\footnotesize $3$-simplex}}: the text “3-simplex” is inserted at the point (8,3.3), the font size is set to \footnotesize. The same command is used to label each point.
\put(9,3){\circle*{0.1}}: this draws a filled circle, centred at (9,3) with a small diameter of 0.1 (drawing unit) so it can be used as a point.
\put(10,1){\line(3,2){1}}: creates a straight line starting at (10,1) and drawn in the direction of (3,2) with a length of 1 (drawing unit).
Using arrows
Arrows can also be used inside a picture environment so here is a second example:



\documentclass{article}
\usepackage[pdftex]{pict2e}
\begin{document}
\setlength{\unitlength}{0.20mm}
\begin{picture}(400,250)
\put(75,10){\line(1,0){130}}
\put(75,50){\line(1,0){130}}
\put(75,200){\line(1,0){130}}
\put(120,200){\vector(0,-1){150}}
\put(190,200){\vector(0,-1){190}}
\put(97,120){$\alpha$}
\put(170,120){$\beta$}
\put(220,195){upper state}
\put(220,45){lower state 1}
\put(220,5){lower state 2}
\end{picture}
\end{document}



 Open this example in Overleaf

This example produces the following output:

The \vector command uses the same syntax as \line:

\put(120,200){\vector(0,-1){150}}: draws a vector whose start point is (120,200), length is 150 and the drawing direction is (0,-1).
Further reading
For more information see the following resources:

LaTeX2e unofficial reference manual
The Not So Short Introduction to LaTeX2ε (see Chapter 5)
Wikibooks
questions tagged picture-mode on tex.stackexchange
pict2e package documentation
TikZ package
Pgfplots package
Positioning images and tables
Lists of tables and figures
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

TikZ package - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsTikZ packageContents

1 Introduction
2 Basic elements: points, lines and paths
3 Basic geometric shapes: Circles, ellipses and polygons
4 Diagrams
5 Reference Guide
6 Further reading


Introduction
TikZ is probably the most complex and powerful tool to create graphic elements in LaTeX. Starting with a simple example, this article introduces some basic concepts: drawing lines, dots, curves, circles, rectangles etc. 
Firstly, load the tikz package by including the line \usepackage{tikz} in the preamble of your document, then draw a graphic using the tikzpicture environment.



\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}
\draw[gray, thick] (-1,2) -- (2,-4);
\draw[gray, thick] (-1,-1) -- (2,2);
\filldraw[black] (0,0) circle (2pt) node[anchor=west]{Intersection point};
\end{tikzpicture}
\end{document}



 Open this example in Overleaf

This example produces the following output:

In this example two lines and one point are drawn. To add a line the command \draw[gray, thick] defines a graphic element whose colour is gray and with a thick stroke. The line is actually defined by it's two endpoints, (-1,2) and (2,-4), joined by --.
The point is actually a circle drawn by \filldraw[black], this command will not only draw the circle but fill it using black. In this command the centre point (0,0) and the radius (2pt) are declared. Next to the point is a node, which is actually a box containing the text intersection point, and anchored at the west of the point.
It's important to notice the semicolon ; used at the end of each draw command.
Note: The tikzfigure environment can be enclosed inside a figure or similar environment. See the Inserting Images article for more information on this topic.

Basic elements: points, lines and paths
In this section we provide some examples showing how to create some basic graphic elements which can be combined to create more elaborate figures.



\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}

\draw (-2,0) -- (2,0);
\filldraw [gray] (0,0) circle (2pt);
\draw (-2,-2) .. controls (0,0) .. (2,-2);
\draw (-2,2) .. controls (-1,0) and (1,0) .. (2,2);

\end{tikzpicture}
\end{document}



 Open this example in Overleaf

This example produces the following output:

There are three basic commands in this example:

\draw (-2,0) -- (2,0);: This defines a line whose endpoint are (-2,0) and (2,0).
\filldraw [gray] (0,0) circle (2pt);: The point is created as a very small gray circle centred at (0,0) and whose radius is (2pt). The \filldraw command is used to draw elements and fill them with a specific colour. See the next section for more examples.
\draw (-2,2) .. controls (-1,0) and (1,0) .. (2,2);: Draws a Bézier curve. There are 4 points defining it: (-2,2) and (2,2) are its endpoints, (-1,0) and (1,0) are control points that determine "how curved" it is. You can think of these two points as "attractor points".
Basic geometric shapes: Circles, ellipses and polygons
Geometric figures can be constructed from simpler elements so let's start with circles, ellipses and arcs.



\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}
\filldraw[color=red!60, fill=red!5, very thick](-1,0) circle (1.5);
\fill[blue!50] (2.5,0) ellipse (1.5 and 0.5);
\draw[ultra thick, ->] (6.5,0) arc (0:220:1);
\end{tikzpicture}
\end{document}



 Open this example in Overleaf

This example produces the following output:


\filldraw[color=red!60, fill=red!5, very thick](-1,0) circle (1.5);: This command was used in the previous section to draw a point, but in this instance there are some additional parameters inside the brackets. These are explained below:
color=red!60: The colour of the ring around the circle is set to 60% red (lighter than "pure" red). See the reference guide for a list of the default colours available in LaTeX; also, see Using colours in LaTeX to learn how to create your own colours.
fill=red!5: The circle is filled with an even lighter shade of red.
very thick: This parameter defines the thickness of the stroke. See the reference guide for a complete list of values.
\fill[blue!50] (2.5,0) ellipse (1.5 and 0.5);: To create an ellipse you provide a centre point (2.5,0), and two radii: horizontal and vertical (1.5 and 0.5 respectively). Also notice the command fill instead of draw or filldraw, this is because, in this case, there's no need to control outer and inner colours.
\draw[ultra thick, ->] (6.5,0) arc (0:220:1);: This command will draw an arc starting at (6.5,0). The extra parameter  ->  indicates that the arc will have an arrow at the end. In addition to the starting point you must provide three additional values: the starting and ending angles, and the radius; here, these three parameter values are provided in the format (0:220:1).
In addition to curved geometric shapes you can also create elements that use straight lines, using a similar syntax:



\documentclass{article}
\usepackage{tikz}
\begin{document}
\begin{tikzpicture}
\draw[blue, very thick] (0,0) rectangle (3,2);
\draw[orange, ultra thick] (4,0) -- (6,0) -- (5.7,2) -- cycle;
\end{tikzpicture}
\end{document}



 Open this example in Overleaf

This example produces the following output:


\draw[blue, very thick] (0,0) rectangle (3,2);: Rectangles are created by the special command rectangle. You have to provide two points, the first one is where the "pencil" begins to draw the rectangle and the second one is the diagonally opposite corner point.
\draw[orange, ultra thick] (4,0) -- (6,0) -- (5.7,2) -- cycle;: To draw a polygon we draw a closed path of straight lines: a line from (4,0) to (6,0) and a line from (6,0) to (5.7,2). The cycle instruction means that the start and end points should coincide to create a "closed" path (shape), which results in construction of the final line segment.
Diagrams
Nodes are probably the most versatile elements in TikZ. We've already used one node in the introduction—to add some text to the figure. The next example uses nodes to create a diagram.



\documentclass{article}
\usepackage{tikz}
\usetikzlibrary{positioning}
\begin{document}
\begin{tikzpicture}[
roundnode/.style={circle, draw=green!60, fill=green!5, very thick, minimum size=7mm},
squarednode/.style={rectangle, draw=red!60, fill=red!5, very thick, minimum size=5mm},
]
%Nodes
\node[squarednode]      (maintopic)                              {2};
\node[roundnode]        (uppercircle)       [above=of maintopic] {1};
\node[squarednode]      (rightsquare)       [right=of maintopic] {3};
\node[roundnode]        (lowercircle)       [below=of maintopic] {4};

%Lines
\draw[->] (uppercircle.south) -- (maintopic.north);
\draw[->] (maintopic.east) -- (rightsquare.west);
\draw[->] (rightsquare.south) .. controls +(down:7mm) and +(right:7mm) .. (lowercircle.east);
\end{tikzpicture}
\end{document}



 Open this example in Overleaf

This example produces the following output:

There are essentially three commands in this figure: A node definition, a node declaration and lines that join two nodes.

roundnode/.style={circle, draw=green!60, fill=green!5, very thick, minimum size=7mm}: Passed as a parameter to the tikzpicture environment. It defines a node that will be referenced as roundnode: this node will be a circle whose outer ring will be drawn using the colour green!60 and will be filled using green!5. The stroke will be very thick and its minimum size is 7mm. The line below this defines a second rectangle-shaped node called squarednode, using similar parameters.
\node[squarednode] (maintopic)  {2};: This will create a squarednode, as defined in the previous command. This node will have an id of maintopic and will contain the  number 2. If you leave an empty space inside the braces no text will be displayed.
[above=of maintopic]: Notice that all but the first node have an additional parameter that determines its position relative to other nodes. For instance, [above=of maintopic] means that this node should appear above the node named maintopic. For this positioning system to work you have to add \usetikzlibrary{positioning} to your preamble. Without the positioning library, you can use the syntax above of=maintopic instead, but the positioning syntax is more flexible and powerful: you can extend it to write above=3cm of maintopic i.e. control the actual distance from maintopic.
\draw[->] (uppercircle.south) -- (maintopic.north);: An arrow-like straight line will be drawn. The syntax has been already explained in the basic elements section. The only difference is the manner in which we write the endpoints of the line: by referencing a node (this is why we named them) and a position relative to the node.
Reference Guide
Possible color and thickness parameters in the tikz package:



parameter

values

picture


color

white, black, red, green, blue, cyan, magenta, yellow




thickness

ultra thin, very thin, thin, thick, very thick, ultra thick



More colours may be available in your LaTeX distribution. See Using colours in LaTeX

Further reading
For more information see:

Using colours in LaTeX
Pgfplots package
Inserting Images
Lists of tables and figures
Positioning images and tables
Drawing diagrams directly in LaTeX
The TikZ and PGF Packages Manual
TikZ and PGF examples at TeXample.net
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Bibliography management with bibtex - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBibliography management with bibtexContents

1 Advisory note
2 Introduction
3 Bibliography: just a list of \bibitems

3.1 A note on compilation times


4 Enter \(\mathrm{Bib\TeX}\)

4.1 Some notes on using \(\mathrm{Bib\TeX}\) and .bib files


5 Taking another look at .bib files

5.1 Multiple authors in \(\mathrm{Bib\TeX}\)
5.2 Multiple-word last names
5.3 I tried to use % to comment out some lines or entries in my .bib file, but I got lots of error messages instead?


6 How/where do I actually get those .bib files?

6.1 Edit the .bib file as plain text
6.2 Help from GUI-based .bib editors
6.3 Export from reference library services
6.4 I’ve already got a reference list in a Microsoft Word/HTML/PDF file; can I somehow reuse the data without re-typing everything?


7 Summary and further reading

7.1 Further reading




Advisory note
If you are starting from scratch we recommend using biblatex because that package provides localization in several languages, it’s actively developed and makes bibliography management easier and more flexible.

Introduction
Many tutorials have been written about what \(\mathrm{Bib\TeX}\) is and how to use it. However, based on our experience of providing support to Overleaf’s users, it’s still one of the topics that many newcomers to \(\mathrm{\LaTeX}\) find complicated—especially when things don’t go quite right; for example: citations aren’t appearing; problems with authors’ names; not sorted to a required order; URLs not displayed in the references list, and so forth.
In this article we’ll pull together all the threads relating to citations, references and bibliographies, as well as how Overleaf and related tools can help users manage these.
We’ll start with a quick recap of how \(\mathrm{Bib\TeX}\) and bibliography database (.bib) files work and look at some ways to prepare .bib files. This is, of course, running the risk of repeating some of the material contained in many online tutorials, but future articles will expand our coverage to include bibliography styles and biblatex—the alternative package and bibliography processor.
Bibliography: just a list of \bibitems
Let’s first take a quick look “under the hood” to see what a \(\mathrm{\LaTeX}\) reference list is comprised of—please don’t start coding your reference list like this because later in this article we’ll look at other, more convenient, ways to do this.
A reference list really just a thebibliography list of \bibitems:


\begin{thebibliography}{9}
\bibitem{texbook}
Donald E. Knuth (1986) \emph{The \TeX{} Book}, Addison-Wesley Professional.

\bibitem{lamport94}
Leslie Lamport (1994) \emph{\LaTeX: a document preparation system}, Addison
Wesley, Massachusetts, 2nd ed.
\end{thebibliography}



By default, this thebibliography environment is a numbered list with labels [1], [2] and so forth. If the document class used is article, \begin{thebibliography} automatically inserts a numberless section heading with \refname (default value: References). If the document class is book or report, then a numberless chapter heading with \bibname (default value: Bibliography) is inserted instead. Each \bibitem takes a cite key as its parameter, which you can use with \cite commands, followed by information about the reference entry itself. So if you now write


\LaTeX{} \cite{lamport94} is a set of macros built atop \TeX{} \cite{texbook}.



together with the thebibliography block from before, this is what gets rendered into your PDF when you run a \(\mathrm{\LaTeX}\) processor (i.e. any of latex, pdflatex, xelatex or lualatex) on your source file:


Figure 1: Citing entries from a thebibliography list.
Notice how each \bibitem is automatically numbered, and how \cite then inserts the corresponding numerical label.
\begin{thebibliography} takes a numerical argument: the widest label expected in the list. In this example we only have two entries, so 9 is enough. If you have more than ten entries, though, you may notice that the numerical labels in the list start to get misaligned:


Figure 2: thebibliography with a label that’s too short.
We’ll have to make it \begin{thebibliography}{99} instead, so that the longest label is wide enough to accommodate the longer labels, like this:


Figure 3: thebibliography with a longer label width.
If you compile this example code snippet on a local computer you may notice that after the first time you run pdflatex (or another \(\mathrm{\LaTeX}\) processor), the reference list appears in the PDF as expected, but the \cite commands just show up as question marks [?].
This is because after the first \(\mathrm{\LaTeX}\) run the cite keys from each \bibitem (texbook, lamport94) are written to the .aux file and are not yet available for reading by the \cite commands. Only on the second run of pdflatex are the \cite commands able to look up each cite key from the .aux file and insert the corresponding labels ([1], [2]) into the output.
On Overleaf, though, you don’t have to worry about re-running pdflatex yourself. This is because Overleaf uses the latexmk build tool, which automatically re-runs pdflatex (and some other processors) for the requisite number of times needed to resolve \cite outputs. This also accounts for other cross-referencing commands, such as \ref and \tableofcontents.
A note on compilation times
Processing \(\mathrm{\LaTeX}\) reference lists or other forms of cross-referencing, such as indexes, requires multiple runs of software—including the \(\mathrm{\TeX}\) engine (e.g., pdflatex) and associated programs such as \(\mathrm{Bib\TeX}\), makeindex, etc. As mentioned above, Overleaf handles all of these mulitple runs automatically, so you don’t have to worry about them. As a consequence, when the preview on Overleaf is refreshing for documents with bibliographies (or other cross-referencing), or for documents with large image files (as discussed separately here), these essential compilation steps may sometimes make the preview refresh appear to take longer than on your own machine. We do, of course, aim to keep it as short as possible! If you feel your document is taking longer to compile than you’d expect, here are some further tips that may help.
Enter \(\mathrm{Bib\TeX}\)
There are, of course, some inconveniences with manually preparing the thebibliography list:

It’s up to you to accurately format each \bibitem based on the reference style you’re asked to use—which bits should be in bold or italic? Should the year come immediately after the authors, or at the end of the entry? Given names first, or last names first?
If you’re writing for a reference style which requires the reference list to be sorted by the last names of first authors, you’ll need to sort the \bibitems yourself.
For different manuscripts or documents that use different reference styles you’ll need to rewrite the \bibitem for each reference.

This is where \(\mathrm{Bib\TeX}\) and bibliography database files (.bib files) are extremely useful, and this is the recommended approach to manage citations and references in most journals and theses. The biblatex approach, which is slightly different and gaining popularity, also requires a .bib file but we’ll talk about biblatex in a future post.
Instead of formatting cited reference entries in a thebibliography list, we maintain a bibliography database file (let’s name it refs.bib for our example) which contains format-independent information about our references. So our refs.bib file may look like this:


@book{texbook,
  author = {Donald E. Knuth},
  year = {1986},
  title = {The {\TeX} Book},
  publisher = {Addison-Wesley Professional}
}

@book{latex:companion,
  author = {Frank Mittelbach and Michel Gossens
            and Johannes Braams and David Carlisle
            and Chris Rowley},
  year = {2004},
  title = {The {\LaTeX} Companion},
  publisher = {Addison-Wesley Professional},
  edition = {2}
}

@book{latex2e,
  author = {Leslie Lamport},
  year = {1994},
  title = {{\LaTeX}: a Document Preparation System},
  publisher = {Addison Wesley},
  address = {Massachusetts},
  edition = {2}
}

@article{knuth:1984,
  title={Literate Programming},
  author={Donald E. Knuth},
  journal={The Computer Journal},
  volume={27},
  number={2},
  pages={97--111},
  year={1984},
  publisher={Oxford University Press}
}

@inproceedings{lesk:1977,
  title={Computer Typesetting of Technical Journals on {UNIX}},
  author={Michael Lesk and Brian Kernighan},
  booktitle={Proceedings of American Federation of
             Information Processing Societies: 1977
             National Computer Conference},
  pages={879--888},
  year={1977},
  address={Dallas, Texas}
}



You can find more information about other \(\mathrm{Bib\TeX}\) reference entry types and fields here—there’s a huge table showing which fields are supported for which entry types. We’ll talk more about how to prepare .bib files in a later section.
Now we can use \cite with the cite keys as before, but now we replace thebibliography with a \bibliographystyle{...} to choose the reference style, as well as \bibliography{...} to point \(\mathrm{Bib\TeX}\) at the .bib file where the cited references should be looked-up.


\LaTeX{} \cite{latex2e} is a set of macros built atop \TeX{} \cite{texbook}.
\bibliographystyle{plain} % We choose the "plain" reference style
\bibliography{refs} % Entries are in the refs.bib file



This is processed with the following sequence of commands, assuming our \(\mathrm{\LaTeX}\) document is in a file named main.tex (and that we are using pdflatex):

pdflatex main
bibtex main
pdflatex main
pdflatex main

and we get the following output:


Figure 4: \(\mathrm{Bib\TeX}\) output using the plain bibliography style.
Whoah! What’s going on here and why are all those (repeated) processes required? Well, here’s what happens.

During the first pdflatex run, all pdflatex sees is a \bibliographystyle{...} and a \bibliography{...} from main.tex. It doesn’t know what all the \cite{...} commands are about! Consequently, within the output PDF, all the \cite{...} commands are simply rendered as [?], and no reference list appears, for now. But pdflatex writes information about the bibliography style and .bib file, as well as all occurrences of \cite{...}, to the file main.aux.


It’s actually main.aux that \(\mathrm{Bib\TeX}\) is interested in! It notes the .bib file indicated by \bibliography{...}, then looks up all the entries with keys that match the \cite{...} commands used in the .tex file. \(\mathrm{Bib\TeX}\) then uses the style specified with \bibliographystyle{...} to format the cited entries, and writes a formatted thebibliography list into the file main.bbl. The production of the .bbl file is all that’s achieved in this step; no changes are made to the output PDF.



When pdflatex is run again, it now sees that a main.bbl file is available! So it inserts the contents of main.bbl i.e. the \begin{thebibliography}....\end{thebibliography} into the \(\mathrm{\LaTeX}\) source, where \bibliography{...} is. After this step, the reference list appears in the output PDF formatted according to the chosen \bibliographystyle{...}, but the in-text citations are still [?].



pdflatex is run again, and this time the \cite{...} commands are replaced with the corresponding numerical labels in the output PDF!


As before, the latexmk build tool takes care of triggering and re-running pdflatex and bibtex as necessary, so you don’t have to worry about this bit.
Some notes on using \(\mathrm{Bib\TeX}\) and .bib files
A few further things to note about using \(\mathrm{Bib\TeX}\) and .bib files:

You may have noticed that although refs.bib contained five \(\mathrm{Bib\TeX}\) reference entries, only two are included in the reference list in the output PDF. This is an important point about \(\mathrm{Bib\TeX}\): the .bib file’s role is to store bibliographic records, and only entries that have been cited (via \cite{...}) in the .tex files will appear in the reference list. This is similar to how only cited items from an EndNote database will be displayed in the reference list in a Microsoft Word document. If you do want to include all entries—to be displayed but without actually citing all of them—you can write \nocite{*}. This also means you can reuse the same .bib file for all your \(\mathrm{\LaTeX}\) projects: entries that are not cited in a particular manuscript or report will be excluded from the reference list in that document.
\(\mathrm{Bib\TeX}\) requires one \bibliographystyle{...} and one \bibliography{...} to function correctly—in future posts we’ll see how to create multiple bibliographies in the same document. If you keep getting “undefined citation” warnings, check that you have indeed included those two commands, and that the names are spelled correctly. File extensions are not usually required, but bear in mind that file names are case sensitive on some operating systems—including on Overleaf! Therefore, if you typed \bibliographystyle{IEEetran} (note the typo: “e”) instead of \bibliographystyle{IEEEtran}, or wrote \bibliography{refs} when the actual file name is Refs.bib, you’ll get the dreaded [?] as citations.

In the same vein, treat your cite keys as case-sensitive, always. Use the exact same case or spelling in your \cite{...} as in your .bib file.
The order of references in the .bib file does not have any effect on how the reference list is ordered in the output PDF: the sorting order of the reference list is determined by the \bibliographystyle{...}. For example, some readers might have noticed that, within my earlier example, the first citation in the text latex2e is numbered [2], while the second citation in the text (texbook) is numbered [1]! Have \(\mathrm{\LaTeX}\) and \(\mathrm{Bib\TeX}\) lost the plot? Not at all: this is actually because the plain style sorts the reference list by alphabetical order of the first author’s last name. If you prefer a scheme where the numerical citation labels are numbered sequentially throughout the text, you’ll have to choose a bibliography style which implements this. For example, if instead we had used \bibliographystyle{IEEEtran} for that example, we’d get the following output. Notice also how the formatting of each cited item in the reference list has automatically updated to suit the IEEE’s style:




Figure 5: IEEEtran bibliography style output.
We’ll talk more about different bibliography styles, including author–year citation schemes, in a future article. For now, let’s turn our attention to .bib file contents, and how we can make the task of preparing .bib files a bit easier.

Taking another look at .bib files
As you may have noticed earlier, a .bib file contains \(\mathrm{Bib\TeX}\) bibliography entries that start with an entry type prefixed with an @. Each entry has a some key–value \(\mathrm{Bib\TeX}\) fields, placed within a pair of braces ({...}). The cite key is the first piece of information given within these braces, and every field in the entry must be separated by a comma:



@article{knuth:1984,
  title={Literate Programming},
  author={Donald E. Knuth},
  journal={The Computer Journal},
  volume={27},
  number={2},
  pages={97--111},
  year={1984},
  publisher={Oxford University Press}
}



As a general rule, every bibliography entry should have an author, year and title field, no matter what the type is. There are about a dozen entry types although some bibliography styles may recognise/define more; however, it is likely that you will most frequently use the following entry types:

@article for journal articles (see example above).
@inproceedings for conference proceeding articles:



@inproceedings{FosterEtAl:2003,
  author = {George Foster and Simona Gandrabur and Philippe Langlais and Pierre
    Plamondon and Graham Russell and Michel Simard},
  title = {Statistical Machine Translation: Rapid Development with Limited Resources},
  booktitle = {Proceedings of {MT Summit IX}},
  year = {2003},
  pages = {110--119},
  address = {New Orleans, USA},
}




@book for books (see examples above).
@phdthesis, @masterthesis for dissertations and theses:



@phdthesis{Alsolami:2012,
    title    = {An examination of keystroke dynamics
                for continuous user authentication},
    school   = {Queensland University of Technology},
    author   = {Eesa Alsolami},
    year     = {2012}
}




@inbook is for a book chapter where the entire book was written by the same author(s): the chapter of interest is identified by a chapter number:



@inbook{peyret2012:ch7,
  title={Computational Methods for Fluid Flow},
  edition={2},
  author={Peyret, Roger and Taylor, Thomas D},
  year={1983},
  publisher={Springer-Verlag},
  address={New York},
  chapter={7, 14}
}




@incollection is for a contributed chapter in a book, so would have its own author and title. The actual title of the entire book is given in the booktitle field; it is likely that an editor field will also be present:



@incollection{Mihalcea:2006,
  author = {Rada Mihalcea},
  title = {Knowledge-Based Methods for {WSD}},
  booktitle = {Word Sense Disambiguation: Algorithms
               and Applications},
  publisher = {Springer},
  year = {2006},
  editor = {Eneko Agirre and Philip Edmonds},
  pages = {107--132},
  address = {Dordrecht, the Netherlands}
}




@misc is for whatever doesn’t quite fit any other entry type. It can be especially useful for web pages—by writing note = \url{http://...} or url = {http://...}:

you will often find it useful to add \usepackage{url} or \usepackage{hyperref} in your .tex files’ preamble (for more robust handling of URLs);
not all bibliography styles support the url field: plain doesn’t, but IEEEtran does. All styles support note. More on this in a future post;
you should be mindful that even web pages and @misc entries should have an author, a year and a title field:






@misc{web:lang:stats,
  author = {W3Techs},
  title = {Usage Statistics of Content Languages
           for Websites},
  year = {2017},
  note = {Last accessed 16 September 2017},
  url = {http://w3techs.com/technologies/overview/content_language/all}
}



Multiple authors in \(\mathrm{Bib\TeX}\)
In a .bib file, commas are only used to separate the last name from the first name of an author—if the last name is written first. Individual author names are separated by and. So these are correct:


author = {Jane Doe and John Goodenough and Foo Bar}



or


author = {Doe, Jane and Goodenough, John and Bar, Foo}



But none of the following will work correctly—you’ll get weird output, or even error messages from \(\mathrm{Bib\TeX}\)! So take extra care if you are copying author names from a paper or from a web page.


author = {Jand Doe, John Goodneough, Foo Bar}
author = {Jand Doe, John Goodneough and Foo Bar}
author = {Jand Doe, John Goodneough, and Foo Bar}



Multiple-word last names
If an author’s last name is made up of multiple words separated by spaces, or if it’s actually an organisation, place an extra pair of braces around the last name so that \(\mathrm{Bib\TeX}\) will recognise the grouped words as the last name:


author = {{World Health Organisation}}
author = {Geert {Van der Plas} and John Doe}



Alternatively, you can use the Lastname, Firstname format; some users find that clearer and more readable:


author = {Van der Plas, Geert and Doe, John}



Remember: Whether the first or last name appears first  in the output (“John Doe” vs “Doe, John”), or whether the first name is automatically abbreviated “J. Doe” or “Doe, J.” vs “John Doe” “J. Doe”), all such details are controlled by the \bibliographystyle.
I tried to use % to comment out some lines or entries in my .bib file, but I got lots of error messages instead?
% is actually not a comment character in .bib files! So, inserting a % in .bib files not only fails to comment out the line, it also causes some \(\mathrm{Bib\TeX}\) errors. To get \(\mathrm{Bib\TeX}\) to ignore a particular field we just need to rename the field to something that \(\mathrm{Bib\TeX}\) doesn’t recognise. For example, if you want to keep a date field around but prefer that it’s ignored (perhaps because you want \(\mathrm{Bib\TeX}\) to use the year field instead) write Tdate = {...} or the more human-readable IGNOREdate = {...}.
To get \(\mathrm{Bib\TeX}\) to ignore an entire entry you can remove the @ before the entry type. A valid reference entry always starts with a @ followed by the entry type; without the @ character \(\mathrm{Bib\TeX}\) skips the lines until it encounters another @.
How/where do I actually get those .bib files?
Edit the .bib file as plain text
Because .bib files are plain text you can certainly write them by hand—once you’re familiar with \(\mathrm{Bib\TeX}\)’s required syntax. Just make sure that you save it with a .bib extension, and that your editor doesn’t surreptitiously add a .txt or some other suffix. On Overleaf you can click on the “Files…” link at the top of the file list panel, and then on “Add blank file” to create a fresh .bib file to work on.

Pro tip: Did you know that Google Scholar search results can be exported to a \(\mathrm{Bib\TeX}\) entry? Click on the “Cite” link below each search result, and then on the “\(\mathrm{Bib\TeX}\)” option search. You can then copy the \(\mathrm{Bib\TeX}\) entry generated. Here’s a video that demonstrates the process. Note that you should always double-check the fields presented in the entry, as the automatically populated information isn’t always comprehensive or accurate!

Help from GUI-based .bib editors
Many users prefer to use a dedicated \(\mathrm{Bib\TeX}\) bibliography database editor/manager, such as JabRef or BibDesk to maintain, edit and add entries to their .bib files. Using a GUI can indeed help reduce syntax and spelling errors whilst creating bibliography entries in a \(\mathrm{Bib\TeX}\) file. If you prefer, you can prepare your .bib file on your own machine using JabRef, BibDesk or another utility, and then upload it to your Overleaf.

Pro tip: If you’d like to use the same .bib for multiple Overleaf projects, have a look at this help article to set up a “master project”, or this one for sharing files from Google Drive (the instructions apply to other cloud-based storage solutions, such as Dropbox).

Export from reference library services
If you click on the Upload files button above the file list panel, you'll notice some options: Import from Mendeley, and Import from Zotero. If you’re already using one of those reference library management services, Overleaf can now hook into the Web exporter APIs provided by those services to import the .bib file (generated from your library) into your Overleaf project. For more information, see the Overleaf article How to link your Overleaf account to Mendeley and Zotero.
For other reference library services that don’t have a public API, or are not yet directly integrated with Overleaf, such as EndNote or Paperpile, look for an “export to .bib” option in the application or service. Once you have a .bib file, you can then add it to your Overleaf project.
I’ve already got a reference list in a Microsoft Word/HTML/PDF file; can I somehow reuse the data without re-typing everything?
It used to be that you would have to hand-code each line into a \bibitem or an @article{...} entry (or another entry type) in a .bib file. As you can imagine, it’s not exactly a task that many people look forward to. Fortunately, these days some tools are available to help. They typically take a plain text file, e.g.


[1] J. Smith, J. Doe and F. Bar (2001) A ground-breaking study.
Journal of Amazing Research 5(11), pp. 29-34.

[2] ...



and attempt to parse the lines, converting it into a structured bibliography as a \(\mathrm{Bib\TeX}\) .bib file. For example, have a look at text2bib or Edifix. Be sure to go through the options of these tools carefully, so that they work well with your existing unstructured bibliography in plain text.
Summary and further reading
We’ve had a quick look at how \(\mathrm{Bib\TeX}\) processes a .bib bibliography database file to resolve \cite commands and produce a formatted reference list, as well as how to prepare .bib files.
Happy \(\mathrm{Bib\TeX}\)ing!
Further reading
For more information see:

Bibtex bibliography styles
Bibliography management with natbib
Bibliography management with biblatex
BibTeX documentation at CTAN web site
tocbind package documentation
Table of contents
Management in a large project
Multi-file LaTeX projects
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Bibliography management with natbib - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBibliography management with natbibWhen it comes to bibliography management in LaTeX, the package natbib is a package for customising citations (especially author-year citation schemes) when using BibTeX. This article explains how to use natbib to format and cite bibliographic sources.
Note: If you are starting from scratch it's recommended to use biblatex because that package provides localization in several languages, it's actively developed and makes bibliography management easier and more flexible. However, note that most journals still use bibtex and natbib.

Contents

1 Introduction
2 Basic usage
3 The bibliography file
4 Adding the bibliography in the table of contents
5 Reference guide
6 Further reading


Introduction
A minimal working example is presented below:




\usepackage{natbib}
\bibliographystyle{unsrtnat}
\title{Bibliography management: \texttt{natbib} package}
\author{Overleaf}
\date {April 2021}

\begin{document}

\maketitle

This document is an example of \texttt{natbib} package using in bibliography
management. Three items are cited: \textit{The \LaTeX\ Companion} book 
\cite{latexcompanion}, the Einstein journal paper \cite{einstein}, and the 
Donald Knuth's website \cite{knuthwebsite}. The \LaTeX\ related items are 
\cite{latexcompanion,knuthwebsite}. 

\medskip

\bibliography{sample}

\end{document}








In this example there are four basic commands to manage the bibliography:

\usepackage{natbib}
Imports the package natbib.
\bibliographystyle{unsrtnat}
Sets the bibliography style unsrtnat. See the article about bibliography styles for more information.
\cite{labelcompanion}
Prints a reference to the citation entry, what is printed depends on the citation style. The word inside the braces corresponds to a particular entry in the bibliography file.
bibliography{sample}
Imports the file sample.bib that contains bibliography sources. See the bibliography file section.
 Open an example of the natbib package in Overleaf


Basic usage
A simple working example was shown at the introduction, there are more bibliography-related commands available.




\documentclass{article}
\usepackage[english]{babel}
\usepackage[square,numbers]{natbib}
\bibliographystyle{abbrvnat}

\title{Bibliography management: \texttt{natbib} package}
\author{Overleaf}
\date {April 2021}

\begin{document}

\maketitle

This document is an example of \texttt{natbib} package using in bibliography 
management. Three items are cited: \textit{The \LaTeX\ Companion} book \cite{latexcompanion}, the Einstein journal paper \citet{einstein}, and the 
Donald Knuth's website \cite{knuthwebsite}. The \LaTeX\ related items are
\cite{latexcompanion,knuthwebsite}. 

\medskip

\bibliography{sample}

\end{document}








There are a few changes in this example:

The options square and numbers in \usepackage[square,numbers]{natbib} enable squared brackets and numeric citations respectively. See the reference guide for a list of package options
The styles abbrvnat is used here, see bibliography styles
The command \citet adds the name of the author to the citation mark, regardless of the citation style.
 Open another example of the natbib package in Overleaf


The bibliography file
The bibliography files must have the standard bibtex syntax and the extension .bib. They contain a list of bibliography sources and several fields with information about each entry.




@article{einstein,
    author =       "Albert Einstein",
    title =        "{Zur Elektrodynamik bewegter K{\"o}rper}. ({German})
        [{On} the electrodynamics of moving bodies]",
    journal =      "Annalen der Physik",
    volume =       "322",
    number =       "10",
    pages =        "891--921",
    year =         "1905",
    DOI =          "http://dx.doi.org/10.1002/andp.19053221004"
}

@book{latexcompanion,
    author    = "Michel Goossens and Frank Mittelbach and Alexander Samarin",
    title     = "The \LaTeX\ Companion",
    year      = "1993",
    publisher = "Addison-Wesley",
    address   = "Reading, Massachusetts"
}

@misc{knuthwebsite,
    author    = "Donald Knuth",
    title     = "Knuth: Computers and Typesetting",
    url       = "http://www-cs-faculty.stanford.edu/\~{}uno/abcde.html"
}




This file contains records in a special format, for instance, the first bibliographic reference is defined by:

@article{...}
This is the first line of a record entry, @article tells BibTeX that the information stored here is about an article. The information about this entry is enclosed within braces.  Besides the entry types shown in the example (article, book and misc there are a lot more, see the reference guide.
einstein
The label einstein is assigned to this entry, is a unique identifier that can be used to refer this article within the document.
author = "Albert Einstein",
This is the first field in the bibliography entry, indicates that the author of this article is Albert Einstein. Several comma-separated fields can be added using the same syntax key = value, for instance: title, pages, year, URL, etc. See the reference guide for a list of possible fields.
The information in this file can later be printed and referenced within a LaTeX document, as shown in the previous sections, with the command \bibliography{sample}. Not all the information in the .bib file will be displayed, it depends on the bibliography style set in the document.

Adding the bibliography in the table of contents
If you want the bibliography to be included in the table of contents, importing the package tocbibind in the preamble will do the trick:




\documentclass{article}
\usepackage[english]{babel}

%Includes "References" in the table of contents
\usepackage[nottoc]{tocbibind}

%Import the natbib package and sets a bibliography style
\usepackage[square,numbers]{natbib}
\bibliographystyle{abbrvnat}

%Title and author
\title{Bibliography management: \texttt{natbib} package}
\author{Overleaf}
\date {April 2021}

\begin{document}

\maketitle

\tableofcontents

\section{First Section}
This document is an example...

%Imports the bibliography file "sample.bib"
\bibliography{sample}

\end{document}








 Open an example of natbib and table of contents in Overleaf

Adding the line 

\usepackage[nottoc]{tocbibind}

to the preamble will print the "References" or "Bibliography" in the table of contents, depending on the document type. Be careful, it will also add other elements like the Index, Glossary and list of Listings to the table of contents. For more information see the tocbibind package documentation.

Reference guide
natbib package options

round for round parentheses
square uses square brackets
curly curly braces
angle angle braces or chevrons
semicolon separates multiple citations with semicolons
colon same as semicolon
comma separate multiple citations with commas
authoryear for author-year citations
numbers for numerical citations
super superscripts for numerical citations, as in Nature
sort orders multiple citations according to the list of references
sort&compress same as sort but multiple numerical citations are compressed if possible
compress compress without sorting
longnamefirst the full name of the author will appear in the first citation of any reference
sectionbib To be used with the package chapterbib to add the bibliography to the table of contents as a unnumbered section instead of an unnumbered chapter
nonamebreak prevents hyphenation of author names
elide to omit common elements of merged references
Standard entry types

article
Article from a magazine or journal
book
A published book
booklet
A work that is printed but has no publisher or sponsoring institution
conference
An article in a conference proceedings
inbook
A part of a book (section, chapter and so on)
incollection
A part of a book having its own title
inproceedings
An article in a conference proceedings
manual
Technical documentation
mastersthesis
A Master's thesis
misc
Something that doesn't fit in any other type
phdthesis
A PhD thesis
proceedings
The same as conference
techreport
Report published by an institution
unpublished
Document not formally published, with author and title

Most common fields used in BibTeX



address
annote
author


booktitle
chaper
crossref


edition
editor
institution


journal
key
month


note
number
organization


pages
publisher
school


series
title
type


volume
year
URL


ISBN
ISSN
LCCN


abstract
keywords
price


copyright
language
contents

Further reading
For more information see

Natbib bibliography styles
Natbib citation styles
Bibliography management with biblatex
Bibliography management with bibtex
natbib documentation at CTAN web site
tocbind package documentation
International language support
Table of contents
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Bibliography management with biblatex - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBibliography management with biblatexWhen it comes to bibliography management packages, there are three main options in LaTeX: bibtex, natbib and biblatex. Biblatex is a modern program to process bibliography information, provides an easier and more flexible interface and a better language localization than the other two options. This article explains how to use biblatex to manage and format the bibliography in a LaTeX document.

Contents

1 Introduction
2 Basic usage
3 The bibliography file
4 Customizing the bibliography
5 Adding the bibliography in the table of contents
6 Reference guide
7 Further reading


Introduction
A minimal working example of the biblatex package is shown below:




\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}

\usepackage{biblatex}
\addbibresource{sample.bib}

\begin{document}
Let's cite! The Einstein's journal paper \cite{einstein} and the Dirac's 
book \cite{dirac} are physics related items. 

\printbibliography

\end{document}








There are four bibliography-related commands in this example:

\usepackage{biblatex}
Imports the package biblatex.
\addbibresource{sample.bib}
Imports the bibtex data file sample.bib, this file is the one that includes information about each referenced book, article, etc. See the bibliography file section for more information.
\cite{einstein}
This command inserts a reference within the document, [1] in this case, that corresponds to an element in the bibliography, "einstein" is a keyword  corresponding to an entry in sample.bib.
\printbibliography
Prints the list of cited references, the default title is "References" for the article document class and "Bibliography" for books and reports.
Overleaf provides several templates with pre-defined styles to manage bibliography. See these examples. 
 Open a biblatex package example on Overleaf


Basic usage
Several parameters can be passed to the package importing statement, let's see




\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}

\usepackage{comment}

\usepackage[
backend=biber,
style=alphabetic,
sorting=ynt
]{biblatex}
\addbibresource{sample.bib}

\title{Bibliography management: \texttt{biblatex} package}
\author{Overleaf}
\date{ }

\begin{document}

\maketitle

Using \texttt{biblatex} you can display bibliography divided into sections, 
depending of citation type. 
Let's cite! The Einstein's journal paper \cite{einstein} and the Dirac's 
book \cite{dirac} are physics related items. 
Next, \textit{The \LaTeX\ Companion} book \cite{latexcompanion}, the Donald 
Knuth's website \cite{knuthwebsite}, \textit{The Comprehensive Tex Archive 
Network} (CTAN) \cite{ctan} are \LaTeX\ related items; but the others Donald 
Knuth's items \cite{knuth-fa,knuth-acp} are dedicated to programming. 

\medskip

\printbibliography

\end{document}








Some extra options, inside brackets and comma-separated, are added when importing biblatex:

backend=biber
Sets the backend to sort the bibliography, biber is the default one and recommended since it provides full localization for several commands and the styles for biber are easier to modify because they use standard LaTeX macros. The other supported backend is bibtex, which is a more traditional program; if set as backend will only used to sort the bibliography, so no bibtex styles can be used here.
style=alphabetic
Defines the bibliography style and the citation style, in this case alphabetic. Depending on the style more citation commands might be available. See bibliography styles and citation styles for more information.
sorting=ynt
Determines the criteria to sort the bibliographic sources. In this case they are sorted by year, name and title. See the reference guide for a list of sorting options.
The rest of the commands were already explained at the introduction.
 Open a biblatex package example on Overleaf


The bibliography file
The bibliography files must have the standard bibtex syntax




@article{einstein,
    author =       "Albert Einstein",
    title =        "{Zur Elektrodynamik bewegter K{\"o}rper}. ({German})
    [{On} the electrodynamics of moving bodies]",
    journal =      "Annalen der Physik",
    volume =       "322",
    number =       "10",
    pages =        "891--921",
    year =         "1905",
    DOI =          "http://dx.doi.org/10.1002/andp.19053221004",
    keywords =     "physics"
}

@book{dirac,
    title={The Principles of Quantum Mechanics},
    author={Paul Adrien Maurice Dirac},
    isbn={9780198520115},
    series={International series of monographs on physics},
    year={1981},
    publisher={Clarendon Press},
    keywords = {physics}
}

@online{knuthwebsite,
    author    = "Donald Knuth",
    title     = "Knuth: Computers and Typesetting",
    url       = "http://www-cs-faculty.stanford.edu/~uno/abcde.html",
    keywords  = "latex,knuth"
}

@inbook{knuth-fa,
    author = "Donald E. Knuth",
    title = "Fundamental Algorithms",
    publisher = "Addison-Wesley",
    year = "1973",
    chapter = "1.2",
    keywords  = "knuth,programming"
}
...




This file contains records in a special format, for instance, the first bibliographic reference is defined by:

@article{...}
This is the first line of a record entry, @article tells BibTeX that the information stored here is about an article. The information about this entry is enclosed within braces.  Besides the entry types shown in the example (article, book, online and inbook) there are a lot more, see the reference guide.
einstein
The label einstein is assigned to this entry, is an identifier that can be used to refer this article within the document.
author = "Albert Einstein",
This is the first field in the bibliography entry, indicates that the author of this article is Albert Einstein. Several comma-separated fields can be added using the same syntax key = value, for instance: title, pages, year, URL, etc. See the reference guide for a list of possible fields.
The information in this file can later be printed and referenced within a LaTeX document, as shown in the previous sections, with the command \addbibresource{sample.bib}. Not all the information in the .bib file will be displayed, it depends on the bibliography style set in the document.
 Open a biblatex package example on Overleaf


Customizing the bibliography
Biblatex allows high customization of the bibliography section with little effort. It was mentioned that several citation styles and bibliography styles are available, and you can also create new ones. Another customization option is to change the default title of the bibliography section.




\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}

\usepackage{comment}

\usepackage[
backend=biber,
style=alphabetic,
sorting=ynt
]{biblatex}
\addbibresource{sample.bib}

\title{Bibliography management: \texttt{biblatex} package}
\author{Overleaf}
\date{ }

\begin{document}

\maketitle

Using \texttt{biblatex} you can display bibliography divided into sections, 
depending of citation type. 
Let's cite! The Einstein's journal paper \cite{einstein} and the Dirac's 
book \cite{dirac} are physics related items. 
Next, \textit{The \LaTeX\ Companion} book \cite{latexcompanion}, the Donald 
Knuth's website \cite{knuthwebsite}, \textit{The Comprehensive Tex Archive 
Network} (CTAN) \cite{ctan} are \LaTeX\ related items; but the others Donald 
Knuth's items \cite{knuth-fa,knuth-acp} are dedicated to programming. 

\medskip

\printbibliography[title={Whole bibliography}]

\end{document}








The additional parameter title={Whole bibliography} passed inside brackets to the command \printbibliography is the one that changes the title.
The bibliography can also be subdivided into sections based on different filters, for instance: print only references from the same author, the same journal or similar title. Below an example.




\printbibliography[type=article,title={Articles only}]
\printbibliography[type=book,title={Books only}]

\printbibliography[keyword={physics},title={Physics-related only}]
\printbibliography[keyword={latex},title={\LaTeX-related only}]








Here, the bibliography is divided in 4 sections. The syntax of the commands used here is explained below:

\printbibliography[type=article,title={Articles only}]
Only prints entries whose type is "article", and sets the title "Articles only" for this section. The same syntax works for any other entry type.
\printbibliography[keyword={physics},title={Physics-related only}]
Filters bibliography entries that include the word "physics" in any of the fields. Sets the title "Physics-related only" for said section.
 Open a biblatex package example on Overleaf


Adding the bibliography in the table of contents
For the bibliography the be printed in the table of contents an extra option must be passed to \printbibliography




\printbibliography[
heading=bibintoc,
title={Whole bibliography}
]

\printbibliography[heading=subbibintoc,type=article,title={Articles only}]








A section and a subsection are added to the table of contents:

In the first case, adding heading=bibintoc adds the title to the table of contents as an unnumbered chapter if possible or as an unnumbered section otherwise.
The second case is heading=subbibintoc that adds the title as a second level entry in the table of contents, in this example as a subsection nested in "Whole bibliography".
 Open a biblatex package example on Overleaf


Reference guide
Supported entry types



article
book
mvbook


inbook
bookinbook
suppbook


booklet
collection
mvcollection


incollection
suppcollection
manual


misc
online
patent


periodical
suppperiodical
proceedings


mvproceedings
inproceedings
reference


mvreference
inreference
report


set
thesis
unpublished


custom
conference
electronic


mastersthesis
phdthesis
techreport


datatype




Supported entry fields (The printed information depends on the bibliography style)



abstract
afterword
annotation
annotator


author
authortype
bookauthor
bookpagination


booksubtitle
booktitle
chapter
commentator


date
doi
edition
editor


editortype
eid
entrysubtype
eprint


eprinttype
eprintclass
eventdate
eventtitle


file
foreword
holder
howpublished


indextitle
institution
introduction
isan


isbn
ismn
isrn
issue


issuesubtitle
issuetitle
iswc
journalsubtitle


journaltitle
label
language
library


location
mainsubtitle
maintitle
month


note
number
organization
origdate


origlanguage
origlocation
origpublisher
origtitle


pages
pagetotal
pagination
part


publisher
pubstate
reprinttitle
series


shortauthor
shortedition
shorthand
shorthandintro


shortjournal
shortseries
shorttitle
subtitle


title
translator
type
url


venue
version
volume
year

Bibliography sorting options



option
description


nty
sort by name, title, year


nyt
sort by name, year, title


nyvt
sort by name, year, volume, title


anyt
sort by alphabetic label, name, year, title


anyvt
sort by alphabetic label, name, year, volume, title


ydnt
sort by year (descending), name, title


none
entries are processed in citation order

Further reading
For more information see

Bibliography styles
Biblatex citation styles
Basic bibliography management
Bibliography management with natbib
biblatex documentation
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Bibtex bibliography styles - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBibtex bibliography stylesContents

1 Introduction and example
2 Table of stylename values
3 Further reading


Introduction and example
When using  BiBTeX, the bibliography style is set and the bibliography file is imported with the following two commands: 

  \bibliographystyle{stylename}
  \bibliography{bibfile}

where bibfile is the name of the bibliography .bib file, without the extension, and stylename is one of values shown in the table below.
Here is an example that you can open in Overleaf—the .bib file is created for you:



\documentclass[a4paper,10pt]{article}
\usepackage[english]{babel}
%Includes "References" in the table of contents
\usepackage[nottoc]{tocbibind}

%Title, date an author of the document
\title{Bibliography management: BibTeX}
\author{Overleaf}

%Begining of the document
\begin{document}

\maketitle

\tableofcontents

\medskip

\section{First Section}
This document is an example of BibTeX using in bibliography management. Three items are cited: \textit{The \LaTeX\ Companion} book \cite{latexcompanion}, the Einstein journal paper \cite{einstein}, and the Donald Knuth's website \cite{knuthwebsite}. The \LaTeX\ related items are \cite{latexcompanion,knuthwebsite}. 

\medskip

%Sets the bibliography style to UNSRT and imports the 
%bibliography file "sample.bib".
\bibliographystyle{unsrt}
\bibliography{sample}
\end{document}



 Open in Overleaf (a suitable .bib file is generated)


Table of stylename values


stylename
output


abbrv



acm



alpha



apalike



ieeetr



plain



siam



unsrt


Further reading
For more information see:

Bibliography management with bibtex
BibTeX documentation at CTAN web site
tocbind package documentation
Bibliography management with natbib
Bibliography management with biblatex
Table of contents
Management in a large project
Multi-file LaTeX projects
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Natbib bibliography styles - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsPremium featuresFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsNatbib bibliography stylesNatbib styles
The next commands are the ones that set the bibliography style and import the bibliography file. See Bibliography management with natbib for more information.

%in the preamble
%--------------------------------
  \usepackage{natbib}
  \bibliographystyle{stylename}
%--------------------------------

%Where the bibliography will be printed
  \bibliography{bibfile}

where bibfile is the name of the bibliography .bib file and stylename is one of the following:



stylename
output


dinat



plainnat



abbrvnat



unsrtnat



rusnat



ksfh_nat


Further reading
Bibliography management with natbib
Natbib citation styles
Natbib package documentation
International language support
Management in a large project
Table of contents
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingPremium featuresFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Natbib citation styles - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsNatbib citation stylesNatbib uses the citation style associated with the corresponding bibliography style if no specific citation commands are declared. There are some additional commands to control some punctuation parameters. See the example below:




\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}

%Import the natbib package and sets a bibliography  and citation styles
\usepackage{natbib}
\bibliographystyle{abbrvnat}
\setcitestyle{authoryear,open={((},close={))}} %Citation-related commands

\title{Natbib Example}

\author{Overleaf team}

\begin{document}

\maketitle

\section{First Section}
This document is an example with two cited items: \textit{The \LaTeX\ Companion} book \cite[see][chap 2]{latexcompanion} and Einstein's journal paper \citep{einstein}. 


%Imports the bibliography file "sample.bib"
\bibliography{sample}

\end{document}








The specific command to format the citation style is:

\setcitestyle{authoryear, open={((},close={))}

The parameters, comma-separated, tell LaTeX to use the authoryear citation mode and use double parentheses as opening and closing marks. The various parameters that can be passed to this command are the following:

Citation  mode: authoryear, numbers or super.
Brackets: round or square. You can manually set any other opening and closing characters with open={char} adn close={char}.
Citation separator: semicolon, comma.
Separator between author and year: aysep{char}.
Separator between years with common author: yysep={char}.
Text before post-note: notesep={text}.
The are other additional citation commands depending on the citation mode. For instance, in the example above the command \cite[see][chap 2]{latexcompanion} takes two extra parameters; the first optional parameter see is printed before the citation mark and the second optional parameter chap 2 is printed after the citation mark. Below a table describing some additional citation commands:



command
description


\citet{}
Textual citation


\citep{}
Parenthetical citation


\citet*{}
Same as \citet but if there are several authors, all names are printed


\citep*{}
The same as \citep but if there are several authors, all names are printed


\citeauthor{}
Prints only the name of the authors(s)


\citeyear{}
Prints only the year of the publication.

For more information about the rest of the commands in this example see Bibliography management with natbib
 Open an example of the natbib package in Overleaf


Further reading
Bibliography management with natbib
Natbib bibliography styles
Natbib package documentation
International language support
Management in a large project
Table of contents
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Biblatex bibliography styles - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBiblatex bibliography stylesThe next commands are the ones that set the bibliography style and import the bibliography file. See Bibliography management with biblatex for more information.

%in the preamble
%--------------------------------
  \usepackage[
    backend=biber,
    style=stylename,
  ]{biblatex}

 \addbibresource{bibfile}
%--------------------------------

%Where the bibliography will be printed
  \printbibliography


where bibfile is the name of the bibliography .bib file and stylename is one of the following:



stylename
output


numeric



alphabetic



authoryear



authortitle



verbose



reading



draft


The draft style is intended for editing your document before the final version, since it makes easier to keep track of the cited sources.
There are some additional bibliography styles you can use in Overleaf



stylename
output


authoryear-icomp



apa



bwl-FU



chem-acs



chem-angew



chem-biochem



chem-rsc



ieee



mla



musuos



nature



nejm



phys



science



geschichtsfrkl



oscola


More styles can be found by searching on CTAN.

Further reading
For more information see

Bibliography management in LaTeX
Biblatex citation styles
Biblatex package documentation
Table of contents
Management in a large project
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Biblatex citation styles - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InNo Search ResultsBiblatex citation stylesContents

1 Introduction and example
2 Citation styles
3 Further reading


Introduction and example
Biblatex provides numerous citation styles but if no citation style is set LaTeX uses the one that matches the bibliography style. Here is a minimal example showing use of the biblatex parameter style=alphabetic to set the citation style to alphabetic.



\documentclass{article}
\usepackage[
backend=biber,
style=alphabetic,
]{biblatex}
\title{A bibLaTeX example}
\addbibresource{sample.bib} %Imports bibliography file

\begin{document}
\section{First section}

Items that are cited: \textit{The \LaTeX\ Companion} book \cite{latexcompanion} together with Einstein's journal paper \cite{einstein} and Dirac's book \cite{dirac}---which are physics-related items. Next, citing two of Knuth's books: \textit{Fundamental Algorithms} \cite{knuth-fa} and \textit{The Art of Computer Programming} \cite{knuth-acp}.

\medskip

\printbibliography
\end{document}



 Open this example in Overleaf (the sample.bib file is created for you).
This example produces the following output:


Citation styles
Standard citation styles include:

numeric Implements a numeric citation scheme intended for in-text citations. Should be employed in conjunction with the numeric bibliography style.
numeric-comp Compact variant of the numeric mode. Citations like [1, 2, 3] are replaced by [1-3].
numeric-verb Verbose variant of the numeric style. Instead of [2, 5, 7] will print [2];[5];[7].
alphabetic Alphabetic citation scheme similar to the standard alpha in style bibtex. To be used in conjunction with the alphabetic bibliography style.
alphabetic-verb Verbose version of the alphabetic style. Instead of [Doe98, Doe95, Farn2004] will print [Doe98];[Doe95];[Farn2004].
authoryear Implements the author-year citation scheme. To be used in conjunction with the author-year bibliography style.
authoryear-comp Compact variant of the authoryear style. Prints the author only once if subsequent references passed to a single citation command share the same author. Prints Doe 1992, 1995 instead of Doe 1992, Doe 1995.
authoryear-ibid A variant of the authoryear intended for footnote citations. Replaces repeated citations by the abbreviation ibidem.
authoryear-icomp A style combining the features of authoryear-comp and authoryear-ibid
authortitle Implements the author-title scheme. Intended for citations given in footnotes.
authortitle-comp Compact variant of authortitle. Instead of Doe, First title; Doe, Second title this will print Doe, First title, Second title.
authortitle-ibid A variant of the authortitle intended for footnote citations. Replaces repeated citations by the abbreviation ibidem.
authortitle-icomp A style combining authortitle-comp and authortitle-ibid.
authortitle-terse Variant of authoritle that only prints the title if the bibliography contains more than one work of the respective author/editor.
authortitle-tcomp Style combining authortitle-terse and authortitle-comp.
authortitle-ticomp Style combining authortitle-icomp and authortitle-terse.
verbose Citation style that prints a full citation when the entry is cited for the first time and a short version afterwards.
reading Citation style that goes with the bibliography style by the same name. Loads the authortitle style.
There are other non-standard citation styles popular in different journals and thesis

In Sciences:
American Chemical Society (ACS) style
American Institute of Physics (AIP) style
American Mathematical Society (AMS) style
Vancouver system
Institute of Electrical and Electronics Engineers (IEEE) style
Nature style
Science style
In Humanities:
Chicago Style
Harvard referencing style
MLA style
In Socials:
American Psychological Association (APA) style


Citation style
biblatex stylename


ACS
chem-acs


AIP
phys (*)


Nature
nature


Science
science


IEEE
ieee


Chicago
chicago-authordate


MLA
mla


APA
apa

(*) this is a new style, see http://ctan.org/pkg/biblatex-phys

Further reading
For more information see

Bibliography management in LaTeX
Biblatex bibliography styles
Biblatex package documentation
Table of contents
Management in a large project
Documentation Home
Learn LaTeX in 30 minutes
Overleaf guides
Creating a document in Overleaf
Uploading a project
Copying a project
Creating a project from a template
Using the Overleaf project menu
Including images in Overleaf
Exporting your work from Overleaf
Working offline in Overleaf
Using Track Changes in Overleaf
Using bibliographies in Overleaf
Sharing your work with others
Using the History feature
Debugging Compilation timeout errors
How-to guides
Guide to Overleaf’s premium features
LaTeX Basics
Creating your first LaTeX document
Choosing a LaTeX Compiler
Paragraphs and new lines
Bold, italics and underlining
Lists
Errors
Mathematics
Mathematical expressions
Subscripts and superscripts
Brackets and Parentheses
Matrices
Fractions and Binomials
Aligning equations
Operators
Spacing in math mode
Integrals, sums and limits
Display style in math mode
List of Greek letters and math symbols
Mathematical fonts
Using the Symbol Palette in Overleaf
Figures and tables
Inserting Images
Tables
Positioning Images and Tables
Lists of Tables and Figures
Drawing Diagrams Directly in LaTeX
TikZ package
References and Citations
Bibliography management with bibtex
Bibliography management with natbib
Bibliography management with biblatex
Bibtex bibliography styles
Natbib bibliography styles
Natbib citation styles
Biblatex bibliography styles
Biblatex citation styles
Languages
Multilingual typesetting on Overleaf using polyglossia and fontspec
Multilingual typesetting on Overleaf using babel and fontspec
International language support
Quotations and quotation marks
Arabic
Chinese
French
German
Greek
Italian
Japanese
Korean
Portuguese
Russian
Spanish
Document structure
Sections and chapters
Table of contents
Cross referencing sections, equations and floats
Indices
Glossaries
Nomenclatures
Management in a large project
Multi-file LaTeX projects
Hyperlinks
Formatting
Lengths in LaTeX
Headers and footers
Page numbering
Paragraph formatting
Line breaks and blank spaces
Text alignment
Page size and margins
Single sided and double sided documents
Multiple columns
Counters
Code listing
Code Highlighting with minted
Using colours in LaTeX
Footnotes
Margin notes
Fonts
Font sizes, families, and styles
Font typefaces
Supporting modern fonts with XƎLaTeX
Presentations
Beamer
Powerdot
Posters
Commands
Commands
Environments
Field specific
Theorems and proofs
Chemistry formulae
Feynman diagrams
Molecular orbital diagrams
Chess notation
Knitting patterns
CircuiTikz package
Pgfplots package
Typesetting exams in LaTeX
Knitr
Attribute Value Matrices
Class files
Understanding packages and class files
List of packages and class files
Writing your own package
Writing your own class
Advanced TeX/LaTeX
In-depth technical articles on TeX/LaTeX
AboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

Templates - Journals, CVs, Presentations, Reports and More - Overleaf, Online LaTeX EditorSkip to contentFeatures & BenefitsFeaturesFor WritingFor GroupsFor TeachingFor UniversitiesFor PublishersFor EnterprisesTemplatesPlans & PricingHelpDocumentationContact UsRegisterLog InTemplatesFilters: All / Templates / Examples / ArticlesStart your projects with quality LaTeX templates for journals, CVs, resumes, papers, presentations, assignments, letters, project reports, and more. Search or browse below.SearchPopular TagsAcademic JournalBibliographyBookCalendarRésumé / CVFormal LetterHomework AssignmentNewsletterPosterPresentationProject / Lab ReportThesisRecentRelatório ESTG P.PORTOTemplate para relatórios de tese ou projeto final.
(versão 2)António PintoNEJLT templatePaper template for the Northern European Journal of Language TechnologyLeon DerczynskiUnipd PresentationUnofficial Beamer theme for presentations for the University of Padua.Mattia TamiazzoAssociation for Computing Machinery (ACM) - Small Standard Format TemplateOfficialThis is a sample file for ACM small trim journals using acmart.cls v2.00 (2023/11/07), as provided by the ACM. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.

This small trim template is used for submissions to the following journals and transactions:


Computers in Entertainment (CIE)
ACM Computing Surveys (CSUR)
Distributed Ledger Technologies: Research and Practice (DLT)
Formal Aspects of Computing (FAC)
ACM Games: Research and Practice (GAMES)
Journal of the ACM (JACM)
Journal of Data and Information Quality (JDIQ)
Journal of Data Science (JDS)
Journal of Experimental Algorithmics (JEA)
ACM Journal on Emerging Technologies in Computing Systems (JETC)
Proceedings of the ACM on Computer Graphics and Interactive Tech-
niques (PACMCGIT)
ACM Transactions on Autonomous and Adaptive Systems (TAAS)
ACM Transactions on Accessible Computing (TACCESS)
ACM Transactions on Architecture and Code Optimization (TACO)
ACM Transactions on Algorithms (TALG)
ACM Transactions on Asian Language and Low-Resource Information Processing (TALLIP)
ACM Transactions on Cyber-Physical Systems (TCPS)
ACM Transactions on Data Science (TDSCI)
ACM Transactions on Economics and Computation (TEAC)
ACM Transactions on Embedded Computing Systems (TECS)
ACM Transactions on Evolutionary Learning (TELO)
ACM Transactions on Human-Robot Interaction (THRI)
ACM Transactions on Interactive Intelligent Systems (TIIS)
ACM Transactions on Internet of Things (TIOT)
ACM Transactions on Intelligent Systems and Technology (TIST)
ACM Transactions on Knowledge Discovery from Data (TKDD)
ACM Transactions on Management Information Systems (TMIS)
ACM Transactions on Computing Education (TOCE)
ACM Transactions on Computer-Human Interaction (TOCHI)
ACM Transactions on Computational Logic (TOCL)
ACM Transactions on Computer Systems (TOCS)
ACM Transactions on Computation Theory (TOCT)
ACM Transactions on Design Automation of Electronic Systems (TODAES)
ACM Transactions on Database Systems (TODS)
ACM Transactions on Information Systems (TOIS)
ACM Transactions on Internet Technology (TOIT)
ACM Transactions on Modeling and Computer Simulation (TOMACS)
ACM Transactions on Multimedia Computing and Communications (TOMM)
ACM Transactions on Modeling and Performance Evaluation of Computing Systems (TOMPECS)
ACM Transactions on Mathematical Software (TOMS)
ACM Transactions on Parallel Computing (TOPC)
ACM Transactions on Programming Languages and Systems (TOPLAS)
ACM Transactions on Privacy and Security (TOPS)
ACM Transactions on Storage (TOS)
ACM Transactions on Software Engineering and Methodology (TOSEM)
ACM Transactions on Sensor Networks (TOSN)
ACM Transactions on Quantum Computing (TQC)
ACM Transactions on Reconfigurable Technology and Systems (TRETS)
ACM Transactions on Spatial Algorithms and Systems (TSAS)
ACM Transactions on Social Computing (TSC)
ACM Transactions on Speech and Language Processing (TSLP)
ACM Transactions on the Web (TWEB)


Once your article is complete, you can use 'Submit to ACM' button at the top of the Overleaf (formerly writeLaTeX) editor bar to quickly download your paper files and go straight to the appropriate ACM submission site.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - Generic Journal Manuscript TemplateOfficialThis is a sample file for ACM generic journal manuscripts, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.

All journals use acmsmall with the following exceptions:


acmlarge - Large single column format, used for IMWUT, JOCCH, PACMPL, POMACS, TAP
acmtog - Large double column format, used for TOG


Note: Most proceedings authors will use the "sigconf" proceedings template. If you are unsure which template variant to use, please request clarification from your event or publication contact.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - SIG Proceedings TemplateOfficialThis is a sample file for ACM SIG conference proceedings (except SIGPLAN), using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Note: Most proceedings authors will use this "sigconf" proceedings template. If you are unsure which template variant to use, please request clarification from your event or publication contact. As of March 2017, this format (sigconf) should also be used for SIGGRAPH conferences; and as of May 2020 this format (sigconf) should also be used for SIGCHI conferences.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - SIG Conference Proceedings with Small Format TemplateOfficialThis is a sample file for ACM SIG conference proceedings with the acmsmall format specifications, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Note: There are only a small group of ACM conferences which permitted to use this template. If you are unsure which template variant to use, please request clarification from your event or publication contact.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - SIGPLAN Proceedings TemplateOfficialThis is a sample file for ACM SIGPLAN conference proceedings, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

Note: Most proceedings authors will use the "sigconf" proceedings template. If you are unsure which template variant to use, please request clarification from your event or publication contact.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)Association for Computing Machinery (ACM) - Large 2-Column Format TemplateOfficialThis is a sample file for ACM large trim, 2-column journals, specifically showing an example of a paper for ACM Transactions on Graphics, using acmart.cls v2.00 (2023/11/07). It is provided by the ACM as a template for submissions, and pre-loaded in Overleaf (formerly writeLaTeX) for ease of editing online. Please see the ACM Submission Guidelines page for more details on manuscript preparation.

This large double column format is used for submissions to ACM Transactions on Graphics (TOG).

Once your article is complete, you can use 'Submit to ACM' button at the top of the Overleaf editor bar to quickly download your paper files and go straight to the appropriate ACM submission site.

Important information regarding submission versions for review: After finalizing the formatting of your paper you must use the option “manuscript” with \documentclass[manuscript]{acmart} command. This will generate the output in single column review format which is required. Accepted manuscripts will be transformed during production to produce properly formatted output accord to the publication specifications.  Authors will be provided the opportunity to review and approve the formatted output before the article is published to the ACM Digital Library.Association for Computing Machinery (ACM)12345…Next ›Last »FeaturedA quick guide to LaTeX
Know the LaTeX command you want to use but can't remember how to write it?


Here we present a great tips sheet produced by Dave Richeson; it's pre-loaded in Overleaf so you can see how the commands work instantly.

Simply click on the button above to open a version in Overleaf for editing (and to quickly copy and paste the commands you need!).


For more comments visit this page on Dave's site, or if you'd like to work through a fuller introduction to LaTeX why not check out our free online course?
Example by Division by ZeroModern Simple CVA modern simple (academic) CV template.

With no colour, but a few different tabulars for visualizing your skills and cv events. 
The template has no colour, but adding logos to your events will still make it relatively colourful (and thus, not strictly classic,  why I called it "modern").
You can play around with different fonts. The places where the changes can be made are indicated by comments.
The fancy font for the name can be taken away, if you don't want it.

The github repo is here: https://github.com/latex-ninja/modern-simple-cvSarah LangExample ProjectAn example LaTeX project for starting off your own articleOverleafMSc or PhD Dissertation Template (Originally for the University of Malta)A modern dissertation (or thesis) LaTeX template.  Originally used during my D.Phil. at the University of Oxford.  Now updated to be used by students at the University of Malta.  Easily customizable, so trivial to change colours and logos for your own institution.

Github repo:
https://github.com/jp-um/university_of_malta_LaTeX_dissertation_template

Get in touch if you find anything untoward or have any questions (or want to buy me beer).Dr Jean-Paul EbejerBasic Academic Journal Article TemplateThis is a basic journal article template which includes metadata fields for multiple authors, affiliations and keywords.

It is also set up to use the lineno package for line numbers; these can be turned on by adding the 'lineno' option to the documentclass command.John HammersleyHenriquesLab bioRxiv templateOfficialThis is a gorgeous template for bioRxiv pre-prints. 

An example manuscript using it can be found here.Ricardo HenriquesAboutAbout usOur valuesCareersPress & awardsBlogLearnLaTeX in 30 minutesTemplatesWebinarsTutorialsHow to insert imagesHow to create tablesPlans & pricingFeaturesFor individuals & groupsFor enterpriseFor UniversitiesFor studentsGet involvedBecome an Overleaf advisorLet us know what you thinkHelpDocumentation Contact us  Website status © 2023 OverleafPrivacy and TermsCompliance
EnglishLanguageEnglishČeštinaEspañolPortuguêsFrançaisDeutschSvenskaTürkçeItaliano简体中文NorskРусскийDansk한국어日本語Overleaf on TwitterOverleaf on FacebookOverleaf on LinkedInWe only use cookies for essential purposes and to improve your experience on our site. You can find out more in our cookie policy.Essential cookies onlyAccept all cookies×Contact UsSubjectHave you checked our knowledge base?EmailAffected project URL (Optional)MessageContact UsSending…Message sent! Our team will review it and reply by email.

Rate limit reached, please try again later

Rate limit reached, please try again later

Rate limit reached, please try again later

